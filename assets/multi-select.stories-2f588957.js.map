{"version":3,"file":"multi-select.stories-2f588957.js","sources":["../../packages/components/select/src/multi-select.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n} from \"@yamada-ui/core\"\nimport { Popover, PopoverTrigger } from \"@yamada-ui/popover\"\nimport { cx, getValidChildren, handlerAll } from \"@yamada-ui/utils\"\nimport {\n  cloneElement,\n  CSSProperties,\n  FC,\n  MouseEventHandler,\n  ReactElement,\n  useMemo,\n} from \"react\"\nimport { SelectIcon, SelectClearIcon, SelectIconProps } from \"./select-icon\"\nimport { SelectList, SelectListProps } from \"./select-list\"\nimport {\n  useSelect,\n  UseSelectProps,\n  SelectDescendantsContextProvider,\n  SelectProvider,\n  useSelectContext,\n} from \"./use-select\"\nimport { OptionGroup, Option, SelectItem } from \"./\"\n\ntype MultiSelectOptions = {\n  /**\n   * If provided, generate options based on items.\n   */\n  items?: SelectItem[]\n  /**\n   * The custom display value to use.\n   */\n  component?: FC<{\n    value: string | number\n    displayValue: string\n    index: number\n    onRemove: MouseEventHandler<HTMLElement>\n  }>\n  /**\n   * The visual separator between each value.\n   *\n   * @default ','\n   */\n  separator?: string\n  /**\n   * If `true`, display the select clear icon.\n   *\n   * @default true\n   */\n  isClearable?: boolean\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for select container element.\n   */\n  containerProps?: Omit<HTMLUIProps<\"div\">, \"children\">\n  /**\n   * Props for select list element.\n   */\n  listProps?: Omit<SelectListProps, \"children\">\n  /**\n   * Props for select icon element.\n   */\n  iconProps?: SelectIconProps\n  /**\n   * Props for select clear icon element.\n   */\n  clearIconProps?: SelectIconProps\n}\n\nexport type MultiSelectProps = ThemeProps<\"Select\"> &\n  Omit<UseSelectProps<string[]>, \"placeholderInOptions\" | \"isEmpty\"> &\n  MultiSelectOptions\n\nexport const MultiSelect = forwardRef<MultiSelectProps, \"div\">((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"MultiSelect\", props)\n  let {\n    className,\n    defaultValue = [],\n    component,\n    separator,\n    isClearable = true,\n    items = [],\n    color,\n    h,\n    height,\n    minH,\n    minHeight,\n    closeOnSelect = false,\n    containerProps,\n    listProps,\n    iconProps,\n    clearIconProps,\n    children,\n    ...computedProps\n  } = omitThemeProps(mergedProps)\n\n  const validChildren = getValidChildren(children)\n  let computedChildren: ReactElement[] = []\n\n  if (!validChildren.length && items.length) {\n    computedChildren = items\n      .map((item, i) => {\n        if (\"value\" in item) {\n          const { label, value, ...props } = item\n\n          return (\n            <Option key={i} value={value} {...props}>\n              {label}\n            </Option>\n          )\n        } else if (\"items\" in item) {\n          const { label, items = [], ...props } = item\n\n          return (\n            <OptionGroup\n              key={i}\n              label={label ?? \"\"}\n              {...(props as HTMLUIProps<\"ul\">)}\n            >\n              {items.map(({ label, value, ...props }, i) => (\n                <Option key={i} value={value} {...props}>\n                  {label}\n                </Option>\n              ))}\n            </OptionGroup>\n          )\n        }\n      })\n      .filter(Boolean) as ReactElement[]\n  }\n\n  let isEmpty = !validChildren.length && !computedChildren.length\n\n  const {\n    value,\n    descendants,\n    formControlProps,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    placeholder,\n    onClear,\n    ...rest\n  } = useSelect<string[]>({\n    ...computedProps,\n    defaultValue,\n    placeholderInOptions: false,\n    closeOnSelect,\n    isEmpty,\n  })\n\n  h = h ?? height\n  minH = minH ?? minHeight\n\n  const css: CSSUIObject = {\n    position: \"relative\",\n    w: \"100%\",\n    h: \"fit-content\",\n    color,\n    ...styles.container,\n  }\n\n  return (\n    <SelectDescendantsContextProvider value={descendants}>\n      <SelectProvider value={{ ...rest, value, placeholder, styles }}>\n        <Popover {...getPopoverProps()}>\n          <ui.div\n            className={cx(\"ui-multi-select\", className)}\n            __css={css}\n            {...getContainerProps(containerProps)}\n          >\n            <PopoverTrigger>\n              <MultiSelectField\n                component={component}\n                separator={separator}\n                h={h}\n                minH={minH}\n                {...getFieldProps({}, ref)}\n              />\n            </PopoverTrigger>\n\n            {isClearable && value.length ? (\n              <SelectClearIcon\n                {...clearIconProps}\n                onClick={handlerAll(clearIconProps?.onClick, onClear)}\n                {...formControlProps}\n              />\n            ) : (\n              <SelectIcon {...iconProps} {...formControlProps} />\n            )}\n\n            {!isEmpty ? (\n              <SelectList {...listProps}>\n                {children ?? computedChildren}\n              </SelectList>\n            ) : null}\n          </ui.div>\n        </Popover>\n      </SelectProvider>\n    </SelectDescendantsContextProvider>\n  )\n})\n\ntype MultiSelectFieldProps = HTMLUIProps<\"div\"> &\n  Pick<MultiSelectOptions, \"component\" | \"separator\">\n\nconst MultiSelectField = forwardRef<MultiSelectFieldProps, \"div\">(\n  (\n    {\n      className,\n      component,\n      separator = \",\",\n      isTruncated,\n      noOfLines = 1,\n      h,\n      minH,\n      ...rest\n    },\n    ref,\n  ) => {\n    const { value, displayValue, onChange, placeholder, styles } =\n      useSelectContext()\n\n    const cloneChildren = useMemo(() => {\n      if (!displayValue?.length)\n        return <ui.span noOfLines={noOfLines}>{placeholder}</ui.span>\n\n      if (component) {\n        return (\n          <ui.span isTruncated={isTruncated} noOfLines={noOfLines}>\n            {(displayValue as string[]).map((displayValue, index) => {\n              const onRemove: MouseEventHandler<HTMLElement> = (e) => {\n                e.stopPropagation()\n\n                onChange(value[index])\n              }\n\n              const el = component({\n                value: value[index],\n                displayValue,\n                index,\n                onRemove,\n              }) as ReactElement\n\n              const style: CSSProperties = {\n                marginBlockStart: \"0.125rem\",\n                marginBlockEnd: \"0.125rem\",\n                marginInlineEnd: \"0.25rem\",\n              }\n\n              return el ? cloneElement(el as ReactElement, { style }) : null\n            })}\n          </ui.span>\n        )\n      } else {\n        return (\n          <ui.span isTruncated={isTruncated} noOfLines={noOfLines}>\n            {(displayValue as string[]).map((value, index) => {\n              const isLast = displayValue.length === index + 1\n\n              return (\n                <ui.span key={index} display=\"inline-block\" me=\"0.25rem\">\n                  {value}\n                  {!isLast ? separator : null}\n                </ui.span>\n              )\n            })}\n          </ui.span>\n        )\n      }\n    }, [\n      displayValue,\n      isTruncated,\n      noOfLines,\n      onChange,\n      placeholder,\n      separator,\n      component,\n      value,\n    ])\n\n    const css: CSSUIObject = {\n      paddingEnd: \"2rem\",\n      h,\n      minH,\n      display: \"flex\",\n      alignItems: \"center\",\n      ...styles.field,\n    }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx(\"ui-multi-select__field\", className)}\n        __css={css}\n        py={displayValue?.length && component ? \"0.125rem\" : undefined}\n        {...rest}\n      >\n        {cloneChildren}\n      </ui.div>\n    )\n  },\n)\n"],"names":["MultiSelect","forwardRef","props","ref","styles","mergedProps","useMultiComponentStyle","className","defaultValue","component","separator","isClearable","items","color","h","height","minH","minHeight","closeOnSelect","containerProps","listProps","iconProps","clearIconProps","children","computedProps","omitThemeProps","validChildren","getValidChildren","computedChildren","item","i","label","value","Option","jsx","OptionGroup","isEmpty","descendants","formControlProps","getPopoverProps","getContainerProps","getFieldProps","placeholder","onClear","rest","useSelect","css","SelectDescendantsContextProvider","SelectProvider","Popover","jsxs","ui","cx","PopoverTrigger","MultiSelectField","SelectClearIcon","handlerAll","SelectIcon","SelectList","isTruncated","noOfLines","displayValue","onChange","useSelectContext","cloneChildren","useMemo","index","onRemove","e","el","style","cloneElement","isLast"],"mappings":"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"}