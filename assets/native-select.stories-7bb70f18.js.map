{"version":3,"file":"native-select.stories-7bb70f18.js","sources":["../../packages/components/native-select/src/native-select.tsx"],"sourcesContent":["import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  layoutStylesProperties,\n} from \"@yamada-ui/core\"\nimport type { FormControlOptions } from \"@yamada-ui/form-control\"\nimport {\n  useFormControlProps,\n  formControlProperties,\n} from \"@yamada-ui/form-control\"\nimport { ChevronIcon } from \"@yamada-ui/icon\"\nimport {\n  createContext,\n  cx,\n  splitObject,\n  getValidChildren,\n  isValidElement,\n  pickObject,\n} from \"@yamada-ui/utils\"\nimport type {\n  DetailedHTMLProps,\n  FC,\n  OptionHTMLAttributes,\n  ReactElement,\n} from \"react\"\nimport { cloneElement } from \"react\"\n\ntype NativeSelectBaseItem = Omit<\n  DetailedHTMLProps<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>,\n  \"label\" | \"children\" | \"value\"\n> & { label?: string }\n\ntype Value = DetailedHTMLProps<\n  OptionHTMLAttributes<HTMLOptionElement>,\n  HTMLOptionElement\n>[\"value\"]\n\ntype NativeSelectItemWithValue = NativeSelectBaseItem & { value?: Value }\n\ntype NativeSelectItemWithItems = NativeSelectBaseItem & {\n  items?: NativeSelectItemWithValue[]\n}\n\nexport type NativeSelectItem = NativeSelectItemWithValue &\n  NativeSelectItemWithItems\n\ntype NativeSelectContext = Record<string, CSSUIObject>\n\nconst [NativeSelectProvider, useNativeSelect] =\n  createContext<NativeSelectContext>({\n    name: \"NativeSelectContext\",\n    errorMessage: `useNativeSelect returned is 'undefined'. Seems you forgot to wrap the components in \"<NativeSelect />\"`,\n  })\n\ntype NativeSelectOptions = {\n  /**\n   * If provided, generate options based on items.\n   *\n   * @default '[]'\n   */\n  items?: NativeSelectItem[]\n  /**\n   * The placeholder for select.\n   */\n  placeholder?: string\n  /**\n   * If `true`, include placeholders in options.\n   *\n   * @default true\n   */\n  placeholderInOptions?: boolean\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for container element.\n   */\n  containerProps?: Omit<HTMLUIProps<\"div\">, \"children\">\n  /**\n   * Props for icon element.\n   */\n  iconProps?: HTMLUIProps<\"div\">\n}\n\nexport type NativeSelectProps = Omit<HTMLUIProps<\"select\">, \"size\"> &\n  ThemeProps<\"Select\"> &\n  NativeSelectOptions &\n  FormControlOptions\n\nexport const NativeSelect = forwardRef<NativeSelectProps, \"select\">(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\"NativeSelect\", props)\n    let {\n      className,\n      children,\n      placeholderInOptions = true,\n      color,\n      h,\n      height,\n      minH,\n      minHeight,\n      items = [],\n      placeholder,\n      containerProps,\n      iconProps,\n      ...rest\n    } = omitThemeProps(mergedProps)\n\n    rest = useFormControlProps(rest)\n\n    const formControlProps = pickObject(rest, formControlProperties)\n    const [layoutProps, selectProps] = splitObject(rest, layoutStylesProperties)\n\n    let computedChildren: ReactElement[] = []\n\n    if (!children && items.length) {\n      computedChildren = items\n        .map((item, i) => {\n          if (\"value\" in item) {\n            const { label, value, ...props } = item\n\n            return (\n              <NativeOption key={i} value={value} {...props}>\n                {label}\n              </NativeOption>\n            )\n          } else if (\"items\" in item) {\n            const { label, items = [], ...props } = item\n\n            return (\n              <NativeOptionGroup key={i} label={label} {...props}>\n                {items.map(({ label, value, ...props }, i) => (\n                  <NativeOption key={i} value={value} {...props}>\n                    {label}\n                  </NativeOption>\n                ))}\n              </NativeOptionGroup>\n            )\n          }\n        })\n        .filter(Boolean) as ReactElement[]\n    }\n\n    return (\n      <NativeSelectProvider value={styles}>\n        <ui.div\n          className=\"ui-select\"\n          __css={{\n            position: \"relative\",\n            w: \"100%\",\n            h: \"fit-content\",\n            color,\n            ...styles.container,\n          }}\n          {...layoutProps}\n          {...containerProps}\n          {...formControlProps}\n        >\n          <ui.select\n            ref={ref}\n            className={cx(\"ui-select__field\", className)}\n            __css={{\n              paddingEnd: \"2rem\",\n              h: h ?? height,\n              minH: minH ?? minHeight,\n              ...styles.field,\n            }}\n            {...selectProps}\n          >\n            {placeholder ? (\n              <NativeOption value=\"\" hidden={!placeholderInOptions}>\n                {placeholder}\n              </NativeOption>\n            ) : null}\n            {children ?? computedChildren}\n          </ui.select>\n\n          <NativeSelectIcon {...iconProps} {...formControlProps} />\n        </ui.div>\n      </NativeSelectProvider>\n    )\n  },\n)\n\ntype NativeSelectIconProps = HTMLUIProps<\"div\">\n\nconst NativeSelectIcon: FC<NativeSelectIconProps> = ({\n  className,\n  children,\n  ...rest\n}) => {\n  const styles = useNativeSelect()\n\n  const css: CSSUIObject = {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    ...styles.icon,\n  }\n\n  const validChildren = getValidChildren(children)\n\n  const cloneChildren = validChildren.map((child) =>\n    cloneElement(child, {\n      focusable: false,\n      \"aria-hidden\": true,\n      style: {\n        width: \"1em\",\n        height: \"1em\",\n        color: \"currentColor\",\n      },\n    }),\n  )\n\n  return (\n    <ui.div className={cx(\"ui-select__icon\", className)} __css={css} {...rest}>\n      {isValidElement(children) ? cloneChildren : <ChevronIcon />}\n    </ui.div>\n  )\n}\n\nexport type NativeOptionGroupProps = HTMLUIProps<\"optgroup\">\n\nexport const NativeOptionGroup = forwardRef<NativeOptionGroupProps, \"optgroup\">(\n  (props, ref) => <ui.optgroup ref={ref} {...props} />,\n)\n\nexport type NativeOptionProps = Omit<HTMLUIProps<\"option\">, \"children\"> & {\n  children?: string\n}\n\nexport const NativeOption = forwardRef<NativeOptionProps, \"option\">(\n  (props, ref) => <ui.option ref={ref} {...props} />,\n)\n"],"names":["NativeSelectProvider","useNativeSelect","createContext","NativeSelect","forwardRef","props","ref","styles","mergedProps","useMultiComponentStyle","className","children","placeholderInOptions","color","h","height","minH","minHeight","items","placeholder","containerProps","iconProps","rest","omitThemeProps","useFormControlProps","formControlProps","pickObject","formControlProperties","layoutProps","selectProps","splitObject","layoutStylesProperties","computedChildren","item","i","label","value","NativeOption","jsx","NativeOptionGroup","jsxs","ui","cx","NativeSelectIcon","css","cloneChildren","getValidChildren","child","cloneElement","isValidElement","ChevronIcon"],"mappings":"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"}