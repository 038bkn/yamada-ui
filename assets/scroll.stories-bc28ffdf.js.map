{"version":3,"file":"scroll.stories-bc28ffdf.js","sources":["../../node_modules/.pnpm/framer-motion@9.1.7_react-dom@18.2.0_react@18.2.0/node_modules/framer-motion/dist/es/value/use-spring.mjs"],"sourcesContent":["import { useContext, useRef, useInsertionEffect } from 'react';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { animateValue } from '../animation/legacy-popmotion/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const activeSpringAnimation = useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? source.get() : source);\n    const stopAnimation = () => {\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    useInsertionEffect(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            stopAnimation();\n            activeSpringAnimation.current = animateValue({\n                keyframes: [value.get(), v],\n                velocity: value.getVelocity(),\n                type: \"spring\",\n                ...config,\n                onUpdate: set,\n            });\n            return value.get();\n        }, stopAnimation);\n    }, [JSON.stringify(config)]);\n    useIsomorphicLayoutEffect(() => {\n        if (isMotionValue(source)) {\n            return source.on(\"change\", (v) => value.set(parseFloat(v)));\n        }\n    }, [value]);\n    return value;\n}\n\nexport { useSpring };\n"],"names":["useSpring","source","config","isStatic","useContext","MotionConfigContext","activeSpringAnimation","useRef","value","useMotionValue","isMotionValue","stopAnimation","useInsertionEffect","v","set","animateValue","useIsomorphicLayoutEffect"],"mappings":"ysBA0BA,SAASA,EAAUC,EAAQC,EAAS,GAAI,CACpC,KAAM,CAAE,SAAAC,CAAQ,EAAKC,EAAU,WAACC,CAAmB,EAC7CC,EAAwBC,SAAO,IAAI,EACnCC,EAAQC,EAAeC,EAAcT,CAAM,EAAIA,EAAO,MAAQA,CAAM,EACpEU,EAAgB,IAAM,CACpBL,EAAsB,SACtBA,EAAsB,QAAQ,MAE1C,EACIM,OAAAA,EAAAA,mBAAmB,IACRJ,EAAM,OAAO,CAACK,EAAGC,IAKhBX,EACOW,EAAID,CAAC,GAChBF,IACAL,EAAsB,QAAUS,EAAa,CACzC,UAAW,CAACP,EAAM,IAAG,EAAIK,CAAC,EAC1B,SAAUL,EAAM,YAAa,EAC7B,KAAM,SACN,GAAGN,EACH,SAAUY,CAC1B,CAAa,EACMN,EAAM,OACdG,CAAa,EACjB,CAAC,KAAK,UAAUT,CAAM,CAAC,CAAC,EAC3Bc,EAA0B,IAAM,CAC5B,GAAIN,EAAcT,CAAM,EACpB,OAAOA,EAAO,GAAG,SAAWY,GAAML,EAAM,IAAI,WAAWK,CAAC,CAAC,CAAC,CAEtE,EAAO,CAACL,CAAK,CAAC,EACHA,CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","x_google_ignoreList":[0]}