{"version":3,"file":"index-c02ccce4.js","sources":["../../packages/hooks/use-disclosure/src/index.ts"],"sourcesContent":["import { Primitive, useCallbackRef } from '@yamada-ui/utils'\nimport { useCallback, useRef, useState } from 'react'\n\ntype Args = Array<any> | object | Primitive\n\ntype ChainFunction<T extends Args = any> = (\n  ...args: T extends Array<any> ? T : T[]\n) => void | Promise<void>\n\nexport type UseDisclosureProps<T extends Args = any> = {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onOpen?: ChainFunction<T>\n  onClose?: ChainFunction<T>\n  timing?: 'before' | 'after'\n}\n\nexport const useDisclosure = <T extends Args = any>(\n  props: UseDisclosureProps<T> = {},\n) => {\n  const [defaultIsOpen, setIsOpen] = useState<boolean>(\n    props.defaultIsOpen ?? false,\n  )\n\n  const timingRef = useRef(props.timing ?? 'after')\n  const handleOpen = useCallbackRef(props.onOpen)\n  const handleClose = useCallbackRef(props.onClose)\n\n  const isControlled = props.isOpen !== undefined\n  const isOpen = props.isOpen !== undefined ? props.isOpen : defaultIsOpen\n\n  const onOpen: ChainFunction<T> = useCallback(\n    async (...args: T extends Array<any> ? T : T[]) => {\n      if (timingRef.current === 'before') await handleOpen?.(...args)\n\n      if (!isControlled) setIsOpen(true)\n\n      if (timingRef.current === 'after') await handleOpen?.(...args)\n    },\n    [isControlled, handleOpen, timingRef],\n  )\n\n  const onClose: ChainFunction<T> = useCallback(\n    async (...args: T extends Array<any> ? T : T[]) => {\n      if (timingRef.current === 'before') await handleClose?.(...args)\n\n      if (!isControlled) setIsOpen(false)\n\n      if (timingRef.current === 'after') await handleClose?.(...args)\n    },\n    [isControlled, handleClose, timingRef],\n  )\n\n  const onToggle: ChainFunction<T> = useCallback(\n    (...args: T extends Array<any> ? T : T[]) =>\n      !isOpen ? onOpen(...args) : onClose(...args),\n    [isOpen, onOpen, onClose],\n  )\n\n  return { isOpen, onOpen, onClose, onToggle }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n\nexport type LazyMode = 'unmount' | 'keepMounted'\n\nexport type UseLazyDisclosureProps = {\n  enabled?: boolean\n  isSelected?: boolean\n  wasSelected?: boolean\n  mode?: LazyMode\n}\n\nexport const useLazyDisclosure = ({\n  wasSelected,\n  enabled,\n  isSelected,\n  mode = 'unmount',\n}: UseLazyDisclosureProps) => {\n  if (!enabled) return true\n\n  if (isSelected) return true\n\n  if (mode === 'keepMounted' && wasSelected) return true\n\n  return false\n}\n"],"names":["useDisclosure","props","defaultIsOpen","setIsOpen","useState","timingRef","useRef","handleOpen","useCallbackRef","handleClose","isControlled","isOpen","onOpen","useCallback","args","onClose","onToggle","useLazyDisclosure","wasSelected","enabled","isSelected","mode"],"mappings":"6EAiBO,MAAMA,EAAgB,CAC3BC,EAA+B,KAC5B,CACG,KAAA,CAACC,EAAeC,CAAS,EAAIC,EAAA,SACjCH,EAAM,eAAiB,EAAA,EAGnBI,EAAYC,EAAA,OAAOL,EAAM,QAAU,OAAO,EAC1CM,EAAaC,EAAeP,EAAM,MAAM,EACxCQ,EAAcD,EAAeP,EAAM,OAAO,EAE1CS,EAAeT,EAAM,SAAW,OAChCU,EAASV,EAAM,SAAW,OAAYA,EAAM,OAASC,EAErDU,EAA2BC,EAAA,YAC/B,SAAUC,IAAyC,CAC7CT,EAAU,UAAY,UAAgB,MAAAE,GAAA,YAAAA,EAAa,GAAGO,IAErDJ,GAAcP,EAAU,EAAI,EAE7BE,EAAU,UAAY,SAAe,MAAAE,GAAA,YAAAA,EAAa,GAAGO,GAC3D,EACA,CAACJ,EAAcH,EAAYF,CAAS,CAAA,EAGhCU,EAA4BF,EAAA,YAChC,SAAUC,IAAyC,CAC7CT,EAAU,UAAY,UAAgB,MAAAI,GAAA,YAAAA,EAAc,GAAGK,IAEtDJ,GAAcP,EAAU,EAAK,EAE9BE,EAAU,UAAY,SAAe,MAAAI,GAAA,YAAAA,EAAc,GAAGK,GAC5D,EACA,CAACJ,EAAcD,EAAaJ,CAAS,CAAA,EAGjCW,EAA6BH,EAAA,YACjC,IAAIC,IACDH,EAA2BI,EAAQ,GAAGD,CAAI,EAAjCF,EAAO,GAAGE,CAAI,EAC1B,CAACH,EAAQC,EAAQG,CAAO,CAAA,EAG1B,MAAO,CAAE,OAAAJ,EAAQ,OAAAC,EAAQ,QAAAG,EAAS,SAAAC,CAAS,CAC7C,EAaaC,EAAoB,CAAC,CAChC,YAAAC,EACA,QAAAC,EACA,WAAAC,EACA,KAAAC,EAAO,SACT,IACM,IAACF,GAEDC,GAEAC,IAAS,eAAiBH"}