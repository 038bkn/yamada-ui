{"version":3,"file":"select-1be62ab9.js","sources":["../../packages/components/select/src/select.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n} from '@yamada-ui/core'\nimport { Popover, PopoverTrigger } from '@yamada-ui/popover'\nimport { cx, getValidChildren, isArray } from '@yamada-ui/utils'\nimport { ReactElement } from 'react'\nimport { SelectIcon, SelectIconProps } from './select-icon'\nimport { SelectList, SelectListProps } from './select-list'\nimport {\n  useSelect,\n  UseSelectProps,\n  SelectDescendantsContextProvider,\n  SelectProvider,\n  useSelectContext,\n} from './use-select'\nimport { OptionGroup, Option, OptionProps } from './'\n\nexport type UIOption = Omit<OptionProps, 'value' | 'children'> & {\n  label?: string\n  value?: string | UIOption[]\n}\n\ntype SelectOptions = {\n  /**\n   * If provided, generate options based on data.\n   */\n  options?: UIOption[]\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for select container element.\n   */\n  containerProps?: Omit<HTMLUIProps<'div'>, 'children'>\n  /**\n   * Props for select list element.\n   */\n  listProps?: Omit<SelectListProps, 'children'>\n  /**\n   * Props for select icon element.\n   */\n  iconProps?: SelectIconProps\n}\n\nexport type SelectProps = ThemeProps<'Select'> &\n  Omit<\n    UseSelectProps<string>,\n    'isEmpty' | 'maxSelectedValues' | 'omitSelectedValues'\n  > &\n  SelectOptions\n\nexport const Select = forwardRef<SelectProps, 'div'>((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle('Select', props)\n  let {\n    className,\n    placeholder,\n    defaultValue = '',\n    placeholderInOptions = true,\n    options = [],\n    color,\n    h,\n    height,\n    minH,\n    minHeight,\n    containerProps,\n    listProps,\n    iconProps,\n    children,\n    ...computedProps\n  } = omitThemeProps(mergedProps)\n\n  const validChildren = getValidChildren(children)\n  let computedChildren: ReactElement[] = []\n\n  if (!validChildren.length && options.length) {\n    computedChildren = options.map(({ label, value, ...props }, i) => {\n      if (!isArray(value)) {\n        return (\n          <Option key={i} value={value} {...props}>\n            {label}\n          </Option>\n        )\n      } else {\n        return (\n          <OptionGroup\n            key={i}\n            label={label ?? ''}\n            {...(props as HTMLUIProps<'ul'>)}\n          >\n            {value.map(({ label, value, ...props }, i) =>\n              !isArray(value) ? (\n                <Option key={i} value={value} {...props}>\n                  {label}\n                </Option>\n              ) : null,\n            )}\n          </OptionGroup>\n        )\n      }\n    })\n  }\n\n  const isEmpty =\n    !validChildren.length &&\n    !computedChildren.length &&\n    !(!!placeholder && placeholderInOptions)\n\n  const {\n    descendants,\n    formControlProps,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    ...rest\n  } = useSelect({\n    ...computedProps,\n    placeholder,\n    placeholderInOptions,\n    defaultValue,\n    isEmpty,\n  })\n\n  h = h ?? height\n  minH = minH ?? minHeight\n\n  const css: CSSUIObject = {\n    position: 'relative',\n    w: '100%',\n    h: 'fit-content',\n    color,\n    ...styles.containerProps,\n  }\n\n  return (\n    <SelectDescendantsContextProvider value={descendants}>\n      <SelectProvider\n        value={{ ...rest, placeholder, placeholderInOptions, styles }}\n      >\n        <Popover {...getPopoverProps()}>\n          <ui.div\n            className={cx('ui-select', className)}\n            __css={css}\n            {...getContainerProps(containerProps)}\n          >\n            <PopoverTrigger>\n              <SelectField h={h} minH={minH} {...getFieldProps({}, ref)} />\n            </PopoverTrigger>\n\n            <SelectIcon {...iconProps} {...formControlProps} />\n\n            {!isEmpty ? (\n              <SelectList {...listProps}>\n                {!!placeholder && placeholderInOptions ? (\n                  <Option>{placeholder}</Option>\n                ) : null}\n\n                {children ?? computedChildren}\n              </SelectList>\n            ) : null}\n          </ui.div>\n        </Popover>\n      </SelectProvider>\n    </SelectDescendantsContextProvider>\n  )\n})\n\ntype SelectFieldProps = HTMLUIProps<'div'>\n\nconst SelectField = forwardRef<SelectFieldProps, 'div'>(\n  ({ className, isTruncated = true, noOfLines, h, minH, ...rest }, ref) => {\n    const { displayValue, placeholder, styles } = useSelectContext()\n\n    const css: CSSUIObject = {\n      paddingEnd: '2rem',\n      h,\n      minH,\n      display: 'flex',\n      alignItems: 'center',\n      ...styles.field,\n    }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx('ui-select-field', className)}\n        __css={css}\n        {...rest}\n      >\n        <ui.span isTruncated={isTruncated} noOfLines={noOfLines}>\n          {displayValue ?? placeholder}\n        </ui.span>\n      </ui.div>\n    )\n  },\n)\n"],"names":["Select","forwardRef","props","ref","styles","mergedProps","useMultiComponentStyle","className","placeholder","defaultValue","placeholderInOptions","options","color","h","height","minH","minHeight","containerProps","listProps","iconProps","children","computedProps","omitThemeProps","validChildren","getValidChildren","computedChildren","label","value","i","isArray","jsx","OptionGroup","Option","isEmpty","descendants","formControlProps","getPopoverProps","getContainerProps","getFieldProps","rest","useSelect","css","SelectDescendantsContextProvider","SelectProvider","Popover","jsxs","ui","cx","PopoverTrigger","SelectField","SelectIcon","SelectList","isTruncated","noOfLines","displayValue","useSelectContext"],"mappings":"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"}