{"version":3,"file":"switch.stories-7bfc9823.js","sources":["../../packages/components/switch/src/switch.tsx"],"sourcesContent":["import { useCheckbox, UseCheckboxProps } from \"@yamada-ui/checkbox\"\nimport {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  HTMLUIProps,\n  ThemeProps,\n  useMultiComponentStyle,\n} from \"@yamada-ui/core\"\nimport { motion, MotionTransition } from \"@yamada-ui/motion\"\nimport { cx, dataAttr, omitObject } from \"@yamada-ui/utils\"\nimport { cloneElement, InputHTMLAttributes, ReactElement } from \"react\"\n\nexport type SwitchIconProps = {\n  isChecked?: boolean\n  isFocused?: boolean\n  isHovered?: boolean\n  isActive?: boolean\n}\n\ntype SwitchOptions = {\n  /**\n   * The switch icon to use.\n   */\n  icon?: ReactElement<SwitchIconProps>\n  /**\n   * Props for switch input element.\n   */\n  inputProps?: InputHTMLAttributes<HTMLInputElement>\n  /**\n   * Props for switch label element.\n   */\n  labelProps?: HTMLUIProps<\"span\">\n  /**\n   * Change switch label from right to left.\n   *\n   * @default false\n   */\n  isReverse?: boolean\n  /**\n   * Motion transition settings.\n   */\n  transition?: MotionTransition\n}\n\nexport type SwitchProps = Omit<UseCheckboxProps, \"isIndeterminate\"> &\n  Omit<HTMLUIProps<\"label\">, keyof UseCheckboxProps> &\n  ThemeProps<\"Switch\"> &\n  SwitchOptions\n\nexport const Switch = forwardRef<SwitchProps, \"input\">((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle(\"Switch\", props)\n  const {\n    className,\n    gap = \"0.5rem\",\n    children,\n    icon,\n    inputProps,\n    labelProps,\n    isReverse,\n    flexDirection,\n    transition = {\n      type: \"spring\",\n      stiffness: 700,\n      damping: 40,\n    },\n    ...rest\n  } = omitThemeProps(mergedProps)\n\n  const {\n    isChecked,\n    isFocused,\n    isHovered,\n    isActive,\n    getContainerProps,\n    getIconProps,\n    getInputProps,\n    getLabelProps,\n  } = useCheckbox(rest)\n\n  const cloneIcon = icon\n    ? cloneElement(icon, {\n        isChecked,\n        isFocused,\n        isHovered,\n        isActive,\n      })\n    : null\n\n  return (\n    <ui.label\n      ref={ref}\n      className={cx(\"ui-switch\", className)}\n      __css={{\n        cursor: \"pointer\",\n        position: \"relative\",\n        display: \"inline-flex\",\n        flexDirection: flexDirection ?? (isReverse ? \"row-reverse\" : \"row\"),\n        alignItems: \"center\",\n        verticalAlign: \"top\",\n        gap,\n        ...styles.container,\n      }}\n      {...getContainerProps()}\n      {...omitObject(rest, [\n        \"id\",\n        \"name\",\n        \"value\",\n        \"defaultValue\",\n        \"checked\",\n        \"defaultChecked\",\n        \"isChecked\",\n        \"onChange\",\n        \"onBlur\",\n        \"onFocus\",\n      ])}\n    >\n      <ui.input\n        className=\"ui-switch-input\"\n        {...getInputProps(inputProps, ref)}\n      />\n\n      {cloneIcon ?? (\n        <ui.span\n          className=\"ui-switch-track\"\n          __css={{\n            boxSizing: \"content-box\",\n            display: \"inline-flex\",\n            justifyContent: \"flex-start\",\n            alignItems: \"center\",\n            flexShrink: 0,\n            ...styles.track,\n          }}\n          {...getIconProps()}\n        >\n          <ui.span\n            as={motion.span}\n            className=\"ui-switch-thumb\"\n            data-checked={dataAttr(isChecked)}\n            layout\n            transition={transition}\n            __css={{ ...styles.thumb }}\n          />\n        </ui.span>\n      )}\n\n      {children ? (\n        <ui.span\n          className=\"ui-switch-label\"\n          __css={{ ...styles.label }}\n          {...getLabelProps(labelProps)}\n        >\n          {children}\n        </ui.span>\n      ) : null}\n    </ui.label>\n  )\n})\n"],"names":["Switch","forwardRef","props","ref","styles","mergedProps","useMultiComponentStyle","className","gap","children","icon","inputProps","labelProps","isReverse","flexDirection","transition","rest","omitThemeProps","isChecked","isFocused","isHovered","isActive","getContainerProps","getIconProps","getInputProps","getLabelProps","useCheckbox","cloneIcon","cloneElement","jsxs","ui","cx","omitObject","jsx","motion","dataAttr"],"mappings":"86BAkDO,MAAMA,EAASC,GAAiC,CAACC,EAAOC,IAAQ,CACrE,KAAM,CAACC,EAAQC,CAAW,EAAIC,GAAuB,SAAUJ,CAAK,EAC9D,CACJ,UAAAK,EACA,IAAAC,EAAM,SACN,SAAAC,EACA,KAAAC,EACA,WAAAC,GACA,WAAAC,GACA,UAAAC,GACA,cAAAC,GACA,WAAAC,GAAa,CACX,KAAM,SACN,UAAW,IACX,QAAS,EACX,EACA,GAAGC,CAAA,EACDC,GAAeZ,CAAW,EAExB,CACJ,UAAAa,EACA,UAAAC,GACA,UAAAC,GACA,SAAAC,GACA,kBAAAC,GACA,aAAAC,GACA,cAAAC,GACA,cAAAC,EAAA,EACEC,GAAYV,CAAI,EAEdW,GAAYjB,EACdkB,GAAA,aAAalB,EAAM,CACjB,UAAAQ,EACA,UAAAC,GACA,UAAAC,GACA,SAAAC,EACD,CAAA,EACD,KAGF,OAAAQ,EAACC,EAAG,MAAH,CACC,IAAA3B,EACA,UAAW4B,GAAG,YAAaxB,CAAS,EACpC,MAAO,CACL,OAAQ,UACR,SAAU,WACV,QAAS,cACT,cAAeO,KAAkBD,GAAY,cAAgB,OAC7D,WAAY,SACZ,cAAe,MACf,IAAAL,EACA,GAAGJ,EAAO,SACZ,EACC,GAAGkB,GAAkB,EACrB,GAAGU,GAAWhB,EAAM,CACnB,KACA,OACA,QACA,eACA,UACA,iBACA,YACA,WACA,SACA,SAAA,CACD,EAED,SAAA,CAAAiB,EAACH,EAAG,MAAH,CACC,UAAU,kBACT,GAAGN,GAAcb,GAAYR,CAAG,CAAA,CACnC,EAECwB,IACCM,EAACH,EAAG,KAAH,CACC,UAAU,kBACV,MAAO,CACL,UAAW,cACX,QAAS,cACT,eAAgB,aAChB,WAAY,SACZ,WAAY,EACZ,GAAG1B,EAAO,KACZ,EACC,GAAGmB,GAAa,EAEjB,SAAAU,EAACH,EAAG,KAAH,CACC,GAAII,GAAO,KACX,UAAU,kBACV,eAAcC,GAASjB,CAAS,EAChC,OAAM,GACN,WAAAH,GACA,MAAO,CAAE,GAAGX,EAAO,KAAM,CAAA,CAC3B,CAAA,CACF,EAGDK,EACCwB,EAACH,EAAG,KAAH,CACC,UAAU,kBACV,MAAO,CAAE,GAAG1B,EAAO,KAAM,EACxB,GAAGqB,GAAcb,EAAU,EAE3B,SAAAH,CAAA,CAAA,EAED,IAAA,CAAA,CAAA,CAGV,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}