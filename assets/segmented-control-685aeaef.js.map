{"version":3,"file":"segmented-control-685aeaef.js","sources":["../../packages/components/segmented-control/src/segmented-control.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n} from '@yamada-ui/core'\nimport { useControllableState } from '@yamada-ui/use-controllable-state'\nimport { createDescendant } from '@yamada-ui/use-descendant'\nimport { trackFocusVisible } from '@yamada-ui/use-focus-visible'\nimport { useResizeObserver } from '@yamada-ui/use-resize-observer'\nimport {\n  ariaAttr,\n  createContext,\n  cx,\n  dataAttr,\n  getValidChildren,\n  handlerAll,\n  mergeRefs,\n  omitObject,\n  PropGetter,\n  RequiredPropGetter,\n  useCallbackRef,\n} from '@yamada-ui/utils'\nimport {\n  ChangeEvent,\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useId,\n  useRef,\n  useState,\n} from 'react'\n\nconst { DescendantsContextProvider, useDescendants, useDescendant } =\n  createDescendant<HTMLButtonElement>()\n\ntype SegmentedControlContext = {\n  getInputProps: RequiredPropGetter<{ index: number }>\n  getLabelProps: RequiredPropGetter<{ index: number }>\n  styles: Record<string, CSSUIObject>\n}\n\nconst [SegmentedControlProvider, useSegmentedControl] =\n  createContext<SegmentedControlContext>({\n    strict: false,\n    name: 'SegmentedControlContext',\n  })\n\ntype SegmentedControlOptions = {\n  /**\n   * The HTML `name` attribute used for forms.\n   */\n  name?: string\n  /**\n   * The value of the segmented control.\n   */\n  value?: string\n  /**\n   * The initial value of the segmented control.\n   */\n  defaultValue?: string\n  /**\n   * The callback fired when any children radio is checked or unchecked.\n   */\n  onChange?: (value: string) => void\n  /**\n   * If `true`, the segmented control will be readonly.\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the segmented control will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport type SegmentedControlProps = Omit<HTMLUIProps<'div'>, 'onChange'> &\n  ThemeProps<'SegmentedControl'> &\n  SegmentedControlOptions\n\nexport const SegmentedControl = forwardRef<SegmentedControlProps, 'div'>(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\n      'SegmentedControl',\n      props,\n    )\n    let { className, id, name, isReadOnly, isDisabled, children, ...rest } =\n      omitThemeProps(mergedProps)\n\n    id = id ?? useId()\n    name = name ?? `segmented-control-${useId()}`\n\n    rest.onChange = useCallbackRef(rest.onChange)\n\n    const descendants = useDescendants()\n\n    const [focusedIndex, setFocusedIndex] = useState<number>(-1)\n    const [isFocusVisible, setIsFocusVisible] = useState<boolean>(false)\n    const [observerRef, containerRect] = useResizeObserver()\n    const containerRef = useRef<HTMLDivElement>(null)\n    const labelRefs = useRef<Map<string | number, HTMLLabelElement>>(new Map())\n\n    const [activePosition, setActivePosition] = useState({\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0,\n    })\n\n    const [value, setValue] = useControllableState({\n      value: rest.value,\n      defaultValue: rest.defaultValue,\n      onChange: rest.onChange,\n    })\n\n    useEffect(() => {\n      return trackFocusVisible(setIsFocusVisible)\n    }, [])\n\n    useEffect(() => {\n      const el = labelRefs.current.get(value)\n\n      if (!el || !containerRef.current || !observerRef.current) return\n\n      const { paddingLeft, paddingTop } = getComputedStyle(containerRef.current)\n\n      const gutterX = parseFloat(paddingLeft) || 0\n      const gutterY = parseFloat(paddingTop) || 0\n\n      let { width, height } = el.getBoundingClientRect()\n      const x = el.offsetLeft - gutterX\n      const y = el.offsetTop - gutterY\n\n      width = width * (el.offsetWidth / width) || 0\n      height = height * (el.offsetWidth / width) || 0\n\n      setActivePosition({ width, height, x, y })\n    }, [focusedIndex, containerRect, labelRefs, observerRef, value])\n\n    const onChange = useCallback(\n      (ev: ChangeEvent<HTMLInputElement>) => {\n        if (isDisabled || isReadOnly) {\n          ev.preventDefault()\n\n          return\n        }\n\n        setValue(ev.target.value)\n      },\n      [isDisabled, isReadOnly, setValue],\n    )\n\n    const onFocus = useCallback(\n      (index: number, skip: boolean) => {\n        if (isDisabled) return\n\n        if (skip) {\n          const next = descendants.enabledNextValue(index)\n\n          if (next) setFocusedIndex(next.index)\n        } else {\n          setFocusedIndex(index)\n        }\n      },\n      [descendants, isDisabled],\n    )\n\n    const onBlur = useCallback(() => setFocusedIndex(-1), [])\n\n    const getContainerProps: PropGetter = useCallback(\n      (props = {}, ref = null) => ({\n        ...omitObject(rest, ['value', 'defaultValue', 'onChange']),\n        ...props,\n        ref: mergeRefs(containerRef, observerRef, ref),\n        id,\n        'aria-disabled': ariaAttr(isDisabled),\n        'aria-readonly': ariaAttr(isReadOnly),\n        onBlur: handlerAll(props.onBlur, onBlur),\n      }),\n      [id, isDisabled, isReadOnly, observerRef, onBlur, rest],\n    )\n\n    const getActiveProps: PropGetter = useCallback(\n      (props = {}, ref = null) => {\n        const { width, height, x, y } = activePosition\n\n        return {\n          ...props,\n          ref,\n          style: {\n            position: 'absolute',\n            zIndex: 1,\n            width,\n            height,\n            transform: `translate(${x}px, ${y}px)`,\n          },\n        }\n      },\n      [activePosition],\n    )\n\n    const getInputProps: RequiredPropGetter<{ index: number }> = useCallback(\n      ({ index, ...props } = {}, ref = null) => {\n        const disabled = props.disabled ?? props.isDisabled ?? isDisabled\n        const readOnly = props.readOnly ?? props.isReadOnly ?? isReadOnly\n        const checked = props.value === value\n\n        return {\n          ...omitObject(props, ['isDisabled', 'isReadOnly']),\n          ref,\n          id: `${id}-${index}`,\n          type: 'radio',\n          name,\n          disabled: disabled || readOnly,\n          readOnly,\n          checked,\n          'aria-disabled': ariaAttr(disabled),\n          'aria-readonly': ariaAttr(readOnly),\n          'data-checked': dataAttr(checked),\n          'data-focus': dataAttr(index === focusedIndex),\n          style: {\n            border: '0px',\n            clip: 'rect(0px, 0px, 0px, 0px)',\n            height: '1px',\n            width: '1px',\n            margin: '-1px',\n            padding: '0px',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            position: 'absolute',\n          },\n          onChange: handlerAll(props.onChange, (ev) =>\n            !disabled && !readOnly\n              ? onChange(ev as ChangeEvent<HTMLInputElement>)\n              : {},\n          ),\n        }\n      },\n      [isDisabled, isReadOnly, value, id, name, focusedIndex, onChange],\n    )\n\n    const getLabelProps: RequiredPropGetter<{ index: number }> = useCallback(\n      ({ index, ...props } = {}, ref = null) => {\n        const disabled = props.disabled ?? props.isDisabled ?? isDisabled\n        const readOnly = props.readOnly ?? props.isReadOnly ?? isReadOnly\n        const checked = props.value === value\n        const focused = index === focusedIndex\n\n        return {\n          props,\n          ref: mergeRefs(\n            (node) => labelRefs.current.set(props.value, node),\n            ref,\n          ),\n          'aria-disabled': ariaAttr(disabled),\n          'aria-readonly': ariaAttr(readOnly),\n          'data-checked': dataAttr(checked),\n          'data-focus': dataAttr(focused),\n          'data-focus-visible': dataAttr(focused && isFocusVisible),\n          onFocus: handlerAll(props.onFocus, () =>\n            onFocus(index, disabled || readOnly),\n          ),\n          ...(disabled || readOnly\n            ? {\n                _hover: {},\n                _active: {},\n                _focus: {},\n                _invalid: {},\n                _focusVisible: {},\n              }\n            : {}),\n          style: { position: 'relative', zIndex: 2 },\n        }\n      },\n      [focusedIndex, isDisabled, isFocusVisible, isReadOnly, onFocus, value],\n    )\n\n    const css: CSSUIObject = {\n      position: 'relative',\n      display: 'inline-flex',\n      alignItems: 'center',\n      ...styles.container,\n    }\n\n    const validChildren = getValidChildren(children)\n\n    if (value == null && rest.defaultValue == null) {\n      for (const child of validChildren) {\n        if (child.type !== SegmentedControlButton) continue\n\n        const value = child.props.value\n\n        setValue(value)\n\n        break\n      }\n    }\n\n    return (\n      <DescendantsContextProvider value={descendants}>\n        <SegmentedControlProvider\n          value={{ getInputProps, getLabelProps, styles }}\n        >\n          <ui.div\n            {...getContainerProps({}, ref)}\n            className={cx('ui-segmented-control', className)}\n            __css={css}\n          >\n            <ui.span\n              className='ui-segmented-control-active'\n              {...getActiveProps()}\n              __css={styles.active}\n            />\n            {validChildren}\n          </ui.div>\n        </SegmentedControlProvider>\n      </DescendantsContextProvider>\n    )\n  },\n)\n\ntype SegmentedControlButtonOptions = {\n  /**\n   * The value of the segmented control button.\n   */\n  value: string | number\n  /**\n   * The callback fired when any children radio is checked or unchecked.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n}\n\nexport type SegmentedControlButtonProps = Omit<\n  HTMLUIProps<'label'>,\n  'onChange'\n> &\n  Pick<SegmentedControlProps, 'isDisabled' | 'isReadOnly'> &\n  SegmentedControlButtonOptions\n\nexport const SegmentedControlButton = forwardRef<\n  SegmentedControlButtonProps,\n  'input'\n>(\n  (\n    {\n      className,\n      disabled,\n      readOnly,\n      isDisabled,\n      isReadOnly,\n      value,\n      onChange,\n      children,\n      ...rest\n    },\n    ref,\n  ) => {\n    const { getInputProps, getLabelProps, styles } = useSegmentedControl()\n\n    const { index, register } = useDescendant({\n      disabled: isDisabled || isReadOnly,\n    })\n\n    const props = {\n      index,\n      value,\n      onChange,\n      disabled,\n      readOnly,\n      isDisabled,\n      isReadOnly,\n    }\n\n    const css: CSSUIObject = {\n      cursor: 'pointer',\n      flex: '1 1 0%',\n      display: 'inline-flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      ...styles.button,\n    }\n\n    return (\n      <ui.label\n        {...getLabelProps(omitObject(props, ['onChange']))}\n        className={cx('ui-segmented-control-button', className)}\n        __css={css}\n        {...rest}\n      >\n        <ui.input {...getInputProps(props, mergeRefs(register, ref))} />\n        <ui.span>{children}</ui.span>\n      </ui.label>\n    )\n  },\n)\n"],"names":["DescendantsContextProvider","useDescendants","useDescendant","createDescendant","SegmentedControlProvider","useSegmentedControl","createContext","SegmentedControl","forwardRef","props","ref","styles","mergedProps","useMultiComponentStyle","className","id","name","isReadOnly","isDisabled","children","rest","omitThemeProps","useId","useCallbackRef","descendants","focusedIndex","setFocusedIndex","useState","isFocusVisible","setIsFocusVisible","observerRef","containerRect","useResizeObserver","containerRef","useRef","labelRefs","activePosition","setActivePosition","value","setValue","useControllableState","useEffect","trackFocusVisible","el","paddingLeft","paddingTop","gutterX","gutterY","width","height","x","y","onChange","useCallback","ev","onFocus","index","skip","next","onBlur","getContainerProps","omitObject","mergeRefs","ariaAttr","handlerAll","getActiveProps","getInputProps","disabled","readOnly","checked","dataAttr","getLabelProps","focused","node","css","validChildren","getValidChildren","child","SegmentedControlButton","jsx","jsxs","ui","cx","register"],"mappings":"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"}