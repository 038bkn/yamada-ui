{"version":3,"file":"number-input-52ad7dfd.js","sources":["../../packages/hooks/use-counter/src/index.ts","../../packages/components/number-input/src/number-input.tsx"],"sourcesContent":["import {\n  clampNumber,\n  countDecimal,\n  toPrecision,\n  useCallbackRef,\n} from '@yamada-ui/utils'\nimport { useCallback, useState } from 'react'\n\nexport interface UseCounterProps {\n  /**\n   * The value of the counter.\n   * Should be less than `max` and greater than `min`.\n   */\n  value?: string | number\n  /**\n   * The initial value of the counter.\n   * Should be less than `max` and greater than `min`.\n   */\n  defaultValue?: string | number\n  /**\n   * The step used to increment or decrement the value.\n   *\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   *\n   * @default Number.MIN_SAFE_INTEGER\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  max?: number\n  /**\n   * The number of decimal points used to round the value.\n   */\n  precision?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   * the value will not exceed the `max` or go lower than `min`.\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n  /**\n   * The callback fired when the value changes.\n   */\n  onChange?: (valueAsString: string, valueAsNumber: number) => void\n}\n\nexport const useCounter = ({\n  min = Number.MIN_SAFE_INTEGER,\n  max = Number.MAX_SAFE_INTEGER,\n  keepWithinRange = true,\n  ...props\n}: UseCounterProps = {}) => {\n  const onChange = useCallbackRef(props.onChange)\n\n  const [defaultValue, setValue] = useState<string | number>(() => {\n    if (props.defaultValue == null) return ''\n\n    return casting(props.defaultValue, props.step ?? 1, props.precision) ?? ''\n  })\n\n  const isControlled = typeof props.value !== 'undefined'\n  const value = isControlled ? (props.value as string | number) : defaultValue\n\n  const countDecimal = getCountDecimal(parse(value), props.step ?? 1)\n\n  const precision = props.precision ?? countDecimal\n\n  const update = useCallback(\n    (next: string | number) => {\n      if (next === value) return\n\n      if (!isControlled) setValue(next.toString())\n\n      onChange(next.toString(), parse(next))\n    },\n    [onChange, isControlled, value],\n  )\n\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) nextValue = clampNumber(nextValue, min, max)\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = props.step ?? 1) => {\n      let next: string | number\n\n      if (value === '') {\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n\n      update(next)\n    },\n    [clamp, props.step, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = props.step ?? 1) => {\n      let next: string | number\n\n      if (value === '') {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n\n      update(next)\n    },\n    [clamp, props.step, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: string | number\n\n    if (defaultValue == null) {\n      next = ''\n    } else {\n      next = casting(defaultValue, props.step ?? 1, props.precision) ?? min\n    }\n\n    update(next)\n  }, [defaultValue, props.precision, props.step, update, min])\n\n  const cast = useCallback(\n    (value: string | number) => {\n      const nextValue = casting(value, props.step ?? 1, precision) ?? min\n\n      update(nextValue)\n    },\n    [precision, props.step, update, min],\n  )\n\n  const valueAsNumber = parse(value)\n\n  const isOut = valueAsNumber < min || max < valueAsNumber\n  const isMax = valueAsNumber === max\n  const isMin = valueAsNumber === min\n\n  return {\n    isOut,\n    isMax,\n    isMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast,\n    setValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nconst parse = (value: string | number): number =>\n  parseFloat(value.toString().replace(/[^\\w.-]+/g, ''))\n\nconst getCountDecimal = (value: number, step: number): number =>\n  Math.max(countDecimal(step), countDecimal(value))\n\nconst casting = (\n  value: string | number,\n  step: number,\n  precision?: number,\n): string | undefined => {\n  value = parse(value)\n\n  return !Number.isNaN(value)\n    ? toPrecision(value, precision ?? getCountDecimal(value, step))\n    : undefined\n}\n","import {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n  CSSUIProps,\n} from '@yamada-ui/core'\nimport {\n  useFormControlProps,\n  UseFormControlProps,\n  formControlProperties,\n} from '@yamada-ui/form-control'\nimport { ChevronIcon } from '@yamada-ui/icon'\nimport { useCounter, UseCounterProps } from '@yamada-ui/use-counter'\nimport { useEventListener } from '@yamada-ui/use-event-listener'\nimport { useInterval } from '@yamada-ui/use-interval'\nimport {\n  ariaAttr,\n  createContext,\n  cx,\n  handlerAll,\n  mergeRefs,\n  omitObject,\n  pickObject,\n  PropGetter,\n  useCallbackRef,\n  useSafeLayoutEffect,\n  useUpdateEffect,\n} from '@yamada-ui/utils'\nimport {\n  ChangeEvent,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  KeyboardEventHandler,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\n\nconst isDefaultValidCharacter = (character: string) =>\n  /^[Ee0-9+\\-.]$/.test(character)\n\nconst isValidNumericKeyboardEvent = (\n  { key, ctrlKey, altKey, metaKey }: KeyboardEvent,\n  isValid: (key: string) => boolean,\n) => {\n  if (key == null) return true\n\n  const isModifierKey = ctrlKey || altKey || metaKey\n  const isSingleCharacterKey = key.length === 1\n\n  if (!isSingleCharacterKey || isModifierKey) return true\n\n  return isValid(key)\n}\n\nconst getStep = <Y extends KeyboardEvent | WheelEvent>({\n  ctrlKey,\n  shiftKey,\n  metaKey,\n}: Y) => {\n  let ratio = 1\n\n  if (metaKey || ctrlKey) ratio = 0.1\n\n  if (shiftKey) ratio = 10\n\n  return ratio\n}\n\ntype ValidityState = 'rangeUnderflow' | 'rangeOverflow'\n\nexport type UseNumberInputProps = UseFormControlProps<HTMLInputElement> &\n  UseCounterProps & {\n    /**\n     * The HTML `name` attribute used for forms.\n     */\n    name?: string\n    /**\n     * Hints at the type of data that might be entered by the user.\n     * It also determines the type of keyboard shown to the user on mobile devices.\n     *\n     * @default 'decimal'\n     */\n    inputMode?: InputHTMLAttributes<any>['inputMode']\n    /**\n     * The pattern used to check the <input> element's value against on form submission.\n     *\n     * @default '[0-9]*(.[0-9]+)?'\n     */\n    pattern?: InputHTMLAttributes<any>['pattern']\n    /**\n     * If `true`, the input will be focused as you increment or decrement the value with the stepper.\n     *\n     * @default true\n     */\n    focusInputOnChange?: boolean\n    /**\n     * This controls the value update when you blur out of the input.\n     * - If `true` and the value is greater than `max`, the value will be reset to `max`.\n     * - Else, the value remains the same.\n     *\n     * @default true\n     */\n    clampValueOnBlur?: boolean\n    /**\n     * If `true`, the input's value will change based on mouse wheel.\n     *\n     * @default false\n     */\n    allowMouseWheel?: boolean\n    /**\n     * The callback invoked when invalid number is entered.\n     */\n    onInvalid?: (\n      message: ValidityState,\n      value: string,\n      valueAsNumber: number,\n    ) => void\n    /**\n     * This is used to format the value so that screen readers\n     * can speak out a more human-friendly value.\n     *\n     * It is used to set the `aria-valuetext` property of the input.\n     */\n    getAriaValueText?: (value: string | number) => string\n    /**\n     * Whether the pressed key should be allowed in the input.\n     * The default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/.\n     */\n    isValidCharacter?: (value: string) => boolean\n    /**\n     * If using a custom display format, this converts the custom format to a format `parseFloat` understands.\n     */\n    parse?: (value: string) => string\n    /**\n     * If using a custom display format, this converts the default format to the custom format.\n     */\n    format?: (value: string | number) => string | number\n  }\n\nexport const useNumberInput = (props: UseNumberInputProps = {}) => {\n  const {\n    id,\n    name,\n    inputMode = 'decimal',\n    pattern = '[0-9]*(.[0-9]+)?',\n    required,\n    disabled,\n    readOnly,\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    allowMouseWheel,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    precision,\n    'aria-invalid': isInvalid,\n    ...rest\n  } = useFormControlProps(props)\n\n  const isRequired = required\n  const isReadOnly = readOnly\n  const isDisabled = disabled\n\n  const [isFocused, setFocused] = useState(false)\n  const isInteractive = !(readOnly || disabled)\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const inputSelectionRef = useRef<{\n    start: number | null\n    end: number | null\n  } | null>(null)\n  const incrementRef = useRef<HTMLButtonElement>(null)\n  const decrementRef = useRef<HTMLButtonElement>(null)\n\n  const onFocus = useCallbackRef(\n    handlerAll(rest.onFocus, (ev) => {\n      setFocused(true)\n\n      if (!inputSelectionRef.current) return\n\n      ev.target.selectionStart =\n        inputSelectionRef.current.start ?? ev.currentTarget.value?.length\n      ev.currentTarget.selectionEnd =\n        inputSelectionRef.current.end ?? ev.currentTarget.selectionStart\n    }),\n  )\n  const onBlur = useCallbackRef(\n    handlerAll(rest.onBlur, () => {\n      setFocused(false)\n\n      if (clampValueOnBlur) validateAndClamp()\n    }),\n  )\n  const onInvalid = useCallbackRef(rest.onInvalid)\n  const isValidCharacter = useCallbackRef(\n    rest.isValidCharacter ?? isDefaultValidCharacter,\n  )\n\n  const {\n    isMin,\n    isMax,\n    isOut,\n    value,\n    valueAsNumber,\n    setValue,\n    update,\n    cast,\n    ...counter\n  } = useCounter({\n    min,\n    max,\n    precision,\n    keepWithinRange,\n    ...rest,\n  })\n\n  const sanitize = useCallback(\n    (value: string) => value.split('').filter(isValidCharacter).join(''),\n    [isValidCharacter],\n  )\n\n  const parse = useCallback(\n    (value: string) => rest.parse?.(value) ?? value,\n    [rest],\n  )\n\n  const format = useCallback(\n    (value: string | number) => (rest.format?.(value) ?? value).toString(),\n    [rest],\n  )\n\n  const increment = useCallback(\n    (step = rest.step ?? 1) => {\n      if (isInteractive) counter.increment(step)\n    },\n    [isInteractive, counter, rest.step],\n  )\n\n  const decrement = useCallback(\n    (step = rest.step ?? 1) => {\n      if (isInteractive) counter.decrement(step)\n    },\n    [isInteractive, counter, rest.step],\n  )\n\n  const validateAndClamp = useCallback(() => {\n    let next = value as string | number\n\n    if (value === '') return\n\n    const valueStartsWithE = /^[eE]/.test(value.toString())\n\n    if (valueStartsWithE) {\n      setValue('')\n    } else {\n      if (valueAsNumber < min) next = min\n\n      if (valueAsNumber > max) next = max\n\n      cast(next)\n    }\n  }, [cast, max, min, setValue, value, valueAsNumber])\n\n  const onChange = useCallback(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if ((ev.nativeEvent as InputEvent).isComposing) return\n\n      const parsedInput = parse(ev.currentTarget.value)\n\n      update(sanitize(parsedInput))\n\n      inputSelectionRef.current = {\n        start: ev.currentTarget.selectionStart,\n        end: ev.currentTarget.selectionEnd,\n      }\n    },\n    [parse, update, sanitize],\n  )\n\n  const onKeyDown = useCallback(\n    (ev: KeyboardEvent) => {\n      if (ev.nativeEvent.isComposing) return\n\n      if (!isValidNumericKeyboardEvent(ev, isValidCharacter))\n        ev.preventDefault()\n\n      const step = getStep(ev) * (rest.step ?? 1)\n\n      const keyMap: Record<string, KeyboardEventHandler> = {\n        ArrowUp: () => increment(step),\n        ArrowDown: () => decrement(step),\n        Home: () => update(min),\n        End: () => update(max),\n      }\n\n      const action = keyMap[ev.key]\n\n      if (!action) return\n\n      ev.preventDefault()\n      action(ev)\n    },\n    [decrement, increment, isValidCharacter, max, min, rest.step, update],\n  )\n\n  const { up, down, stop, isSpinning } = useSpinner(increment, decrement)\n\n  useAttributeObserver(incrementRef, ['disabled'], isSpinning, stop)\n  useAttributeObserver(decrementRef, ['disabled'], isSpinning, stop)\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange)\n      requestAnimationFrame(() => {\n        inputRef.current?.focus()\n      })\n  }, [focusInputOnChange])\n\n  const eventUp = useCallback(\n    (ev: any) => {\n      ev.preventDefault()\n      up()\n      focusInput()\n    },\n    [focusInput, up],\n  )\n\n  const eventDown = useCallback(\n    (ev: any) => {\n      ev.preventDefault()\n      down()\n      focusInput()\n    },\n    [focusInput, down],\n  )\n\n  useUpdateEffect(() => {\n    if (valueAsNumber > max) {\n      onInvalid?.('rangeOverflow', format(value), valueAsNumber)\n    } else if (valueAsNumber < min) {\n      onInvalid?.('rangeOverflow', format(value), valueAsNumber)\n    }\n  }, [valueAsNumber, value, format, onInvalid])\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n\n    const notInSync = inputRef.current.value != value\n\n    if (!notInSync) return\n\n    const parsedInput = parse(inputRef.current.value)\n\n    setValue(sanitize(parsedInput))\n  }, [parse, sanitize])\n\n  useEventListener(\n    () => inputRef.current,\n    'wheel',\n    (ev) => {\n      const ownerDocument = inputRef.current?.ownerDocument ?? document\n      const isFocused = ownerDocument.activeElement === inputRef.current\n\n      if (!allowMouseWheel || !isFocused) return\n\n      ev.preventDefault()\n\n      const step = getStep(ev as any) * (rest.step ?? 1)\n      const direction = Math.sign(ev.deltaY)\n\n      if (direction === -1) {\n        increment(step)\n      } else if (direction === 1) {\n        decrement(step)\n      }\n    },\n    { passive: false },\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      id,\n      name,\n      type: 'text',\n      inputMode,\n      pattern,\n      required,\n      disabled,\n      readOnly,\n      ...pickObject(rest, formControlProperties),\n      ...omitObject(props, ['defaultValue']),\n      ref: mergeRefs(inputRef, ref),\n      value: format(value),\n      'aria-invalid': ariaAttr(isInvalid ?? isOut),\n      autoComplete: 'off',\n      autoCorrect: 'off',\n      onChange: handlerAll(props.onChange, onChange),\n      onKeyDown: handlerAll(props.onKeyDown, onKeyDown),\n      onFocus: handlerAll(props.onFocus, onFocus),\n      onBlur: handlerAll(props.onBlur, onBlur),\n    }),\n    [\n      id,\n      name,\n      inputMode,\n      pattern,\n      required,\n      disabled,\n      readOnly,\n      rest,\n      format,\n      value,\n      isInvalid,\n      isOut,\n      onChange,\n      onKeyDown,\n      onFocus,\n      onBlur,\n    ],\n  )\n\n  const getIncrementProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = props.disabled || (keepWithinRange && isMax)\n\n      return {\n        required,\n        readOnly,\n        disabled,\n        ...pickObject(rest, formControlProperties),\n        ...props,\n        ref: mergeRefs(ref, incrementRef),\n        role: 'button',\n        tabIndex: -1,\n        cursor: readOnly ? 'not-allowed' : props.cursor,\n        onPointerDown: handlerAll(props.onPointerDown, (ev) => {\n          if (ev.button === 0 && !disabled) eventUp(ev)\n        }),\n        onPointerLeave: handlerAll(props.onPointerLeave, stop),\n        onPointerUp: handlerAll(props.onPointerUp, stop),\n      }\n    },\n    [keepWithinRange, isMax, required, readOnly, rest, stop, eventUp],\n  )\n\n  const getDecrementProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = props.disabled || (keepWithinRange && isMin)\n\n      return {\n        required,\n        readOnly,\n        disabled,\n        ...pickObject(rest, formControlProperties),\n        ...props,\n        ref: mergeRefs(ref, decrementRef),\n        role: 'button',\n        tabIndex: -1,\n        cursor: readOnly ? 'not-allowed' : props.cursor,\n        onPointerDown: handlerAll(props.onPointerDown, (ev) => {\n          if (ev.button === 0 && !disabled) eventDown(ev)\n        }),\n        onPointerLeave: handlerAll(props.onPointerLeave, stop),\n        onPointerUp: handlerAll(props.onPointerUp, stop),\n      }\n    },\n    [keepWithinRange, isMin, required, readOnly, rest, stop, eventDown],\n  )\n\n  return {\n    value: format(value),\n    valueAsNumber,\n    isFocused,\n    isRequired,\n    isReadOnly,\n    isDisabled,\n    getInputProps,\n    getIncrementProps,\n    getDecrementProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n\nconst INTERVAL = 50\n\nconst DELAY = 300\n\ntype Action = 'increment' | 'decrement'\n\nconst useSpinner = (increment: Function, decrement: Function) => {\n  const [isSpinning, setIsSpinning] = useState(false)\n  const [action, setAction] = useState<Action | null>(null)\n  const [isOnce, setIsOnce] = useState(true)\n  const timeoutRef = useRef<any>(null)\n\n  const removeTimeout = () => clearTimeout(timeoutRef.current)\n\n  useInterval(\n    () => {\n      if (action === 'increment') increment()\n\n      if (action === 'decrement') decrement()\n    },\n    isSpinning ? INTERVAL : null,\n  )\n\n  const up = useCallback(() => {\n    if (isOnce) increment()\n\n    timeoutRef.current = setTimeout(() => {\n      setIsOnce(false)\n      setIsSpinning(true)\n      setAction('increment')\n    }, DELAY)\n  }, [increment, isOnce])\n\n  const down = useCallback(() => {\n    if (isOnce) decrement()\n\n    timeoutRef.current = setTimeout(() => {\n      setIsOnce(false)\n      setIsSpinning(true)\n      setAction('decrement')\n    }, DELAY)\n  }, [decrement, isOnce])\n\n  const stop = useCallback(() => {\n    setIsOnce(true)\n    setIsSpinning(false)\n    removeTimeout()\n  }, [])\n\n  useEffect(() => {\n    return () => removeTimeout()\n  }, [])\n\n  return { up, down, stop, isSpinning }\n}\n\nconst useAttributeObserver = (\n  ref: React.RefObject<HTMLElement | null>,\n  attributeFilter: string[],\n  enabled: boolean,\n  func: () => void,\n) => {\n  useEffect(() => {\n    if (!ref.current || !enabled) return\n\n    const ownerDocument = ref.current.ownerDocument.defaultView ?? window\n\n    const observer = new ownerDocument.MutationObserver((changes) => {\n      for (const { type, attributeName } of changes) {\n        if (\n          type === 'attributes' &&\n          attributeName &&\n          attributeFilter.includes(attributeName)\n        )\n          func()\n      }\n    })\n\n    observer.observe(ref.current, { attributes: true, attributeFilter })\n\n    return () => observer.disconnect()\n  })\n}\n\ntype NumberInputOptions = {\n  /**\n   * If `true`, display the addon for the number input.\n   */\n  isStepper?: boolean\n  /**\n   * Props for container element.\n   */\n  containerProps?: HTMLUIProps<'div'>\n  /**\n   * Props for addon component.\n   */\n  addonProps?: HTMLUIProps<'div'>\n  /**\n   * Props for increment component.\n   */\n  incrementProps?: NumberIncrementStepperProps\n  /**\n   * Props for decrement component.\n   */\n  decrementProps?: NumberDecrementStepperProps\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: CSSUIProps<'unresponsive'>['borderColor']\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: CSSUIProps<'unresponsive'>['borderColor']\n}\n\nexport type NumberInputProps = Omit<\n  HTMLUIProps<'input'>,\n  'disabled' | 'required' | 'readOnly' | 'size' | 'onChange'\n> &\n  ThemeProps<'NumberInput'> &\n  Omit<UseNumberInputProps, 'disabled' | 'required' | 'readOnly'> &\n  NumberInputOptions\n\ntype NumberInputContext = {\n  getInputProps: PropGetter\n  getIncrementProps: PropGetter\n  getDecrementProps: PropGetter\n  styles: Record<string, CSSUIObject>\n}\n\nconst [NumberInputContextProvider, useNumberInputContext] =\n  createContext<NumberInputContext>({\n    strict: false,\n    name: 'NumberInputContext',\n  })\n\nexport const NumberInput = forwardRef<NumberInputProps, 'input'>(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle('NumberInput', props)\n    const {\n      className,\n      isStepper = true,\n      containerProps,\n      addonProps,\n      incrementProps,\n      decrementProps,\n      onChange,\n      ...rest\n    } = omitThemeProps(mergedProps)\n    const { getInputProps, getIncrementProps, getDecrementProps } =\n      useNumberInput({\n        onChange,\n        ...rest,\n      })\n\n    const css: CSSUIObject = {\n      position: 'relative',\n      zIndex: 0,\n      ...styles.container,\n    }\n\n    return (\n      <NumberInputContextProvider\n        value={{ getInputProps, getIncrementProps, getDecrementProps, styles }}\n      >\n        <ui.div\n          className={cx('ui-number-input', className)}\n          __css={css}\n          {...containerProps}\n        >\n          <NumberInputField {...getInputProps(rest, ref)} />\n\n          {isStepper ? (\n            <NumberInputAddon {...addonProps}>\n              <NumberIncrementStepper {...incrementProps} />\n              <NumberDecrementStepper {...decrementProps} />\n            </NumberInputAddon>\n          ) : null}\n        </ui.div>\n      </NumberInputContextProvider>\n    )\n  },\n)\n\ntype NumberInputFieldProps = Omit<\n  HTMLUIProps<'input'>,\n  'disabled' | 'required' | 'readOnly' | 'size'\n>\n\nconst NumberInputField = forwardRef<NumberInputFieldProps, 'input'>(\n  ({ className, ...rest }, ref) => {\n    const { styles } = useNumberInputContext()\n\n    const css: CSSUIObject = {\n      width: '100%',\n      ...styles.field,\n    }\n\n    return (\n      <ui.input\n        ref={ref}\n        className={cx('ui-number-input-field', className)}\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n\ntype NumberInputAddonProps = HTMLUIProps<'div'>\n\nconst NumberInputAddon = forwardRef<NumberInputAddonProps, 'div'>(\n  ({ className, ...rest }, ref) => {\n    const { styles } = useNumberInputContext()\n\n    const css: CSSUIObject = {\n      display: 'flex',\n      flexDirection: 'column',\n      position: 'absolute',\n      top: '0',\n      insetEnd: '0px',\n      margin: '1px',\n      height: 'calc(100% - 2px)',\n      zIndex: 'yamcha',\n      ...styles.addon,\n    }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx('ui-number-input-addon', className)}\n        aria-hidden\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n\nconst Stepper = ui('div', {\n  baseStyle: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n    transitionProperty: 'common',\n    transitionDuration: 'normal',\n    userSelect: 'none',\n    cursor: 'pointer',\n    lineHeight: 'normal',\n  },\n})\n\ntype NumberIncrementStepperProps = HTMLUIProps<'div'>\n\nconst NumberIncrementStepper = forwardRef<NumberIncrementStepperProps, 'div'>(\n  ({ className, children, ...rest }, ref) => {\n    const { getIncrementProps, styles } = useNumberInputContext()\n\n    const css: CSSUIObject = { ...styles.stepper }\n\n    return (\n      <Stepper\n        className={cx('ui-number-input-stepper', className)}\n        {...getIncrementProps(rest, ref)}\n        __css={css}\n      >\n        {children ?? <ChevronIcon __css={{ transform: 'rotate(180deg)' }} />}\n      </Stepper>\n    )\n  },\n)\n\ntype NumberDecrementStepperProps = HTMLUIProps<'div'>\n\nconst NumberDecrementStepper = forwardRef<NumberDecrementStepperProps, 'div'>(\n  ({ className, children, ...rest }, ref) => {\n    const { getDecrementProps, styles } = useNumberInputContext()\n\n    const css: CSSUIObject = { ...styles.stepper }\n\n    return (\n      <Stepper\n        className={cx('ui-number-input-stepper', className)}\n        {...getDecrementProps(rest, ref)}\n        __css={css}\n      >\n        {children ?? <ChevronIcon />}\n      </Stepper>\n    )\n  },\n)\n"],"names":["useCounter","min","max","keepWithinRange","props","onChange","useCallbackRef","defaultValue","setValue","useState","casting","isControlled","value","countDecimal","getCountDecimal","parse","precision","update","useCallback","next","clamp","nextValue","clampNumber","toPrecision","increment","step","decrement","reset","cast","valueAsNumber","isDefaultValidCharacter","character","isValidNumericKeyboardEvent","key","ctrlKey","altKey","metaKey","isValid","isModifierKey","getStep","shiftKey","ratio","useNumberInput","id","name","inputMode","pattern","required","disabled","readOnly","focusInputOnChange","clampValueOnBlur","allowMouseWheel","isInvalid","rest","useFormControlProps","isRequired","isReadOnly","isDisabled","isFocused","setFocused","isInteractive","inputRef","useRef","inputSelectionRef","incrementRef","decrementRef","onFocus","handlerAll","ev","_a","onBlur","validateAndClamp","onInvalid","isValidCharacter","isMin","isMax","isOut","counter","sanitize","format","parsedInput","onKeyDown","action","up","down","stop","isSpinning","useSpinner","useAttributeObserver","focusInput","eventUp","eventDown","useUpdateEffect","useSafeLayoutEffect","useEventListener","direction","getInputProps","ref","pickObject","formControlProperties","omitObject","mergeRefs","ariaAttr","getIncrementProps","getDecrementProps","INTERVAL","DELAY","setIsSpinning","setAction","isOnce","setIsOnce","timeoutRef","removeTimeout","useInterval","useEffect","attributeFilter","enabled","func","ownerDocument","observer","changes","type","attributeName","NumberInputContextProvider","useNumberInputContext","createContext","NumberInput","forwardRef","styles","mergedProps","useMultiComponentStyle","className","isStepper","containerProps","addonProps","incrementProps","decrementProps","omitThemeProps","css","jsx","jsxs","ui","cx","NumberInputField","NumberInputAddon","NumberIncrementStepper","NumberDecrementStepper","Stepper","children","ChevronIcon"],"mappings":"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"}