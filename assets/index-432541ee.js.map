{"version":3,"file":"index-432541ee.js","sources":["../../packages/hooks/use-controllable-state/src/index.ts"],"sourcesContent":["import { useCallbackRef, runIfFunc } from \"@yamada-ui/utils\"\nimport { Dispatch, SetStateAction, useState } from \"react\"\n\nexport type UseControllableStateProps<T> = {\n  value?: T\n  defaultValue?: T | (() => T)\n  onChange?: (value: T) => void\n  onUpdate?: (prev: T, next: T) => boolean\n}\n\nexport const useControllableState = <T>({\n  value,\n  ...rest\n}: UseControllableStateProps<T>) => {\n  rest.onUpdate = rest.onUpdate ?? ((prev, next) => prev !== next)\n\n  const onChange = useCallbackRef(rest.onChange)\n  const onUpdate = useCallbackRef(rest.onUpdate)\n\n  const [defaultValue, setDefaultValue] = useState(rest.defaultValue as T)\n  const controlled = value !== undefined\n  const resolvedValue = controlled ? value : defaultValue\n\n  const setValue = useCallbackRef(\n    (next: SetStateAction<T>) => {\n      const nextValue = runIfFunc(next, resolvedValue)\n\n      if (!onUpdate(resolvedValue, nextValue)) return\n\n      if (!controlled) setDefaultValue(nextValue)\n\n      onChange(nextValue)\n    },\n    [controlled, resolvedValue, onChange, onUpdate],\n  )\n\n  return [resolvedValue, setValue] as [T, Dispatch<SetStateAction<T>>]\n}\n"],"names":["useControllableState","value","rest","prev","next","onChange","useCallbackRef","onUpdate","defaultValue","setDefaultValue","useState","controlled","resolvedValue","setValue","nextValue","runIfFunc"],"mappings":"yFAUO,MAAMA,EAAuB,CAAI,CACtC,MAAAC,EACA,GAAGC,CACL,IAAoC,CAClCA,EAAK,SAAWA,EAAK,WAAa,CAACC,EAAMC,IAASD,IAASC,GAErD,MAAAC,EAAWC,EAAeJ,EAAK,QAAQ,EACvCK,EAAWD,EAAeJ,EAAK,QAAQ,EAEvC,CAACM,EAAcC,CAAe,EAAIC,EAAAA,SAASR,EAAK,YAAiB,EACjES,EAAaV,IAAU,OACvBW,EAAgBD,EAAaV,EAAQO,EAErCK,EAAWP,EACdF,GAA4B,CACrB,MAAAU,EAAYC,EAAUX,EAAMQ,CAAa,EAE1CL,EAASK,EAAeE,CAAS,IAEjCH,GAAYF,EAAgBK,CAAS,EAE1CT,EAASS,CAAS,EACpB,EACA,CAACH,EAAYC,EAAeP,EAAUE,CAAQ,CAAA,EAGzC,MAAA,CAACK,EAAeC,CAAQ,CACjC"}