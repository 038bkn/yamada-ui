{"version":3,"file":"td-f8625802.js","sources":["../../packages/components/native-table/src/native-table.tsx","../../packages/components/native-table/src/thead.tsx","../../packages/components/native-table/src/tbody.tsx","../../packages/components/native-table/src/tfoot.tsx","../../packages/components/native-table/src/tr.tsx","../../packages/components/native-table/src/th.tsx","../../packages/components/native-table/src/td.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n} from '@yamada-ui/core'\nimport { createContext, cx, omitObject } from '@yamada-ui/utils'\n\ntype TableStyleContext = Record<string, CSSUIObject>\n\nexport const [TableStyleProvider, useTableStyles] =\n  createContext<TableStyleContext>({\n    name: 'TableStyleContext',\n    errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Table />\" or \"<NativeTable />\" or \"<PagingTable />\"`,\n  })\n\ntype NativeTableOptions = {\n  /**\n   * The CSS `table-layout` property.\n   */\n  layout?: CSSUIObject['tableLayout']\n  /**\n   * If `true`, highlight the row when the table row is hovered.\n   *\n   * @default false\n   */\n  highlightOnHover?: boolean\n  /**\n   * If `true`, display the outer border of the table.\n   *\n   * @default false\n   */\n  withBorder?: boolean\n  /**\n   * If `true`, display line on the columns of the table.\n   *\n   * @default false\n   */\n  withColumnBorders?: boolean\n}\n\nexport type NativeTableProps = HTMLUIProps<'table'> &\n  ThemeProps<'Table'> &\n  NativeTableOptions\n\nexport const NativeTable = forwardRef<NativeTableProps, 'table'>(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle('NativeTable', props)\n    const { className, layout, ...rest } = omitThemeProps(mergedProps)\n\n    const css: CSSUIObject = { tableLayout: layout, ...styles.table }\n\n    return (\n      <TableStyleProvider value={styles}>\n        <ui.table\n          ref={ref}\n          className={cx('ui-native-table', className)}\n          __css={css}\n          {...omitObject(rest, [\n            'withBorder',\n            'withColumnBorders',\n            'highlightOnHover',\n          ])}\n        />\n      </TableStyleProvider>\n    )\n  },\n)\n","import { ui, forwardRef, HTMLUIProps, CSSUIObject } from '@yamada-ui/core'\nimport { cx } from '@yamada-ui/utils'\nimport { useTableStyles } from './native-table'\n\nexport type TableHeadProps = HTMLUIProps<'thead'>\n\nexport const Thead = forwardRef<TableHeadProps, 'thead'>(\n  ({ className, ...rest }, ref) => {\n    const styles = useTableStyles()\n\n    const css: CSSUIObject = { ...styles.thead }\n\n    return (\n      <ui.thead\n        ref={ref}\n        className={cx('ui-table-thead', className)}\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n","import { ui, forwardRef, HTMLUIProps, CSSUIObject } from '@yamada-ui/core'\nimport { cx } from '@yamada-ui/utils'\nimport { useTableStyles } from './native-table'\n\nexport type TableBodyProps = HTMLUIProps<'tbody'>\n\nexport const Tbody = forwardRef<TableBodyProps, 'tbody'>(\n  ({ className, ...rest }, ref) => {\n    const styles = useTableStyles()\n\n    const css: CSSUIObject = { ...styles.tbody }\n\n    return (\n      <ui.tbody\n        ref={ref}\n        className={cx('ui-table-tbody', className)}\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n","import { ui, forwardRef, HTMLUIProps, CSSUIObject } from '@yamada-ui/core'\nimport { cx } from '@yamada-ui/utils'\nimport { useTableStyles } from './native-table'\n\nexport type TableFootProps = HTMLUIProps<'tfoot'>\n\nexport const Tfoot = forwardRef<TableFootProps, 'tfoot'>(\n  ({ className, ...rest }, ref) => {\n    const styles = useTableStyles()\n\n    const css: CSSUIObject = { ...styles.tfoot }\n\n    return (\n      <ui.tfoot\n        ref={ref}\n        className={cx('ui-table-tfoot', className)}\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n","import { ui, forwardRef, HTMLUIProps, CSSUIObject } from '@yamada-ui/core'\nimport { cx } from '@yamada-ui/utils'\nimport { useTableStyles } from './native-table'\n\nexport type TrProps = HTMLUIProps<'tr'>\n\nexport const Tr = forwardRef<TrProps, 'tr'>(({ className, ...rest }, ref) => {\n  const styles = useTableStyles()\n\n  const css: CSSUIObject = { ...styles.tr }\n\n  return (\n    <ui.tr\n      ref={ref}\n      className={cx('ui-table-tr', className)}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n","import { ui, forwardRef, HTMLUIProps, CSSUIObject } from '@yamada-ui/core'\nimport { cx } from '@yamada-ui/utils'\nimport { useTableStyles } from './native-table'\n\ntype ThOptions = {\n  /**\n   * Aligns the cell content to the right.\n   *\n   * @default false\n   */\n  isNumeric?: boolean\n}\n\nexport type ThProps = HTMLUIProps<'th'> & ThOptions\n\nexport const Th = forwardRef<ThProps, 'th'>(\n  ({ className, isNumeric, __css, ...rest }, ref) => {\n    const styles = useTableStyles()\n\n    const css: CSSUIObject = { ...styles.th, ...__css }\n\n    return (\n      <ui.th\n        ref={ref}\n        className={cx('ui-table-th', className)}\n        __css={css}\n        data-is-numeric={isNumeric}\n        {...rest}\n      />\n    )\n  },\n)\n","import { ui, forwardRef, HTMLUIProps, CSSUIObject } from '@yamada-ui/core'\nimport { cx } from '@yamada-ui/utils'\nimport { useTableStyles } from './native-table'\n\ntype TdOptions = {\n  /**\n   * Aligns the cell content to the right.\n   *\n   * @default false\n   */\n  isNumeric?: boolean\n}\n\nexport type TdProps = HTMLUIProps<'td'> & TdOptions\n\nexport const Td = forwardRef<TdProps, 'td'>(\n  ({ className, isNumeric, ...rest }, ref) => {\n    const styles = useTableStyles()\n\n    const css: CSSUIObject = { ...styles.td }\n\n    return (\n      <ui.td\n        ref={ref}\n        className={cx('ui-table-td', className)}\n        __css={css}\n        data-is-numeric={isNumeric}\n        {...rest}\n      />\n    )\n  },\n)\n"],"names":["TableStyleProvider","useTableStyles","createContext","NativeTable","forwardRef","props","ref","styles","mergedProps","useMultiComponentStyle","className","layout","rest","omitThemeProps","css","jsx","ui","cx","omitObject","Thead","Tbody","Tfoot","Tr","Th","isNumeric","__css","Td"],"mappings":"kQAaO,KAAM,CAACA,EAAoBC,CAAc,EAC9CC,EAAiC,CAC/B,KAAM,oBACN,aAAc,0IAChB,CAAC,EA+BUC,EAAcC,EACzB,CAACC,EAAOC,IAAQ,CACd,KAAM,CAACC,EAAQC,CAAW,EAAIC,EAAuB,cAAeJ,CAAK,EACnE,CAAE,UAAAK,EAAW,OAAAC,EAAQ,GAAGC,CAAK,EAAIC,EAAeL,CAAW,EAE3DM,EAAmB,CAAE,YAAaH,EAAQ,GAAGJ,EAAO,OAGxD,OAAAQ,EAACf,EAAmB,CAAA,MAAOO,EACzB,SAAAQ,EAACC,EAAG,MAAH,CACC,IAAAV,EACA,UAAWW,EAAG,kBAAmBP,CAAS,EAC1C,MAAOI,EACN,GAAGI,EAAWN,EAAM,CACnB,aACA,oBACA,kBAAA,CACD,CAAA,CAEL,CAAA,CAAA,CAEJ,CACF,EChEaO,EAAQf,EACnB,CAAC,CAAE,UAAAM,EAAW,GAAGE,CAAA,EAAQN,IAAQ,CAG/B,MAAMQ,EAAmB,CAAE,GAFZb,IAEsB,KAAM,EAGzC,OAAAc,EAACC,EAAG,MAAH,CACC,IAAAV,EACA,UAAWW,EAAG,iBAAkBP,CAAS,EACzC,MAAOI,EACN,GAAGF,CAAA,CAAA,CAGV,CACF,ECfaQ,EAAQhB,EACnB,CAAC,CAAE,UAAAM,EAAW,GAAGE,CAAA,EAAQN,IAAQ,CAG/B,MAAMQ,EAAmB,CAAE,GAFZb,IAEsB,KAAM,EAGzC,OAAAc,EAACC,EAAG,MAAH,CACC,IAAAV,EACA,UAAWW,EAAG,iBAAkBP,CAAS,EACzC,MAAOI,EACN,GAAGF,CAAA,CAAA,CAGV,CACF,ECfaS,EAAQjB,EACnB,CAAC,CAAE,UAAAM,EAAW,GAAGE,CAAA,EAAQN,IAAQ,CAG/B,MAAMQ,EAAmB,CAAE,GAFZb,IAEsB,KAAM,EAGzC,OAAAc,EAACC,EAAG,MAAH,CACC,IAAAV,EACA,UAAWW,EAAG,iBAAkBP,CAAS,EACzC,MAAOI,EACN,GAAGF,CAAA,CAAA,CAGV,CACF,ECfaU,EAAKlB,EAA0B,CAAC,CAAE,UAAAM,EAAW,GAAGE,GAAQN,IAAQ,CAG3E,MAAMQ,EAAmB,CAAE,GAFZb,IAEsB,EAAG,EAGtC,OAAAc,EAACC,EAAG,GAAH,CACC,IAAAV,EACA,UAAWW,EAAG,cAAeP,CAAS,EACtC,MAAOI,EACN,GAAGF,CAAA,CAAA,CAGV,CAAC,ECJYW,EAAKnB,EAChB,CAAC,CAAE,UAAAM,EAAW,UAAAc,EAAW,MAAAC,EAAO,GAAGb,GAAQN,IAAQ,CAGjD,MAAMQ,EAAmB,CAAE,GAFZb,IAEsB,GAAI,GAAGwB,CAAM,EAGhD,OAAAV,EAACC,EAAG,GAAH,CACC,IAAAV,EACA,UAAWW,EAAG,cAAeP,CAAS,EACtC,MAAOI,EACP,kBAAiBU,EAChB,GAAGZ,CAAA,CAAA,CAGV,CACF,EChBac,EAAKtB,EAChB,CAAC,CAAE,UAAAM,EAAW,UAAAc,EAAW,GAAGZ,CAAA,EAAQN,IAAQ,CAG1C,MAAMQ,EAAmB,CAAE,GAFZb,IAEsB,EAAG,EAGtC,OAAAc,EAACC,EAAG,GAAH,CACC,IAAAV,EACA,UAAWW,EAAG,cAAeP,CAAS,EACtC,MAAOI,EACP,kBAAiBU,EAChB,GAAGZ,CAAA,CAAA,CAGV,CACF"}