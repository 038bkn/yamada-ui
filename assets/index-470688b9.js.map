{"version":3,"file":"index-470688b9.js","sources":["../../packages/hooks/use-focus-visible/src/index.ts"],"sourcesContent":["import { isMac } from '@yamada-ui/utils'\nimport { useEffect, useState } from 'react'\n\ntype Modality = 'keyboard' | 'pointer' | 'virtual'\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent | null) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\nlet hasBlurredWindowRecently = false\n\nconst handlers = new Set<Handler>()\n\nconst trigger = (modality: Modality, ev: HandlerEvent | null) =>\n  handlers.forEach((handler) => handler(modality, ev))\n\nconst onValid = (e: KeyboardEvent) => {\n  return !(\n    e.metaKey ||\n    (!isMac && e.altKey) ||\n    e.ctrlKey ||\n    e.key === 'Control' ||\n    e.key === 'Shift' ||\n    e.key === 'Meta'\n  )\n}\n\nconst onKeyboard = (ev: KeyboardEvent) => {\n  hasEventBeforeFocus = true\n\n  if (onValid(ev)) {\n    modality = 'keyboard'\n\n    trigger('keyboard', ev)\n  }\n}\n\nconst onPointer = (ev: PointerEvent | MouseEvent) => {\n  modality = 'pointer'\n\n  if (ev.type === 'mousedown' || ev.type === 'pointerdown') {\n    hasEventBeforeFocus = true\n\n    const target = ev.composedPath ? ev.composedPath()[0] : ev.target\n\n    if ((target as HTMLElement).matches(':focus-visible')) return\n\n    trigger('pointer', ev)\n  }\n}\n\nconst isVirtualClick = (ev: MouseEvent | PointerEvent): boolean => {\n  if ((ev as any).mozInputSource === 0 && ev.isTrusted) return true\n\n  return ev.detail === 0 && !(ev as PointerEvent).pointerType\n}\n\nconst onClick = (ev: MouseEvent) => {\n  if (!isVirtualClick(ev)) return\n\n  hasEventBeforeFocus = true\n\n  modality = 'virtual'\n}\n\nconst onFocus = (ev: FocusEvent) => {\n  if (ev.target === window || ev.target === document) return\n\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = 'virtual'\n    trigger('virtual', ev)\n  }\n\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = false\n}\n\nconst onBlur = () => {\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = true\n}\n\nconst isFocusVisible = () => modality !== 'pointer'\n\nconst setupGlobalFocusEvents = () => {\n  if (typeof window === 'undefined' || hasSetup) return\n\n  const { focus } = HTMLElement.prototype\n\n  HTMLElement.prototype.focus = (...args) => {\n    hasEventBeforeFocus = true\n\n    if (this) focus.apply(this, args)\n  }\n\n  document.addEventListener('keydown', onKeyboard, true)\n  document.addEventListener('keyup', onKeyboard, true)\n  document.addEventListener('click', onClick, true)\n\n  window.addEventListener('focus', onFocus, true)\n  window.addEventListener('blur', onBlur, false)\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', onPointer, true)\n    document.addEventListener('pointermove', onPointer, true)\n    document.addEventListener('pointerup', onPointer, true)\n  } else {\n    document.addEventListener('mousedown', onPointer, true)\n    document.addEventListener('mousemove', onPointer, true)\n    document.addEventListener('mouseup', onPointer, true)\n  }\n\n  hasSetup = true\n}\n\nexport const trackFocusVisible = (func: FocusVisibleCallback) => {\n  setupGlobalFocusEvents()\n\n  func(isFocusVisible())\n\n  const handler = () => func(isFocusVisible())\n\n  handlers.add(handler)\n\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport const useFocusVisible = () => {\n  const [focusVisible, setFocusVisible] = useState(false)\n  const [focus, setFocus] = useState(false)\n\n  useEffect(() => {\n    return trackFocusVisible(setFocusVisible)\n  }, [])\n\n  return {\n    focusVisible: focusVisible && focus,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n  }\n}\n"],"names":["hasSetup","modality","hasEventBeforeFocus","hasBlurredWindowRecently","handlers","trigger","ev","handler","onValid","isMac","onKeyboard","onPointer","isVirtualClick","onClick","onFocus","onBlur","isFocusVisible","setupGlobalFocusEvents","args","trackFocusVisible","func"],"mappings":"oEAQA,IAAIA,EAAW,GACXC,EAA4B,KAC5BC,EAAsB,GACtBC,EAA2B,GAE/B,MAAMC,MAAe,IAEfC,EAAU,CAACJ,EAAoBK,IACnCF,EAAS,QAASG,GAAYA,EAAQN,EAAUK,CAAE,CAAC,EAE/CE,EAAW,GACR,EACL,EAAE,SACD,CAACC,GAAS,EAAE,QACb,EAAE,SACF,EAAE,MAAQ,WACV,EAAE,MAAQ,SACV,EAAE,MAAQ,QAIRC,EAAcJ,GAAsB,CAClBJ,EAAA,GAElBM,EAAQF,CAAE,IACDL,EAAA,WAEXI,EAAQ,WAAYC,CAAE,EAE1B,EAEMK,EAAaL,GAAkC,CAGnD,GAFWL,EAAA,UAEPK,EAAG,OAAS,aAAeA,EAAG,OAAS,cAAe,CAKnD,GAJiBJ,EAAA,IAEPI,EAAG,aAAeA,EAAG,eAAe,CAAC,EAAIA,EAAG,QAE/B,QAAQ,gBAAgB,EAAG,OAEvDD,EAAQ,UAAWC,CAAE,CACvB,CACF,EAEMM,EAAkBN,GACjBA,EAAW,iBAAmB,GAAKA,EAAG,UAAkB,GAEtDA,EAAG,SAAW,GAAK,CAAEA,EAAoB,YAG5CO,EAAWP,GAAmB,CAC7BM,EAAeN,CAAE,IAEAJ,EAAA,GAEXD,EAAA,UACb,EAEMa,EAAWR,GAAmB,CAC9BA,EAAG,SAAW,QAAUA,EAAG,SAAW,WAEtC,CAACJ,GAAuB,CAACC,IAChBF,EAAA,UACXI,EAAQ,UAAWC,CAAE,GAGDJ,EAAA,GACKC,EAAA,GAC7B,EAEMY,EAAS,IAAM,CACGb,EAAA,GACKC,EAAA,EAC7B,EAEMa,EAAiB,IAAMf,IAAa,UAEpCgB,EAAyB,IAAM,CAC/B,OAAO,OAAW,KAAejB,IAIzB,YAAA,UAAU,MAAQ,IAAIkB,IAAS,CACnBhB,EAAA,EAEU,EAGzB,SAAA,iBAAiB,UAAWQ,EAAY,EAAI,EAC5C,SAAA,iBAAiB,QAASA,EAAY,EAAI,EAC1C,SAAA,iBAAiB,QAASG,EAAS,EAAI,EAEzC,OAAA,iBAAiB,QAASC,EAAS,EAAI,EACvC,OAAA,iBAAiB,OAAQC,EAAQ,EAAK,EAEzC,OAAO,aAAiB,KACjB,SAAA,iBAAiB,cAAeJ,EAAW,EAAI,EAC/C,SAAA,iBAAiB,cAAeA,EAAW,EAAI,EAC/C,SAAA,iBAAiB,YAAaA,EAAW,EAAI,IAE7C,SAAA,iBAAiB,YAAaA,EAAW,EAAI,EAC7C,SAAA,iBAAiB,YAAaA,EAAW,EAAI,EAC7C,SAAA,iBAAiB,UAAWA,EAAW,EAAI,GAG3CX,EAAA,GACb,EAEamB,EAAqBC,GAA+B,CACxCH,IAEvBG,EAAKJ,GAAgB,EAErB,MAAMT,EAAU,IAAMa,EAAKJ,EAAgB,CAAA,EAE3C,OAAAZ,EAAS,IAAIG,CAAO,EAEb,IAAM,CACXH,EAAS,OAAOG,CAAO,CAAA,CAE3B"}