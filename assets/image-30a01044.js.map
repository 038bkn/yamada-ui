{"version":3,"file":"image-30a01044.js","sources":["../../packages/components/image/src/image.tsx"],"sourcesContent":["import { ui, forwardRef, HTMLUIProps, CSSUIProps } from '@yamada-ui/core'\nimport { cx, omitObject } from '@yamada-ui/utils'\nimport { isValidElement, ReactElement, useMemo } from 'react'\nimport { shouldShowFallbackImage, useImage, UseImageProps } from './use-image'\n\ntype ImageOptions = {\n  /**\n   * Fallback image `src` or element to show if image is loading or image fails.\n   */\n  fallback?: string | ReactElement\n  /**\n   * - beforeLoadOrError: loads the fallbackImage while loading the src.\n   * - onError: loads the fallbackImage only if there is an error fetching the src.\n   *\n   * @default \"beforeLoadOrError\"\n   */\n  fallbackStrategy?: 'onError' | 'beforeLoadOrError'\n  /**\n   * The CSS `box-size` property.\n   */\n  size?: CSSUIProps['boxSize']\n  /**\n   * The CSS `object-fit` property.\n   */\n  fit?: CSSUIProps['objectFit']\n}\n\nexport type ImageProps = Omit<HTMLUIProps<'img'>, keyof UseImageProps> &\n  UseImageProps &\n  ImageOptions\n\nexport const Image = forwardRef<ImageProps, 'img'>((props, ref) => {\n  let {\n    fallback,\n    src,\n    srcSet,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    className,\n    fallbackStrategy = 'beforeLoadOrError',\n    referrerPolicy,\n    size: boxSize,\n    fit: objectFit,\n    ...rest\n  } = props\n\n  ignoreFallback = loading != null || ignoreFallback || !fallback\n\n  const status = useImage({ ...props, crossOrigin, ignoreFallback })\n\n  const css = useMemo(() => ({ boxSize, objectFit }), [boxSize, objectFit])\n\n  const isFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  if (isFallbackImage) {\n    if (isValidElement(fallback)) {\n      return fallback\n    } else {\n      return (\n        <ui.img\n          ref={ref}\n          className={cx('ui-image--fallback', className)}\n          src={fallback as string | undefined}\n          __css={css}\n          {...(ignoreFallback ? rest : omitObject(rest, ['onError', 'onLoad']))}\n        />\n      )\n    }\n  }\n\n  return (\n    <ui.img\n      ref={ref}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className={cx('ui-image', className)}\n      __css={css}\n      {...(ignoreFallback ? rest : omitObject(rest, ['onError', 'onLoad']))}\n    />\n  )\n})\n"],"names":["Image","forwardRef","props","ref","fallback","src","srcSet","loading","ignoreFallback","crossOrigin","className","fallbackStrategy","referrerPolicy","boxSize","objectFit","rest","status","useImage","css","useMemo","shouldShowFallbackImage","isValidElement","jsx","ui","cx","omitObject"],"mappings":"+OA+BO,MAAMA,EAAQC,EAA8B,CAACC,EAAOC,IAAQ,CAC7D,GAAA,CACF,SAAAC,EACA,IAAAC,EACA,OAAAC,EACA,QAAAC,EACA,eAAAC,EACA,YAAAC,EACA,UAAAC,EACA,iBAAAC,EAAmB,oBACnB,eAAAC,EACA,KAAMC,EACN,IAAKC,EACL,GAAGC,CACD,EAAAb,EAEaM,EAAAD,GAAW,MAAQC,GAAkB,CAACJ,EAEvD,MAAMY,EAASC,EAAS,CAAE,GAAGf,EAAO,YAAAO,EAAa,eAAAD,EAAgB,EAE3DU,EAAMC,UAAQ,KAAO,CAAE,QAAAN,EAAS,UAAAC,CAAc,GAAA,CAACD,EAASC,CAAS,CAAC,EAIxE,OAFwBM,EAAwBJ,EAAQL,CAAgB,EAGlEU,EAAAA,eAAejB,CAAQ,EAClBA,EAGLkB,EAACC,EAAG,IAAH,CACC,IAAApB,EACA,UAAWqB,EAAG,qBAAsBd,CAAS,EAC7C,IAAKN,EACL,MAAOc,EACN,GAAIV,EAAiBO,EAAOU,EAAWV,EAAM,CAAC,UAAW,QAAQ,CAAC,CAAA,CAAA,EAOzEO,EAACC,EAAG,IAAH,CACC,IAAApB,EACA,IAAAE,EACA,OAAAC,EACA,YAAAG,EACA,QAAAF,EACA,eAAAK,EACA,UAAWY,EAAG,WAAYd,CAAS,EACnC,MAAOQ,EACN,GAAIV,EAAiBO,EAAOU,EAAWV,EAAM,CAAC,UAAW,QAAQ,CAAC,CAAA,CAAA,CAGzE,CAAC"}