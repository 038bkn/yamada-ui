{"version":3,"file":"index-3333d5de.js","sources":["../../packages/hooks/use-controllable-state/src/index.ts"],"sourcesContent":["import { useCallbackRef, runIfFunc } from '@yamada-ui/utils'\nimport { Dispatch, SetStateAction, useRef, useState } from 'react'\n\nexport type UseControllableStateProps<T extends any> = {\n  value?: T\n  defaultValue?: T | (() => T)\n  onChange?: (value: T) => void\n  onUpdate?: (prev: T, next: T) => boolean\n}\n\nexport const useControllableState = <T extends any>(\n  props: UseControllableStateProps<T>,\n) => {\n  props.onUpdate = props.onUpdate ?? ((prev, next) => prev !== next)\n\n  const onChange = useCallbackRef(props.onChange)\n  const onUpdate = useCallbackRef(props.onUpdate)\n\n  const [defaultValue, setDefaultValue] = useState(props.defaultValue as T)\n  const controlledRef = useRef(props.value !== undefined)\n  const controlled = controlledRef.current\n  const value = controlled ? (props.value as T) : defaultValue\n\n  const setValue = useCallbackRef(\n    (next: SetStateAction<T>) => {\n      const nextValue = runIfFunc(next, value)\n\n      if (!onUpdate(value, nextValue)) return\n\n      if (!controlled) setDefaultValue(nextValue)\n\n      onChange(nextValue)\n    },\n    [controlled, value, onChange, onUpdate],\n  )\n\n  return [value, setValue] as [T, Dispatch<SetStateAction<T>>]\n}\n"],"names":["useControllableState","props","prev","next","onChange","useCallbackRef","onUpdate","defaultValue","setDefaultValue","useState","controlled","useRef","value","setValue","nextValue","runIfFunc"],"mappings":"yFAUa,MAAAA,EACXC,GACG,CACHA,EAAM,SAAWA,EAAM,WAAa,CAACC,EAAMC,IAASD,IAASC,GAEvD,MAAAC,EAAWC,EAAeJ,EAAM,QAAQ,EACxCK,EAAWD,EAAeJ,EAAM,QAAQ,EAExC,CAACM,EAAcC,CAAe,EAAIC,EAAAA,SAASR,EAAM,YAAiB,EAElES,EADgBC,EAAAA,OAAOV,EAAM,QAAU,MAAS,EACrB,QAC3BW,EAAQF,EAAcT,EAAM,MAAcM,EAE1CM,EAAWR,EACdF,GAA4B,CACrB,MAAAW,EAAYC,EAAUZ,EAAMS,CAAK,EAElCN,EAASM,EAAOE,CAAS,IAEzBJ,GAAYF,EAAgBM,CAAS,EAE1CV,EAASU,CAAS,EACpB,EACA,CAACJ,EAAYE,EAAOR,EAAUE,CAAQ,CAAA,EAGjC,MAAA,CAACM,EAAOC,CAAQ,CACzB"}