{"version":3,"file":"extend-theming.stories-e2a57334.js","sources":["../../packages/theme-tools/src/with-default.ts"],"sourcesContent":["import type { Theme, ComponentDefaultProps, UsageTheme } from \"@yamada-ui/core\"\nimport type { Union } from \"@yamada-ui/utils\"\nimport { isArray, merge } from \"@yamada-ui/utils\"\n\nexport const withDefaultSize =\n  ({\n    size,\n    components,\n  }: {\n    size: ComponentDefaultProps[\"size\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { size } }]),\n      ),\n    })\n  }\n\nexport const withDefaultVariant =\n  ({\n    variant,\n    components,\n  }: {\n    variant: ComponentDefaultProps[\"variant\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { variant } }]),\n      ),\n    })\n  }\n\nexport const withDefaultColorScheme =\n  ({\n    colorScheme,\n    components,\n  }: {\n    colorScheme: ComponentDefaultProps[\"colorScheme\"]\n    components?: Union<keyof Theme[\"components\"]>[]\n  }) =>\n  (theme: UsageTheme): UsageTheme => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps: { colorScheme } }]),\n      ),\n    })\n  }\n\nexport const withDefaultProps =\n  ({\n    defaultProps,\n    components,\n  }: {\n    defaultProps: ComponentDefaultProps\n    components?: Union<keyof Theme[\"components\"]>[]\n  }): UsageTheme =>\n  (theme: UsageTheme) => {\n    let keys: string[] = Object.keys(theme.components ?? {})\n\n    if (isArray(components)) keys = components\n\n    return merge(theme, {\n      components: Object.fromEntries(\n        keys.map((key) => [key, { defaultProps }]),\n      ),\n    })\n  }\n"],"names":["withDefaultSize","size","components","theme","keys","isArray","merge","key","withDefaultVariant","variant","withDefaultColorScheme","colorScheme"],"mappings":"k2CAIO,MAAMA,EACX,CAAC,CACC,KAAAC,EACA,WAAAC,CACF,IAICC,GAAkC,CACjC,IAAIC,EAAiB,OAAO,KAAKD,EAAM,YAAc,CAAA,CAAE,EAEvD,OAAIE,EAAQH,CAAU,IAAUE,EAAAF,GAEzBI,EAAMH,EAAO,CAClB,WAAY,OAAO,YACjBC,EAAK,IAAKG,GAAQ,CAACA,EAAK,CAAE,aAAc,CAAE,KAAAN,CAAO,CAAA,CAAC,CAAC,CACrD,CAAA,CACD,CACH,EAEWO,EACX,CAAC,CACC,QAAAC,EACA,WAAAP,CACF,IAICC,GAAkC,CACjC,IAAIC,EAAiB,OAAO,KAAKD,EAAM,YAAc,CAAA,CAAE,EAEvD,OAAIE,EAAQH,CAAU,IAAUE,EAAAF,GAEzBI,EAAMH,EAAO,CAClB,WAAY,OAAO,YACjBC,EAAK,IAAKG,GAAQ,CAACA,EAAK,CAAE,aAAc,CAAE,QAAAE,CAAU,CAAA,CAAC,CAAC,CACxD,CAAA,CACD,CACH,EAEWC,EACX,CAAC,CACC,YAAAC,EACA,WAAAT,CACF,IAICC,GAAkC,CACjC,IAAIC,EAAiB,OAAO,KAAKD,EAAM,YAAc,CAAA,CAAE,EAEvD,OAAIE,EAAQH,CAAU,IAAUE,EAAAF,GAEzBI,EAAMH,EAAO,CAClB,WAAY,OAAO,YACjBC,EAAK,IAAKG,GAAQ,CAACA,EAAK,CAAE,aAAc,CAAE,YAAAI,CAAc,CAAA,CAAC,CAAC,CAC5D,CAAA,CACD,CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}