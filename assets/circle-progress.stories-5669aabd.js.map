{"version":3,"file":"circle-progress.stories-5669aabd.js","sources":["../../packages/components/progress/src/circle-progress.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  HTMLUIProps,\n  CSSUIObject,\n  CSSUIProps,\n  StylesProps,\n} from '@yamada-ui/core'\nimport { useAnimation } from '@yamada-ui/use-animation'\nimport { useToken } from '@yamada-ui/use-token'\nimport { useValue } from '@yamada-ui/use-value'\nimport { cx, valueToPercent } from '@yamada-ui/utils'\n\ntype CircleProgressOptions = {\n  /**\n   * The CSS `box-size` property.\n   *\n   * @default '6rem'\n   */\n  size?: CSSUIProps['boxSize']\n  /**\n   * The CSS `width` property.\n   *\n   * @default '0.625ewm'\n   */\n  thickness?: CSSUIProps['width']\n  /**\n   * The CSS `color` property.\n   *\n   * @default 'primary'\n   */\n  color?: CSSUIProps['color']\n  /**\n   * The CSS `color` property.\n   *\n   * @default 'border'\n   */\n  trackColor?: CSSUIProps['color']\n  /**\n   * The value of the progress.\n   *\n   * @default 0\n   */\n  value?: number\n  /**\n   * The minimum value of the progress.\n   *\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum value of the progress.\n   *\n   * @default 100\n   */\n  max?: number\n  /**\n   * If `true`, the cap of the progress indicator will be rounded.\n   *\n   * @default false\n   */\n  isRounded?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value` prop will be ignored.\n   *\n   * @default false\n   */\n  isAnimation?: boolean\n  /**\n   * The animation speed in seconds.\n   *\n   * @default '[1.4s, 2s]'\n   */\n  speed?: [string | number, string | number]\n}\n\nexport type CircleProgressProps = Omit<HTMLUIProps<'div'>, 'color'> &\n  CircleProgressOptions\n\nexport const CircleProgress = forwardRef<CircleProgressProps, 'div'>(\n  (\n    {\n      className,\n      children,\n      size = '6rem',\n      thickness = '0.625rem',\n      color = 'primary',\n      trackColor = 'border',\n      value = 0,\n      min = 0,\n      max = 100,\n      isAnimation = false,\n      isRounded,\n      speed = ['1.4s', '2s'],\n      ...rest\n    },\n    ref,\n  ) => {\n    size = (useToken('sizes', useValue(size)) ?? size) as string | number\n    thickness = (useToken('sizes', useValue(thickness)) ?? thickness) as\n      | string\n      | number\n\n    const isTransparent = value === 0 && !isAnimation\n    const percent = valueToPercent(value, min, max)\n\n    const interval = !isAnimation ? percent * 2.64 : undefined\n\n    const animation = useAnimation({\n      keyframes: {\n        '0%': {\n          strokeDasharray: '1, 400',\n          strokeDashoffset: '0',\n        },\n        '50%': {\n          strokeDasharray: '400, 400',\n          strokeDashoffset: '-100',\n        },\n        '100%': {\n          strokeDasharray: '400, 400',\n          strokeDashoffset: '-260',\n        },\n      } as Record<string, StylesProps<'unResponsive', 'unColorMode'>>,\n      duration: typeof speed[0] === 'string' ? speed[0] : `${speed[0]}s`,\n      iterationCount: 'infinite',\n      timingFunction: 'linear',\n    })\n\n    const css: CSSUIObject = {\n      display: 'inline-block',\n      position: 'relative',\n      verticalAlign: 'middle',\n      fontSize: size,\n    }\n\n    const props: CircleProps = isAnimation\n      ? {\n          animation,\n        }\n      : {\n          strokeDashoffset: 66,\n          strokeDasharray:\n            interval == null ? undefined : `${interval} ${264 - interval}`,\n          transitionProperty: 'stroke-dasharray, stroke',\n          transitionDuration: '0.6s',\n          transitionTimingFunction: 'ease',\n        }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx('ui-circle-progress', className)}\n        __css={css}\n        {...rest}\n      >\n        <Shape size={size} isAnimation={isAnimation} speed={speed}>\n          <Circle stroke={trackColor} strokeWidth={thickness} />\n          <Circle\n            stroke={color}\n            strokeWidth={thickness}\n            strokeLinecap={isRounded ? 'round' : undefined}\n            opacity={isTransparent ? 0 : undefined}\n            {...props}\n          />\n        </Shape>\n        {children}\n      </ui.div>\n    )\n  },\n)\n\ntype CircleProps = HTMLUIProps<'circle'>\n\nconst Circle = (rest: CircleProps) => (\n  <ui.circle cx={50} cy={50} r={42} fill='transparent' {...rest} />\n)\n\ntype ShapeProps = Omit<HTMLUIProps<'svg'>, 'speed'> &\n  Pick<\n    Required<CircleProgressProps>,\n    'children' | 'size' | 'isAnimation' | 'speed'\n  >\n\nconst Shape = ({ size, isAnimation, speed, ...rest }: ShapeProps) => {\n  const animation = useAnimation({\n    keyframes: {\n      '0%': {\n        transform: 'rotate(0deg)',\n      },\n      '100%': {\n        transform: 'rotate(360deg)',\n      },\n    },\n    duration: typeof speed[1] === 'string' ? speed[1] : `${speed[1]}s`,\n    iterationCount: 'infinite',\n    timingFunction: 'linear',\n  })\n\n  const css: CSSUIObject = {\n    display: 'block',\n    boxSize: size,\n    ...(isAnimation ? { animation } : {}),\n  }\n\n  return <ui.svg viewBox='0 0 100 100' __css={css} {...rest} />\n}\n\nexport const CircleProgressLabel = ui('span', {\n  baseStyle: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '100%',\n    fontSize: '0.25em',\n    textAlign: 'center',\n  },\n})\n"],"names":["CircleProgress","forwardRef","className","children","size","thickness","color","trackColor","value","min","max","isAnimation","isRounded","speed","rest","ref","useToken","useValue","isTransparent","percent","valueToPercent","interval","animation","useAnimation","css","props","jsxs","ui","cx","Shape","jsx","Circle","CircleProgressLabel"],"mappings":"+jBA+EO,MAAMA,EAAiBC,EAC5B,CACE,CACE,UAAAC,EACA,SAAAC,EACA,KAAAC,EAAO,OACP,UAAAC,EAAY,WACZ,MAAAC,EAAQ,UACR,WAAAC,EAAa,SACb,MAAAC,EAAQ,EACR,IAAAC,EAAM,EACN,IAAAC,EAAM,IACN,YAAAC,EAAc,GACd,UAAAC,EACA,MAAAC,EAAQ,CAAC,OAAQ,IAAI,EACrB,GAAGC,GAELC,IACG,CACHX,EAAQY,EAAS,QAASC,EAASb,CAAI,CAAC,GAAKA,EAC7CC,EAAaW,EAAS,QAASC,EAASZ,CAAS,CAAC,GAAKA,EAIjD,MAAAa,EAAgBV,IAAU,GAAK,CAACG,EAChCQ,EAAUC,GAAeZ,EAAOC,EAAKC,CAAG,EAExCW,EAAYV,EAA+B,OAAjBQ,EAAU,KAEpCG,EAAYC,EAAa,CAC7B,UAAW,CACT,KAAM,CACJ,gBAAiB,SACjB,iBAAkB,GACpB,EACA,MAAO,CACL,gBAAiB,WACjB,iBAAkB,MACpB,EACA,OAAQ,CACN,gBAAiB,WACjB,iBAAkB,MACpB,CACF,EACA,SAAU,OAAOV,EAAM,CAAC,GAAM,SAAWA,EAAM,CAAC,EAAI,GAAGA,EAAM,CAAC,CAAC,IAC/D,eAAgB,WAChB,eAAgB,QAAA,CACjB,EAEKW,EAAmB,CACvB,QAAS,eACT,SAAU,WACV,cAAe,SACf,SAAUpB,CAAA,EAGNqB,EAAqBd,EACvB,CACE,UAAAW,CAAA,EAEF,CACE,iBAAkB,GAClB,gBACED,GAAY,KAAO,OAAY,GAAGA,CAAQ,IAAI,IAAMA,CAAQ,GAC9D,mBAAoB,2BACpB,mBAAoB,OACpB,yBAA0B,MAAA,EAI9B,OAAAK,EAACC,EAAG,IAAH,CACC,IAAAZ,EACA,UAAWa,GAAG,qBAAsB1B,CAAS,EAC7C,MAAOsB,EACN,GAAGV,EAEJ,SAAA,CAACY,EAAAG,GAAA,CAAM,KAAAzB,EAAY,YAAAO,EAA0B,MAAAE,EAC3C,SAAA,CAAAiB,EAACC,EAAO,CAAA,OAAQxB,EAAY,YAAaF,EAAW,EACpDyB,EAACC,EAAA,CACC,OAAQzB,EACR,YAAaD,EACb,cAAeO,EAAY,QAAU,OACrC,QAASM,EAAgB,EAAI,OAC5B,GAAGO,CAAA,CACN,CAAA,EACF,EACCtB,CAAA,CAAA,CAAA,CAGP,CACF,EAIM4B,EAAUjB,GACbgB,EAAAH,EAAG,OAAH,CAAU,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,KAAK,cAAe,GAAGb,CAAM,CAAA,EAS3De,GAAQ,CAAC,CAAE,KAAAzB,EAAM,YAAAO,EAAa,MAAAE,EAAO,GAAGC,KAAuB,CACnE,MAAMQ,EAAYC,EAAa,CAC7B,UAAW,CACT,KAAM,CACJ,UAAW,cACb,EACA,OAAQ,CACN,UAAW,gBACb,CACF,EACA,SAAU,OAAOV,EAAM,CAAC,GAAM,SAAWA,EAAM,CAAC,EAAI,GAAGA,EAAM,CAAC,CAAC,IAC/D,eAAgB,WAChB,eAAgB,QAAA,CACjB,EAEKW,EAAmB,CACvB,QAAS,QACT,QAASpB,EACT,GAAIO,EAAc,CAAE,UAAAW,CAAA,EAAc,CAAC,CAAA,EAG9B,OAAAQ,EAACH,EAAG,IAAH,CAAO,QAAQ,cAAc,MAAOH,EAAM,GAAGV,CAAM,CAAA,CAC7D,EAEakB,GAAsBL,EAAG,OAAQ,CAC5C,UAAW,CACT,SAAU,WACV,IAAK,MACL,KAAM,MACN,UAAW,wBACX,MAAO,OACP,SAAU,SACV,UAAW,QACb,CACF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;"}