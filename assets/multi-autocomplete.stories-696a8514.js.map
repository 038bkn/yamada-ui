{"version":3,"file":"multi-autocomplete.stories-696a8514.js","sources":["../../packages/components/autocomplete/src/multi-autocomplete.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n} from '@yamada-ui/core'\nimport { Popover, PopoverTrigger } from '@yamada-ui/popover'\nimport { cx, handlerAll } from '@yamada-ui/utils'\nimport {\n  cloneElement,\n  CSSProperties,\n  FC,\n  MouseEventHandler,\n  ReactElement,\n  useMemo,\n} from 'react'\nimport {\n  AutocompleteClearIcon,\n  AutocompleteIcon,\n  AutocompleteIconProps,\n} from './autocomplete-icon'\nimport { AutocompleteList, AutocompleteListProps } from './autocomplete-list'\nimport {\n  AutocompleteProvider,\n  useAutocomplete,\n  UseAutocompleteProps,\n  AutocompleteDescendantsContextProvider,\n  useAutocompleteContext,\n  useAutocompleteInput,\n} from './use-autocomplete'\nimport { AutocompleteCreate, AutocompleteEmpty } from './'\n\ntype MultiAutocompleteOptions = {\n  /**\n   * The visual separator between each value.\n   *\n   * @default ','\n   */\n  separator?: string\n  /**\n   * The custom display value to use.\n   */\n  component?: FC<{\n    value: string | number\n    displayValue: string\n    index: number\n    onRemove: MouseEventHandler<HTMLElement>\n  }>\n  /**\n   * If `true`, keep the placeholder.\n   *\n   * @default false\n   */\n  keepPlaceholder?: boolean\n  /**\n   * If `true`, display the select clear icon.\n   *\n   * @default true\n   */\n  isClearable?: boolean\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for multi autocomplete container element.\n   */\n  containerProps?: Omit<HTMLUIProps<'div'>, 'children'>\n  /**\n   * Props for multi autocomplete list element.\n   */\n  listProps?: Omit<AutocompleteListProps, 'children'>\n  /**\n   * Props for multi autocomplete input element.\n   */\n  inputProps?: HTMLUIProps<'input'>\n  /**\n   * Props for multi autocomplete icon element.\n   */\n  iconProps?: AutocompleteIconProps\n  /**\n   * Props for multi autocomplete clear icon element.\n   */\n  clearIconProps?: AutocompleteIconProps\n}\n\nexport type MultiAutocompleteProps = ThemeProps<'Select'> &\n  UseAutocompleteProps<string[]> &\n  MultiAutocompleteOptions\n\nexport const MultiAutocomplete = forwardRef<MultiAutocompleteProps, 'div'>(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle('Select', props)\n    let {\n      className,\n      defaultValue = [],\n      component,\n      separator,\n      isClearable = true,\n      color,\n      h,\n      height,\n      minH,\n      minHeight,\n      closeOnSelect = false,\n      keepPlaceholder = false,\n      containerProps,\n      listProps,\n      inputProps,\n      iconProps,\n      clearIconProps,\n      children,\n      ...computedProps\n    } = omitThemeProps(mergedProps)\n\n    const {\n      value,\n      descendants,\n      formControlProps,\n      getPopoverProps,\n      getContainerProps,\n      getFieldProps,\n      createOption,\n      isEmpty,\n      inputValue,\n      computedChildren,\n      onClear,\n      ...rest\n    } = useAutocomplete<string[]>({\n      ...computedProps,\n      defaultValue,\n      closeOnSelect,\n      children,\n    })\n\n    h = h ?? height\n    minH = minH ?? minHeight\n\n    const css: CSSUIObject = {\n      position: 'relative',\n      w: '100%',\n      h: 'fit-content',\n      color,\n      ...styles.container,\n    }\n\n    return (\n      <AutocompleteDescendantsContextProvider value={descendants}>\n        <AutocompleteProvider\n          value={{\n            ...rest,\n            value,\n            formControlProps,\n            inputValue,\n            createOption,\n            isEmpty,\n            styles,\n          }}\n        >\n          <Popover {...getPopoverProps()}>\n            <ui.div\n              className={cx('ui-autocomplete', className)}\n              __css={css}\n              {...getContainerProps(containerProps)}\n            >\n              <MultiAutocompleteField\n                component={component}\n                separator={separator}\n                keepPlaceholder={keepPlaceholder}\n                h={h}\n                minH={minH}\n                inputProps={inputProps}\n                {...getFieldProps({}, ref)}\n              />\n\n              {isClearable && value.length ? (\n                <AutocompleteClearIcon\n                  {...clearIconProps}\n                  onClick={handlerAll(clearIconProps?.onClick, onClear)}\n                  {...formControlProps}\n                />\n              ) : (\n                <AutocompleteIcon {...iconProps} {...formControlProps} />\n              )}\n\n              {!isEmpty ? (\n                <AutocompleteList {...listProps}>\n                  {createOption ? (\n                    <AutocompleteCreate />\n                  ) : (\n                    <AutocompleteEmpty />\n                  )}\n\n                  {children ?? computedChildren}\n                </AutocompleteList>\n              ) : (\n                <AutocompleteList {...listProps}>\n                  {createOption && inputValue ? (\n                    <AutocompleteCreate />\n                  ) : (\n                    <AutocompleteEmpty />\n                  )}\n                </AutocompleteList>\n              )}\n            </ui.div>\n          </Popover>\n        </AutocompleteProvider>\n      </AutocompleteDescendantsContextProvider>\n    )\n  },\n)\n\ntype MultiAutocompleteFieldProps = HTMLUIProps<'div'> &\n  Pick<\n    MultiAutocompleteProps,\n    'component' | 'separator' | 'keepPlaceholder' | 'inputProps'\n  >\n\nconst MultiAutocompleteField = forwardRef<MultiAutocompleteFieldProps, 'div'>(\n  (\n    {\n      className,\n      component,\n      separator = ',',\n      keepPlaceholder,\n      h,\n      minH,\n      placeholder,\n      inputProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const {\n      value,\n      displayValue,\n      inputValue,\n      onChange,\n      isOpen,\n      inputRef,\n      styles,\n    } = useAutocompleteContext()\n\n    const { getInputProps } = useAutocompleteInput()\n\n    const cloneChildren = useMemo(() => {\n      if (!displayValue?.length) return null\n\n      if (component) {\n        return (displayValue as string[]).map((displayValue, index) => {\n          const onRemove: MouseEventHandler<HTMLElement> = (e) => {\n            e.stopPropagation()\n\n            onChange(value[index])\n\n            if (inputRef.current) inputRef.current.focus()\n          }\n\n          const el = component({\n            value: value[index],\n            displayValue,\n            index,\n            onRemove,\n          })\n\n          const style: CSSProperties = {\n            cursor: 'default',\n            marginBlockStart: '0.125rem',\n            marginBlockEnd: '0.125rem',\n            marginInlineEnd: '0.25rem',\n          }\n\n          return el ? cloneElement(el as ReactElement, { style }) : null\n        })\n      } else {\n        return (displayValue as string[]).map((value, index) => {\n          const isLast = displayValue.length === index + 1\n\n          return (\n            <ui.span key={index} display='inline-block' me='0.25rem'>\n              {value}\n              {!isLast || isOpen ? separator : null}\n            </ui.span>\n          )\n        })\n      }\n    }, [displayValue, component, value, onChange, isOpen, inputRef, separator])\n\n    const css: CSSUIObject = {\n      paddingEnd: '2rem',\n      h,\n      minH,\n      display: 'flex',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      ...styles.field,\n      cursor: 'text',\n    }\n\n    return (\n      <PopoverTrigger>\n        <ui.div\n          className={cx('ui-autocomplete-field', className)}\n          __css={css}\n          py={displayValue?.length && component ? '0.125rem' : undefined}\n          {...rest}\n        >\n          {cloneChildren}\n\n          <ui.input\n            className='ui-autocomplete-input'\n            display='inline-block'\n            flex='1'\n            overflow='hidden'\n            marginBlockStart='0.125rem'\n            marginBlockEnd='0.125rem'\n            placeholder={\n              !displayValue || (keepPlaceholder && isOpen)\n                ? placeholder\n                : undefined\n            }\n            {...getInputProps({ ...inputProps, value: inputValue ?? '' }, ref)}\n          />\n        </ui.div>\n      </PopoverTrigger>\n    )\n  },\n)\n"],"names":["MultiAutocomplete","forwardRef","props","ref","styles","mergedProps","useMultiComponentStyle","className","defaultValue","component","separator","isClearable","color","h","height","minH","minHeight","closeOnSelect","keepPlaceholder","containerProps","listProps","inputProps","iconProps","clearIconProps","children","computedProps","omitThemeProps","value","descendants","formControlProps","getPopoverProps","getContainerProps","getFieldProps","createOption","isEmpty","inputValue","computedChildren","onClear","rest","useAutocomplete","css","jsx","AutocompleteDescendantsContextProvider","AutocompleteProvider","Popover","jsxs","ui","cx","MultiAutocompleteField","AutocompleteClearIcon","handlerAll","AutocompleteIcon","AutocompleteList","AutocompleteCreate","AutocompleteEmpty","placeholder","displayValue","onChange","isOpen","inputRef","useAutocompleteContext","getInputProps","useAutocompleteInput","cloneChildren","useMemo","index","onRemove","e","el","style","cloneElement","isLast","PopoverTrigger"],"mappings":"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}