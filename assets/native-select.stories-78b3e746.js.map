{"version":3,"file":"native-select.stories-78b3e746.js","sources":["../../packages/components/native-select/src/native-select.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n  layoutStylesProperties,\n} from '@yamada-ui/core'\nimport {\n  FormControlOptions,\n  useFormControlProps,\n  formControlProperties,\n} from '@yamada-ui/form-control'\nimport { ChevronIcon } from '@yamada-ui/icon'\nimport {\n  createContext,\n  cx,\n  splitObject,\n  getValidChildren,\n  isValidElement,\n  isArray,\n  pickObject,\n} from '@yamada-ui/utils'\nimport {\n  cloneElement,\n  DetailedHTMLProps,\n  FC,\n  OptionHTMLAttributes,\n  ReactElement,\n} from 'react'\n\ntype Value = DetailedHTMLProps<\n  OptionHTMLAttributes<HTMLOptionElement>,\n  HTMLOptionElement\n>['value']\n\nexport type UINativeOption = Omit<\n  DetailedHTMLProps<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>,\n  'label' | 'children' | 'value'\n> & { label?: string; value?: Value | UINativeOption[] }\n\ntype NativeSelectContext = Record<string, CSSUIObject>\n\nconst [NativeSelectProvider, useNativeSelect] =\n  createContext<NativeSelectContext>({\n    name: 'NativeSelectContext',\n    errorMessage: `useNativeSelect returned is 'undefined'. Seems you forgot to wrap the components in \"<NativeSelect />\"`,\n  })\n\ntype NativeSelectOptions = {\n  /**\n   * If provided, generate options based on data.\n   *\n   * @default '[]'\n   */\n  options?: UINativeOption[]\n  /**\n   * The placeholder for select.\n   */\n  placeholder?: string\n  /**\n   * If `true`, include placeholders in options.\n   *\n   * @default true\n   */\n  placeholderInOptions?: boolean\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for container element.\n   */\n  containerProps?: Omit<HTMLUIProps<'div'>, 'children'>\n  /**\n   * Props for icon element.\n   */\n  iconProps?: HTMLUIProps<'div'>\n}\n\nexport type NativeSelectProps = Omit<HTMLUIProps<'select'>, 'size'> &\n  ThemeProps<'Select'> &\n  NativeSelectOptions &\n  FormControlOptions\n\nexport const NativeSelect = forwardRef<NativeSelectProps, 'select'>(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle('Select', props)\n    let {\n      className,\n      children,\n      placeholderInOptions = true,\n      color,\n      h,\n      height,\n      minH,\n      minHeight,\n      options = [],\n      value,\n      placeholder,\n      containerProps,\n      iconProps,\n      ...rest\n    } = omitThemeProps(mergedProps)\n\n    rest = useFormControlProps(rest)\n\n    const formControlProps = pickObject(rest, formControlProperties)\n    const [layoutProps, selectPorps] = splitObject(rest, layoutStylesProperties)\n\n    let computedChildren: ReactElement[] = []\n\n    if (!children && options.length) {\n      computedChildren = options.map(({ label, value, ...props }, i) => {\n        if (!isArray(value)) {\n          return (\n            <NativeOption key={i} value={value} {...props}>\n              {label}\n            </NativeOption>\n          )\n        } else {\n          return (\n            <NativeOptionGroup key={i} label={label} {...props}>\n              {value.map(({ label, value, ...props }, i) =>\n                !isArray(value) ? (\n                  <NativeOption key={i} value={value} {...props}>\n                    {label}\n                  </NativeOption>\n                ) : null,\n              )}\n            </NativeOptionGroup>\n          )\n        }\n      })\n    }\n\n    return (\n      <NativeSelectProvider value={styles}>\n        <ui.div\n          className='ui-native-select'\n          __css={{\n            position: 'relative',\n            w: '100%',\n            h: 'fit-content',\n            color,\n            ...styles.container,\n          }}\n          {...layoutProps}\n          {...containerProps}\n          {...formControlProps}\n        >\n          <ui.select\n            ref={ref}\n            className={cx('ui-native-select-field', className)}\n            value={value}\n            __css={{\n              paddingEnd: '2rem',\n              h: h ?? height,\n              minH: minH ?? minHeight,\n              ...styles.field,\n            }}\n            {...selectPorps}\n          >\n            {placeholder ? (\n              <NativeOption value='' hidden={!placeholderInOptions}>\n                {placeholder}\n              </NativeOption>\n            ) : null}\n            {children ?? computedChildren}\n          </ui.select>\n\n          <NativeSelectIcon {...iconProps} {...formControlProps} />\n        </ui.div>\n      </NativeSelectProvider>\n    )\n  },\n)\n\ntype NativeSelectIconProps = HTMLUIProps<'div'>\n\nconst NativeSelectIcon: FC<NativeSelectIconProps> = ({\n  className,\n  children,\n  ...rest\n}) => {\n  const styles = useNativeSelect()\n\n  const css: CSSUIObject = {\n    position: 'absolute',\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    pointerEvents: 'none',\n    top: '50%',\n    transform: 'translateY(-50%)',\n    ...styles.icon,\n  }\n\n  const validChildren = getValidChildren(children)\n\n  const cloneChildren = validChildren.map((child) =>\n    cloneElement(child, {\n      focusable: false,\n      'aria-hidden': true,\n      style: {\n        width: '1em',\n        height: '1em',\n        color: 'currentColor',\n      },\n    }),\n  )\n\n  return (\n    <ui.div\n      className={cx('ui-native-select-icon', className)}\n      __css={css}\n      {...rest}\n    >\n      {isValidElement(children) ? cloneChildren : <ChevronIcon />}\n    </ui.div>\n  )\n}\n\nexport type NativeOptionGroupProps = HTMLUIProps<'optgroup'>\n\nexport const NativeOptionGroup = forwardRef<NativeOptionGroupProps, 'optgroup'>(\n  (props, ref) => <ui.optgroup ref={ref} {...props} />,\n)\n\nexport type NativeOptionProps = Omit<HTMLUIProps<'option'>, 'children'> & {\n  children?: string\n}\n\nexport const NativeOption = forwardRef<NativeOptionProps, 'option'>(\n  (props, ref) => <ui.option ref={ref} {...props} />,\n)\n"],"names":["NativeSelectProvider","useNativeSelect","createContext","NativeSelect","forwardRef","props","ref","styles","mergedProps","useMultiComponentStyle","className","children","placeholderInOptions","color","h","height","minH","minHeight","options","value","placeholder","containerProps","iconProps","rest","omitThemeProps","useFormControlProps","formControlProps","pickObject","formControlProperties","layoutProps","selectPorps","splitObject","layoutStylesProperties","computedChildren","label","i","isArray","NativeOptionGroup","jsx","NativeOption","jsxs","ui","cx","NativeSelectIcon","css","cloneChildren","getValidChildren","child","cloneElement","isValidElement","ChevronIcon"],"mappings":"k4BA6CA,KAAM,CAACA,GAAsBC,EAAe,EAC1CC,GAAmC,CACjC,KAAM,sBACN,aAAc,wGAChB,CAAC,EA0CUC,EAAeC,EAC1B,CAACC,EAAOC,IAAQ,CACd,KAAM,CAACC,EAAQC,CAAW,EAAIC,GAAuB,SAAUJ,CAAK,EAChE,GAAA,CACF,UAAAK,EACA,SAAAC,EACA,qBAAAC,EAAuB,GACvB,MAAAC,EACA,EAAAC,GACA,OAAAC,GACA,KAAAC,GACA,UAAAC,GACA,QAAAC,EAAU,CAAC,EACX,MAAAC,GACA,YAAAC,EACA,eAAAC,GACA,UAAAC,GACA,GAAGC,CAAA,EACDC,GAAehB,CAAW,EAE9Be,EAAOE,GAAoBF,CAAI,EAEzB,MAAAG,EAAmBC,GAAWJ,EAAMK,EAAqB,EACzD,CAACC,GAAaC,EAAW,EAAIC,GAAYR,EAAMS,EAAsB,EAE3E,IAAIC,EAAmC,CAAA,EAEnC,MAAA,CAACtB,GAAYO,EAAQ,SACJe,EAAAf,EAAQ,IAAI,CAAC,CAAE,MAAAgB,EAAO,MAAAf,EAAO,GAAGd,CAAM,EAAG8B,IACrDC,EAAQjB,CAAK,IAQbkB,EAA0B,CAAA,MAAAH,EAAe,GAAG7B,EAC1C,SAAAc,EAAM,IAAI,CAAC,CAAE,MAAAe,GAAO,MAAAf,EAAO,GAAGd,IAAS8B,KACrCC,EAAQjB,CAAK,EAIV,KAHDmB,EAAAC,EAAA,CAAqB,MAAOpB,EAAQ,GAAGd,GACrC,SAAA6B,EADgBC,EAAAA,EAEnB,CACE,GANgBA,CAQxB,IAdCI,EAAqB,CAAA,MAAOpB,EAAQ,GAAGd,EACrC,YADgB8B,CAEnB,CAeL,GAIDG,EAACtC,GAAqB,CAAA,MAAOO,EAC3B,SAAAiC,EAACC,EAAG,IAAH,CACC,UAAU,mBACV,MAAO,CACL,SAAU,WACV,EAAG,OACH,EAAG,cACH,MAAA5B,EACA,GAAGN,EAAO,SACZ,EACC,GAAGsB,GACH,GAAGR,GACH,GAAGK,EAEJ,SAAA,CAAAc,EAACC,EAAG,OAAH,CACC,IAAAnC,EACA,UAAWoC,GAAG,yBAA0BhC,CAAS,EACjD,MAAAS,GACA,MAAO,CACL,WAAY,OACZ,EAAGL,IAAKC,GACR,KAAMC,IAAQC,GACd,GAAGV,EAAO,KACZ,EACC,GAAGuB,GAEH,SAAA,CACCV,EAAAkB,EAACC,GAAa,MAAM,GAAG,OAAQ,CAAC3B,EAC7B,WACH,EACE,KACHD,GAAYsB,CAAA,CAAA,CACf,EAECK,EAAAK,GAAA,CAAkB,GAAGrB,GAAY,GAAGI,CAAkB,CAAA,CAAA,CAAA,CAE3D,CAAA,CAAA,CAEJ,CACF,EAIMiB,GAA8C,CAAC,CACnD,UAAAjC,EACA,SAAAC,EACA,GAAGY,CACL,IAAM,CAGJ,MAAMqB,EAAmB,CACvB,SAAU,WACV,QAAS,cACT,WAAY,SACZ,eAAgB,SAChB,cAAe,OACf,IAAK,MACL,UAAW,mBACX,GAVa3C,KAUH,IAAA,EAKN4C,EAFgBC,GAAiBnC,CAAQ,EAEX,IAAKoC,GACvCC,GAAA,aAAaD,EAAO,CAClB,UAAW,GACX,cAAe,GACf,MAAO,CACL,MAAO,MACP,OAAQ,MACR,MAAO,cACT,CAAA,CACD,CAAA,EAID,OAAAT,EAACG,EAAG,IAAH,CACC,UAAWC,GAAG,wBAAyBhC,CAAS,EAChD,MAAOkC,EACN,GAAGrB,EAEH,SAAe0B,GAAAtC,CAAQ,EAAIkC,IAAiBK,GAAY,EAAA,CAAA,CAAA,CAG/D,EAIab,EAAoBjC,EAC/B,CAACC,EAAOC,IAAQgC,EAACG,EAAG,SAAH,CAAY,IAAAnC,EAAW,GAAGD,EAAO,CACpD,EAMakC,EAAenC,EAC1B,CAACC,EAAOC,IAAQgC,EAACG,EAAG,OAAH,CAAU,IAAAnC,EAAW,GAAGD,EAAO,CAClD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}