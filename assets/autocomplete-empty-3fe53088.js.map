{"version":3,"file":"autocomplete-empty-3fe53088.js","sources":["../../packages/components/autocomplete/src/use-autocomplete.tsx","../../packages/components/autocomplete/src/autocomplete-icon.tsx","../../packages/components/autocomplete/src/autocomplete-list.tsx","../../packages/components/autocomplete/src/autocomplete-option-group.tsx","../../packages/components/autocomplete/src/autocomplete-option.tsx","../../packages/components/autocomplete/src/autocomplete-create.tsx","../../packages/components/autocomplete/src/autocomplete-empty.tsx"],"sourcesContent":["import {\n  CSSUIObject,\n  HTMLUIProps,\n  layoutStylesProperties,\n} from '@yamada-ui/core'\nimport {\n  FormControlOptions,\n  formControlProperties,\n  useFormControlProps,\n} from '@yamada-ui/form-control'\nimport { PopoverProps } from '@yamada-ui/popover'\nimport { UIOption } from '@yamada-ui/select'\nimport { useControllableState } from '@yamada-ui/use-controllable-state'\nimport { createDescendant } from '@yamada-ui/use-descendant'\nimport { useOutsideClick } from '@yamada-ui/use-outside-click'\nimport {\n  ariaAttr,\n  createContext,\n  dataAttr,\n  Dict,\n  funcAll,\n  getEventRelatedTarget,\n  handlerAll,\n  isArray,\n  isContains,\n  isHTMLElement,\n  mergeRefs,\n  omitObject,\n  pickObject,\n  PropGetter,\n  splitObject,\n  useUnmountEffect,\n  useUpdateEffect,\n  Union,\n  getValidChildren,\n  isUndefined,\n  DOMAttributes,\n} from '@yamada-ui/utils'\nimport {\n  ChangeEvent,\n  CSSProperties,\n  Dispatch,\n  FocusEvent,\n  KeyboardEvent,\n  MouseEvent,\n  RefObject,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  AutocompleteOption,\n  AutocompleteOptionProps,\n  AutocompleteOptionGroup,\n} from './'\n\nconst kanaMap: Record<string, string> = {\n  ｶﾞ: 'ガ',\n  ｷﾞ: 'ギ',\n  ｸﾞ: 'グ',\n  ｹﾞ: 'ゲ',\n  ｺﾞ: 'ゴ',\n  ｻﾞ: 'ザ',\n  ｼﾞ: 'ジ',\n  ｽﾞ: 'ズ',\n  ｾﾞ: 'ゼ',\n  ｿﾞ: 'ゾ',\n  ﾀﾞ: 'ダ',\n  ﾁﾞ: 'ヂ',\n  ﾂﾞ: 'ヅ',\n  ﾃﾞ: 'デ',\n  ﾄﾞ: 'ド',\n  ﾊﾞ: 'バ',\n  ﾋﾞ: 'ビ',\n  ﾌﾞ: 'ブ',\n  ﾍﾞ: 'ベ',\n  ﾎﾞ: 'ボ',\n  ﾊﾟ: 'パ',\n  ﾋﾟ: 'ピ',\n  ﾌﾟ: 'プ',\n  ﾍﾟ: 'ペ',\n  ﾎﾟ: 'ポ',\n  ｳﾞ: 'ヴ',\n  ﾜﾞ: 'ヷ',\n  ｦﾞ: 'ヺ',\n  ｱ: 'ア',\n  ｲ: 'イ',\n  ｳ: 'ウ',\n  ｴ: 'エ',\n  ｵ: 'オ',\n  ｶ: 'カ',\n  ｷ: 'キ',\n  ｸ: 'ク',\n  ｹ: 'ケ',\n  ｺ: 'コ',\n  ｻ: 'サ',\n  ｼ: 'シ',\n  ｽ: 'ス',\n  ｾ: 'セ',\n  ｿ: 'ソ',\n  ﾀ: 'タ',\n  ﾁ: 'チ',\n  ﾂ: 'ツ',\n  ﾃ: 'テ',\n  ﾄ: 'ト',\n  ﾅ: 'ナ',\n  ﾆ: 'ニ',\n  ﾇ: 'ヌ',\n  ﾈ: 'ネ',\n  ﾉ: 'ノ',\n  ﾊ: 'ハ',\n  ﾋ: 'ヒ',\n  ﾌ: 'フ',\n  ﾍ: 'ヘ',\n  ﾎ: 'ホ',\n  ﾏ: 'マ',\n  ﾐ: 'ミ',\n  ﾑ: 'ム',\n  ﾒ: 'メ',\n  ﾓ: 'モ',\n  ﾔ: 'ヤ',\n  ﾕ: 'ユ',\n  ﾖ: 'ヨ',\n  ﾗ: 'ラ',\n  ﾘ: 'リ',\n  ﾙ: 'ル',\n  ﾚ: 'レ',\n  ﾛ: 'ロ',\n  ﾜ: 'ワ',\n  ｦ: 'ヲ',\n  ﾝ: 'ン',\n  ｧ: 'ァ',\n  ｨ: 'ィ',\n  ｩ: 'ゥ',\n  ｪ: 'ェ',\n  ｫ: 'ォ',\n  ｯ: 'ッ',\n  ｬ: 'ャ',\n  ｭ: 'ュ',\n  ｮ: 'ョ',\n  '｡': '。',\n  '､': '、',\n  ｰ: 'ー',\n  '｢': '「',\n  '｣': '」',\n  '･': '・',\n}\n\nconst defaultFormat = (value: string) => {\n  value = value.replace(/[！-～]/g, (v) =>\n    String.fromCharCode(v.charCodeAt(0) - 0xfee0),\n  )\n\n  const reg = new RegExp('(' + Object.keys(kanaMap).join('|') + ')', 'g')\n\n  value = value\n    .replace(reg, (v) => kanaMap[v])\n    .replace(/ﾞ/g, '゛')\n    .replace(/ﾟ/g, '゜')\n\n  value = value.toUpperCase()\n\n  return value\n}\n\nconst flattenOptions = (options: UIOption[]): UIOption[] => {\n  const filterOptions = (options: UIOption[]): (UIOption | UIOption[])[] =>\n    options\n      .map((options) => {\n        const { value, isDisabled, isFocusable } = options\n        const trulyDisabled = !!isDisabled && !isFocusable\n        const isMulti = isArray(value)\n\n        if (trulyDisabled) return\n\n        if (!isMulti) {\n          return options\n        } else {\n          return filterOptions(value)\n        }\n      })\n      .filter(Boolean) as (UIOption | UIOption[])[]\n\n  return filterOptions(options).flat(Infinity) as UIOption[]\n}\n\nconst isTargetOption = (target: EventTarget | null): boolean =>\n  isHTMLElement(target) &&\n  !!target?.getAttribute('role')?.startsWith('autocomplete-item')\n\nexport const {\n  DescendantsContextProvider: AutocompleteDescendantsContextProvider,\n  useDescendantsContext: useAutocompleteDescendantsContext,\n  useDescendants: useAutocompleteDescendants,\n  useDescendant: useAutocompleteDescendant,\n} = createDescendant<HTMLElement>()\n\ntype AutocompleteContext = Omit<\n  UseAutocompleteProps,\n  'value' | 'defaultValue' | 'onChange' | 'onCreate'\n> & {\n  value: string | string[]\n  displayValue: string | string[] | undefined\n  inputValue: string\n  isHit: boolean\n  isEmpty: boolean\n  isAllSelected: boolean\n  onChange: (newValue: string) => void\n  onChangeDisplayValue: (newValue: string, runOmit?: boolean) => void\n  pickOptions: (value: string) => void\n  rebirthOptions: (runFocus?: boolean) => void\n  inputProps: DOMAttributes\n  isOpen: boolean\n  onOpen: () => void\n  onClose: () => void\n  onCreate: () => void\n  onFocusFirst: () => void\n  onFocusLast: () => void\n  onFocusNext: (index?: number) => void\n  onFocusPrev: (index?: number) => void\n  focusedIndex: number\n  setFocusedIndex: Dispatch<SetStateAction<number>>\n  listRef: RefObject<HTMLUListElement>\n  inputRef: RefObject<HTMLInputElement>\n  formControlProps: Record<string, any>\n  styles: Record<string, CSSUIObject>\n}\n\nexport const [AutocompleteProvider, useAutocompleteContext] =\n  createContext<AutocompleteContext>({\n    name: 'AutocompleteContext',\n    errorMessage: `useAutocompleteContext returned is 'undefined'. Seems you forgot to wrap the components in \"<Autocomplete />\" or \"<MultiAutocomplete />\"`,\n  })\n\ntype UseAutocompleteBaseProps<T extends string | string[] = string> = Omit<\n  PopoverProps,\n  | 'initialFocusRef'\n  | 'closeOnButton'\n  | 'isOpen'\n  | 'trigger'\n  | 'autoFocus'\n  | 'restoreFocus'\n  | 'openDelay'\n  | 'closeDelay'\n> &\n  FormControlOptions & {\n    /**\n     * The value of the autocomplete.\n     */\n    value?: T\n    /**\n     * The initial value of the autocomplete.\n     */\n    defaultValue?: T\n    /**\n     * The callback invoked when value state changes.\n     */\n    onChange?: (value: T) => void\n    /**\n     * The callback invoked when search input.\n     */\n    onSearch?: (ev: ChangeEvent<HTMLInputElement>) => void\n    /**\n     * The callback invoked when autocomlete option created.\n     */\n    onCreate?: (newOption: UIOption, newOptions: UIOption[]) => void\n    /**\n     * Function to format text when search input.\n     */\n    format?: (value: string) => string\n    /**\n     * The position to be inserted when the autocomplete option is created.\n     *\n     * @default 'first'\n     */\n    insertPositionOnCreate?:\n      | Union<'first' | 'last'>\n      | [string, 'first' | 'last']\n    /**\n     * If `true`, the list element will be closed when value is selected.\n     *\n     * @default true\n     */\n    closeOnSelect?: boolean\n    /**\n     * The message displayed when the search yields no hits.\n     *\n     * @default 'No results found'\n     */\n    emptyMessage?: string\n    /**\n     * If `true`, enables the creation of autocomplete options.\n     *\n     * @default false\n     */\n    createOption?: boolean\n    /**\n     * If `true`, the selected item(s) will be excluded from the list.\n     *\n     * @default false\n     */\n    omitSelectedValues?: boolean\n    /**\n     * The maximum selectable value.\n     */\n    maxSelectedValues?: number\n    /**\n     * Props for select option element.\n     */\n    optionProps?: Omit<AutocompleteOptionProps, 'value' | 'children'>\n    /**\n     * If provided, generate options based on data.\n     */\n    options?: UIOption[]\n  }\n\nexport type UseAutocompleteProps<T extends string | string[] = string> = Omit<\n  HTMLUIProps<'input'>,\n  | keyof UseAutocompleteBaseProps\n  | 'list'\n  | 'disabled'\n  | 'required'\n  | 'readOnly'\n  | 'size'\n> &\n  UseAutocompleteBaseProps<T>\n\nexport const useAutocomplete = <T extends string | string[] = string>({\n  defaultIsOpen,\n  closeOnSelect = true,\n  omitSelectedValues = false,\n  maxSelectedValues,\n  closeOnBlur = true,\n  closeOnEsc = true,\n  createOption = false,\n  insertPositionOnCreate = 'first',\n  emptyMessage = 'No results found',\n  format = defaultFormat,\n  placement = 'bottom-start',\n  duration = 0.2,\n  optionProps,\n  placeholder,\n  children,\n  ...rest\n}: UseAutocompleteProps<T>) => {\n  rest = useFormControlProps(rest)\n\n  const { id } = rest\n\n  const formControlProps = pickObject(rest, formControlProperties)\n  const [containerProps, inputProps] = splitObject(\n    omitObject(rest as Dict, [\n      'id',\n      'value',\n      'defaultValue',\n      'onChange',\n      'month',\n      'onChangeMonth',\n    ]),\n    layoutStylesProperties,\n  )\n\n  const descendants = useAutocompleteDescendants()\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  const listRef = useRef<HTMLUListElement>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n  const isComposition = useRef<boolean>(false)\n\n  const [options, setOptions] = useState<UIOption[] | undefined>(rest.options)\n  const [value, setValue] = useControllableState({\n    value: rest.value,\n    defaultValue: rest.defaultValue,\n    onChange: rest.onChange,\n  })\n  const [displayValue, setDisplayValue] = useState<T | undefined>(undefined)\n  const [inputValue, setInputValue] = useState<string>('')\n  const [focusedIndex, setFocusedIndex] = useState<number>(-1)\n  const [isAllSelected, setIsAllSelected] = useState<boolean>(false)\n  const [isHit, setIsHit] = useState<boolean>(true)\n\n  const [isOpen, setIsOpen] = useState<boolean>(defaultIsOpen ?? false)\n\n  const isFocused = focusedIndex > -1\n  const isCreate = focusedIndex === -2 && createOption\n  const isMulti = isArray(value)\n  const isEmptyValue = !isMulti ? !value : !value.length\n\n  const [firstInsertPositionOnCreate, secondInsertPositionOnCreate] =\n    useMemo(() => {\n      if (isArray(insertPositionOnCreate)) {\n        return insertPositionOnCreate\n      } else {\n        return [insertPositionOnCreate, 'first']\n      }\n    }, [insertPositionOnCreate])\n\n  if (createOption && !isUndefined(children)) {\n    console.warn(\n      `${!isMulti ? 'Autocomplete' : 'MultiAutocomplete'}: ${\n        !isMulti ? 'Autocomplete' : 'MultiAutocomplete'\n      } internally prefers 'children'. If 'createOption' is true, it will not be reflected correctly. If want to reflect, please set 'options' in props.`,\n    )\n  }\n\n  const selectedValues = descendants.enabledValues(\n    ({ node }) => isMulti && value.includes(node.dataset.value ?? ''),\n  )\n  const selectedIndexes = selectedValues.map(({ index }) => index)\n  const enabledValues = descendants.enabledValues(\n    ({ node, index }) =>\n      'target' in node.dataset && !selectedIndexes.includes(index),\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const computedChildren = options?.map(({ label, value, ...props }, i) => {\n    if (!isArray(value)) {\n      return (\n        <AutocompleteOption key={i} value={value} {...props}>\n          {label}\n        </AutocompleteOption>\n      )\n    } else {\n      return (\n        <AutocompleteOptionGroup\n          key={i}\n          label={label as string}\n          {...(props as HTMLUIProps<'ul'>)}\n        >\n          {value.map(({ label, value, ...props }, i) =>\n            !isArray(value) ? (\n              <AutocompleteOption key={i} value={value} {...props}>\n                {label}\n              </AutocompleteOption>\n            ) : null,\n          )}\n        </AutocompleteOptionGroup>\n      )\n    }\n  })\n\n  const isEmpty = !validChildren.length && !computedChildren?.length\n\n  const onOpen = useCallback(() => {\n    if (formControlProps.disabled || formControlProps.readOnly) return\n\n    if (!createOption && (isEmpty || isAllSelected)) return\n\n    setIsOpen(true)\n\n    if (inputRef.current) inputRef.current.focus()\n\n    rest.onOpen?.()\n  }, [createOption, formControlProps, isAllSelected, isEmpty, rest])\n\n  const onClose = useCallback(() => {\n    setIsOpen(false)\n\n    rest.onClose?.()\n  }, [rest])\n\n  const onFocusFirst = useCallback(() => {\n    const id = setTimeout(() => {\n      if (isEmpty || isAllSelected) return\n\n      const first = descendants.enabledfirstValue(\n        ({ node }) => 'target' in node.dataset,\n      )\n\n      if (!first) return\n\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(first.index)\n      } else {\n        if (selectedIndexes.includes(first.index)) {\n          const enabledFirst = enabledValues[0]\n\n          setFocusedIndex(enabledFirst.index)\n        } else {\n          setFocusedIndex(first.index)\n        }\n      }\n    })\n\n    timeoutIds.current.add(id)\n  }, [\n    descendants,\n    enabledValues,\n    isAllSelected,\n    isEmpty,\n    isMulti,\n    omitSelectedValues,\n    selectedIndexes,\n  ])\n\n  const onFocusLast = useCallback(() => {\n    const id = setTimeout(() => {\n      if (isEmpty || isAllSelected) return\n\n      const last = descendants.enabledlastValue(\n        ({ node }) => 'target' in node.dataset,\n      )\n\n      if (!last) return\n\n      if (!isMulti || !omitSelectedValues) {\n        setFocusedIndex(last.index)\n      } else {\n        if (selectedIndexes.includes(last.index)) {\n          const enabledlast = enabledValues.reverse()[0]\n\n          setFocusedIndex(enabledlast.index)\n        } else {\n          setFocusedIndex(last.index)\n        }\n      }\n    })\n\n    timeoutIds.current.add(id)\n  }, [\n    descendants,\n    enabledValues,\n    isAllSelected,\n    isEmpty,\n    isMulti,\n    omitSelectedValues,\n    selectedIndexes,\n  ])\n\n  const onFocusSelected = useCallback(() => {\n    const id = setTimeout(() => {\n      const values = descendants.enabledValues()\n\n      const selected = values.find(({ node }) =>\n        !isMulti\n          ? node.dataset.value === value\n          : value.includes(node.dataset.value ?? ''),\n      )\n\n      if (selected) setFocusedIndex(selected.index)\n    })\n\n    timeoutIds.current.add(id)\n  }, [descendants, isMulti, value])\n\n  const onFocusNext = useCallback(\n    (index: number = focusedIndex) => {\n      const id = setTimeout(() => {\n        const next = descendants.enabledNextValue(\n          index,\n          ({ node }) => 'target' in node.dataset,\n        )\n\n        if (!next) return\n\n        if (!isMulti || !omitSelectedValues) {\n          setFocusedIndex(next.index)\n        } else {\n          if (selectedIndexes.includes(next.index)) {\n            const enabledNext =\n              enabledValues.find(({ index }) => next.index < index) ??\n              enabledValues[0]\n\n            setFocusedIndex(enabledNext.index)\n          } else {\n            setFocusedIndex(next.index)\n          }\n        }\n      })\n\n      timeoutIds.current.add(id)\n    },\n    [\n      descendants,\n      enabledValues,\n      focusedIndex,\n      isMulti,\n      omitSelectedValues,\n      selectedIndexes,\n    ],\n  )\n\n  const onFocusPrev = useCallback(\n    (index: number = focusedIndex) => {\n      const id = setTimeout(() => {\n        const prev = descendants.enabledPrevValue(\n          index,\n          ({ node }) => 'target' in node.dataset,\n        )\n\n        if (!prev) return\n\n        if (!isMulti || !omitSelectedValues) {\n          setFocusedIndex(prev.index)\n        } else {\n          if (selectedIndexes.includes(prev.index)) {\n            const enabledPrev =\n              enabledValues.reverse().find(({ index }) => index < prev.index) ??\n              enabledValues[0]\n\n            setFocusedIndex(enabledPrev.index)\n          } else {\n            setFocusedIndex(prev.index)\n          }\n        }\n      })\n\n      timeoutIds.current.add(id)\n    },\n    [\n      descendants,\n      enabledValues,\n      focusedIndex,\n      isMulti,\n      omitSelectedValues,\n      selectedIndexes,\n    ],\n  )\n\n  const onFocusFirstOrSelected =\n    isEmptyValue || omitSelectedValues ? onFocusFirst : onFocusSelected\n  const onFocusLastOrSelected =\n    isEmptyValue || omitSelectedValues ? onFocusLast : onFocusSelected\n\n  const pickOptions = useCallback(\n    (value: string) => {\n      const values = descendants.values()\n\n      let isHit = false\n      let isFocused = false\n\n      values.forEach(({ node, index }) => {\n        if (format(node.textContent ?? '').includes(value)) {\n          isHit = true\n\n          const isDisabled = 'disabled' in node.dataset\n\n          node.dataset.target = ''\n\n          if (!isFocused && !isDisabled) {\n            isFocused = true\n            setFocusedIndex(index)\n          }\n        } else {\n          delete node.dataset.target\n        }\n      })\n\n      setIsHit(isHit)\n    },\n    [descendants, format],\n  )\n\n  const rebirthOptions = useCallback(\n    (runFocus = true) => {\n      const values = descendants.values()\n\n      values.forEach(({ node }) => {\n        node.dataset.target = ''\n      })\n\n      if (runFocus) onFocusFirst()\n\n      setIsHit(true)\n    },\n    [descendants, onFocusFirst],\n  )\n\n  const onChangeDisplayValue = useCallback(\n    (newValue: string, runOmit: boolean = true) => {\n      const enabledValues = descendants.enabledValues()\n      const selectedValues = enabledValues\n        .filter(({ node }) => node.dataset.value === newValue)\n        .map(({ node }) => node.textContent ?? '')\n\n      setDisplayValue((prev) => {\n        if (!isMulti) {\n          return selectedValues[0] as T\n        } else {\n          selectedValues.forEach((selectedValue) => {\n            const isSelected =\n              isArray(prev) && prev.includes(selectedValue ?? '')\n\n            if (!isSelected) {\n              prev = [...(isArray(prev) ? prev : []), selectedValue] as T\n            } else if (runOmit) {\n              prev = (\n                isArray(prev)\n                  ? prev.filter((value) => value !== selectedValue)\n                  : undefined\n              ) as T\n            }\n          })\n\n          return prev\n        }\n      })\n    },\n    [descendants, isMulti],\n  )\n\n  const onChange = useCallback(\n    (newValue: string) => {\n      setValue((prev) => {\n        if (!isArray(prev)) {\n          return newValue as T\n        } else {\n          const isSelected = prev.includes(newValue)\n\n          if (!isSelected) {\n            return [...prev, newValue] as T\n          } else {\n            return prev.filter((value) => value !== newValue) as T\n          }\n        }\n      })\n\n      onChangeDisplayValue(newValue)\n\n      setInputValue('')\n      rebirthOptions(false)\n    },\n    [onChangeDisplayValue, rebirthOptions, setValue],\n  )\n\n  const onSelect = useCallback(() => {\n    let enabledValue = descendants.value(focusedIndex)\n\n    if ('disabled' in (enabledValue?.node.dataset ?? {}))\n      enabledValue = undefined\n\n    if (!enabledValue) return\n\n    const value = enabledValue.node.dataset.value ?? ''\n\n    onChange(value)\n\n    if (closeOnSelect) onClose()\n\n    if (omitSelectedValues) onFocusNext()\n  }, [\n    closeOnSelect,\n    descendants,\n    focusedIndex,\n    omitSelectedValues,\n    onChange,\n    onClose,\n    onFocusNext,\n  ])\n\n  const onSearch = useCallback(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if (!isOpen) onOpen()\n\n      rest.onSearch?.(ev)\n\n      const value = ev.target.value\n      const computedValue = format(value)\n\n      if (computedValue) {\n        pickOptions(computedValue)\n      } else {\n        rebirthOptions()\n      }\n\n      setInputValue(value)\n    },\n    [isOpen, onOpen, format, rest, pickOptions, rebirthOptions],\n  )\n\n  const onCompositionStart = useCallback(() => {\n    isComposition.current = true\n  }, [])\n\n  const onCompositionEnd = useCallback(() => {\n    isComposition.current = false\n  }, [])\n\n  const onCreate = useCallback(() => {\n    if (!listRef.current) return\n\n    const newOption: UIOption = { label: inputValue, value: inputValue }\n\n    let newOptions: UIOption[] = []\n\n    if (options) newOptions = options\n\n    if (firstInsertPositionOnCreate === 'first') {\n      newOptions = [newOption, ...newOptions]\n    } else if (firstInsertPositionOnCreate === 'last') {\n      newOptions = [...newOptions, newOption]\n    } else {\n      const i = newOptions.findIndex(\n        ({ label }) => label === firstInsertPositionOnCreate,\n      )\n\n      if (i !== -1 && isArray(newOptions[i].value)) {\n        if (secondInsertPositionOnCreate === 'first') {\n          newOptions[i].value = [\n            newOption,\n            ...(newOptions[i].value as UIOption[]),\n          ]\n        } else {\n          newOptions[i].value = [\n            ...(newOptions[i].value as UIOption[]),\n            newOption,\n          ]\n        }\n      } else {\n        console.warn(\n          `${\n            !isMulti ? 'Autocomplete' : 'MultiAutocomplete'\n          }: '${firstInsertPositionOnCreate}' specified in insertPositionOnCreate does not exist in the option group.`,\n        )\n      }\n    }\n\n    setOptions(newOptions)\n    onChange(inputValue)\n    rebirthOptions(false)\n\n    const index = flattenOptions(newOptions).findIndex(\n      ({ value }) => value === inputValue,\n    )\n\n    setFocusedIndex(index)\n\n    rest.onCreate?.(newOption, newOptions)\n  }, [\n    inputValue,\n    options,\n    firstInsertPositionOnCreate,\n    onChange,\n    rebirthOptions,\n    rest,\n    secondInsertPositionOnCreate,\n    isMulti,\n  ])\n\n  const onDelete = useCallback(() => {\n    if (!isMulti) {\n      onChange('')\n    } else {\n      onChange(value[value.length - 1])\n    }\n  }, [isMulti, onChange, value])\n\n  const onClear = useCallback(\n    (ev: MouseEvent<HTMLDivElement>) => {\n      ev.stopPropagation()\n\n      setValue([] as unknown as T)\n      setDisplayValue(undefined)\n      setInputValue('')\n      rebirthOptions()\n    },\n    [setDisplayValue, setInputValue, setValue, rebirthOptions],\n  )\n\n  const onClick = useCallback(() => {\n    if (isOpen) {\n      if (inputRef.current) inputRef.current.focus()\n    } else {\n      onOpen()\n\n      onFocusFirstOrSelected()\n    }\n  }, [isOpen, onFocusFirstOrSelected, onOpen])\n\n  const onFocus = useCallback(() => {\n    if (isOpen) return\n\n    onOpen()\n\n    onFocusFirstOrSelected()\n  }, [isOpen, onFocusFirstOrSelected, onOpen])\n\n  const onBlur = useCallback(\n    (ev: FocusEvent<HTMLDivElement>) => {\n      const relatedTarget = getEventRelatedTarget(ev)\n\n      if (isContains(containerRef.current, relatedTarget)) return\n\n      if (!closeOnBlur && isHit) return\n\n      setInputValue('')\n\n      if (isOpen) onClose()\n    },\n    [closeOnBlur, isHit, isOpen, onClose],\n  )\n\n  const onKeyDown = useCallback(\n    (ev: KeyboardEvent<HTMLDivElement>) => {\n      if (ev.key === ' ') ev.key = ev.code\n\n      if (formControlProps.disabled || formControlProps.readOnly) return\n      if (isComposition.current) return\n\n      const enabledDelete = displayValue === inputValue || !inputValue.length\n\n      const actions: Record<string, Function | undefined> = {\n        ArrowDown: isFocused\n          ? () => onFocusNext()\n          : !isOpen\n          ? funcAll(onOpen, onFocusFirstOrSelected)\n          : undefined,\n        ArrowUp: isFocused\n          ? () => onFocusPrev()\n          : !isOpen\n          ? funcAll(onOpen, onFocusLastOrSelected)\n          : undefined,\n        Space: isCreate\n          ? onCreate\n          : isFocused\n          ? onSelect\n          : !isOpen\n          ? funcAll(onOpen, onFocusFirstOrSelected)\n          : undefined,\n        Enter: isCreate\n          ? onCreate\n          : isFocused\n          ? onSelect\n          : !isOpen\n          ? funcAll(onOpen, onFocusFirstOrSelected)\n          : undefined,\n        Home: isOpen ? onFocusFirst : undefined,\n        End: isOpen ? onFocusLast : undefined,\n        Escape: closeOnEsc ? onClose : undefined,\n        Backspace: !isEmptyValue && enabledDelete ? onDelete : undefined,\n      }\n\n      const action = actions[ev.key]\n\n      if (!action) return\n\n      ev.preventDefault()\n      ev.stopPropagation()\n\n      action(ev)\n    },\n    [\n      formControlProps,\n      displayValue,\n      inputValue,\n      onOpen,\n      isFocused,\n      onFocusFirstOrSelected,\n      onFocusNext,\n      onFocusLastOrSelected,\n      onFocusPrev,\n      isCreate,\n      onCreate,\n      onSelect,\n      isOpen,\n      onFocusFirst,\n      onFocusLast,\n      closeOnEsc,\n      onClose,\n      isEmptyValue,\n      onDelete,\n    ],\n  )\n\n  useEffect(() => {\n    if (!isMulti) return\n\n    if (!omitSelectedValues && isUndefined(maxSelectedValues)) return\n\n    const isAll = value.length > 0 && value.length === descendants.count()\n    const isMax = value.length === maxSelectedValues\n\n    if (isAll || isMax) {\n      onClose()\n      setIsAllSelected(true)\n    } else {\n      setIsAllSelected(false)\n    }\n  }, [\n    omitSelectedValues,\n    value,\n    descendants,\n    isMulti,\n    onClose,\n    maxSelectedValues,\n  ])\n\n  useUpdateEffect(() => {\n    if (isOpen) return\n\n    setFocusedIndex(-1)\n    setInputValue('')\n  }, [isOpen])\n\n  useUpdateEffect(() => {\n    if (!isHit) setFocusedIndex(-2)\n  }, [isHit])\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  useOutsideClick({\n    ref: containerRef,\n    handler: onClose,\n    enabled: closeOnBlur || !isHit,\n  })\n\n  const getPopoverProps = useCallback(\n    (props?: PopoverProps): PopoverProps => ({\n      ...rest,\n      ...props,\n      isOpen,\n      onOpen,\n      onClose,\n      placement,\n      duration,\n      trigger: 'never',\n      closeOnButton: false,\n    }),\n    [duration, isOpen, onClose, onOpen, placement, rest],\n  )\n\n  const getContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ref: mergeRefs(containerRef, ref),\n      ...containerProps,\n      ...props,\n      ...formControlProps,\n      onClick: handlerAll(props.onClick, rest.onClick, onClick),\n      onBlur: handlerAll(props.onBlur, rest.onBlur, onBlur),\n    }),\n\n    [containerProps, formControlProps, onBlur, onClick, rest],\n  )\n\n  const getFieldProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ref,\n      tabIndex: -1,\n      ...props,\n      ...formControlProps,\n      placeholder,\n      'data-active': dataAttr(isOpen),\n      'aria-expanded': dataAttr(isOpen),\n      onFocus: handlerAll(props.onFocus, rest.onFocus, onFocus),\n      onKeyDown: handlerAll(props.onKeyDown, rest.onKeyDown, onKeyDown),\n    }),\n    [formControlProps, placeholder, isOpen, rest, onFocus, onKeyDown],\n  )\n\n  return {\n    id,\n    descendants,\n    value,\n    displayValue,\n    inputValue,\n    isHit,\n    isEmpty,\n    computedChildren,\n    focusedIndex,\n    omitSelectedValues,\n    closeOnSelect,\n    createOption,\n    emptyMessage,\n    isOpen,\n    isAllSelected,\n    listRef,\n    inputRef,\n    optionProps,\n    formControlProps,\n    setFocusedIndex,\n    onChangeDisplayValue,\n    onChange,\n    onSearch,\n    onCreate,\n    onClear,\n    onCompositionStart,\n    onCompositionEnd,\n    pickOptions,\n    rebirthOptions,\n    onOpen,\n    onClose,\n    onFocusFirst,\n    onFocusLast,\n    onFocusSelected,\n    onFocusNext,\n    onFocusPrev,\n    getPopoverProps,\n    getContainerProps,\n    getFieldProps,\n    inputProps,\n  }\n}\n\nexport type UseAutocompleteReturn = ReturnType<typeof useAutocomplete>\n\nexport const useAutocompleteInput = () => {\n  const {\n    id,\n    inputRef,\n    onSearch,\n    onCompositionStart,\n    onCompositionEnd,\n    isAllSelected,\n    formControlProps,\n    inputProps,\n  } = useAutocompleteContext()\n\n  useUpdateEffect(() => {\n    if (isAllSelected && inputRef.current) inputRef.current.blur()\n  }, [isAllSelected])\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ref: mergeRefs(inputRef, ref),\n      ...formControlProps,\n      ...inputProps,\n      ...props,\n      id,\n      cursor: formControlProps.readOnly ? 'default' : 'text',\n      pointerEvents:\n        formControlProps.disabled || isAllSelected ? 'none' : 'auto',\n      tabIndex: isAllSelected ? -1 : 0,\n      onChange: handlerAll(props.onChange, onSearch),\n      onCompositionStart: handlerAll(\n        props.onCompositionStart,\n        inputProps.onCompositionStart,\n        onCompositionStart,\n      ),\n      onCompositionEnd: handlerAll(\n        props.onCompositionEnd,\n        inputProps.onCompositionEnd,\n        onCompositionEnd,\n      ),\n    }),\n    [\n      inputProps,\n      inputRef,\n      formControlProps,\n      id,\n      isAllSelected,\n      onSearch,\n      onCompositionStart,\n      onCompositionEnd,\n    ],\n  )\n\n  return {\n    getInputProps,\n  }\n}\n\nexport type UseAutocompleteInputReturn = ReturnType<typeof useAutocompleteInput>\n\nexport const useAutocompleteList = () => {\n  const { focusedIndex, isOpen, listRef, rebirthOptions } =\n    useAutocompleteContext()\n\n  const descendants = useAutocompleteDescendantsContext()\n\n  const beforeFocusedIndex = useRef<number>(-1)\n  const selectedValue = descendants.value(focusedIndex)\n\n  const onAnimationComplete = useCallback(() => {\n    if (!isOpen) rebirthOptions(false)\n  }, [isOpen, rebirthOptions])\n\n  useEffect(() => {\n    if (!listRef.current || !selectedValue) return\n\n    if (beforeFocusedIndex.current === selectedValue.index) return\n\n    const parent = listRef.current\n    const child = selectedValue.node\n\n    const parentHeight = parent.clientHeight\n    const viewTop = parent.scrollTop\n    const viewBottom = viewTop + parentHeight\n\n    const childHeight = child.clientHeight\n    const childTop = child.offsetTop\n    const childBottom = childTop + childHeight\n\n    const isInView = viewTop <= childTop && childBottom <= viewBottom\n\n    const isScrollBottom = beforeFocusedIndex.current < selectedValue.index\n\n    if (!isInView) {\n      if (childBottom <= parentHeight) {\n        listRef.current.scrollTo({ top: 0 })\n      } else {\n        if (!isScrollBottom) {\n          listRef.current.scrollTo({ top: childTop + 1 })\n        } else {\n          listRef.current.scrollTo({ top: childBottom - parentHeight })\n        }\n      }\n    }\n\n    beforeFocusedIndex.current = selectedValue.index\n  }, [listRef, selectedValue])\n\n  useUpdateEffect(() => {\n    if (!isOpen) beforeFocusedIndex.current = -1\n  }, [isOpen])\n\n  const getListProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      as: 'ul',\n      ref: mergeRefs(listRef, ref),\n      role: 'select',\n      tabIndex: -1,\n      ...props,\n      onAnimationComplete: handlerAll(\n        props.onAnimationComplete,\n        onAnimationComplete,\n      ),\n    }),\n    [listRef, onAnimationComplete],\n  )\n\n  return {\n    getListProps,\n  }\n}\n\nexport type UseAutocompleteOptionGroupProps = HTMLUIProps<'ul'> & {\n  /**\n   * The label of the autocomplete option group.\n   */\n  label: string\n}\n\nexport const useAutocompleteOptionGroup = ({\n  label,\n  ...rest\n}: UseAutocompleteOptionGroupProps) => {\n  const { value, omitSelectedValues } = useAutocompleteContext()\n\n  const isMulti = isArray(value)\n\n  const descendants = useAutocompleteDescendantsContext()\n\n  const values = descendants.values()\n  const selectedValues =\n    isMulti && omitSelectedValues\n      ? descendants.values(({ node }) =>\n          value.includes(node.dataset.value ?? ''),\n        )\n      : []\n  const selectedIndexes = selectedValues.map(({ index }) => index)\n  const childValues = values.filter(\n    ({ node, index }) =>\n      node.parentElement?.dataset.label === label &&\n      !selectedIndexes.includes(index) &&\n      'target' in node.dataset,\n  )\n\n  const isEmpty = !childValues.length\n\n  const computedRest = splitObject(rest, layoutStylesProperties)\n\n  const getContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: '0px',\n        clip: 'rect(0px, 0px, 0px, 0px)',\n        height: '1px',\n        width: '1px',\n        margin: '-1px',\n        padding: '0px',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        position: 'absolute',\n      }\n\n      return {\n        ref,\n        ...props,\n        ...computedRest[0],\n        style: isEmpty ? style : undefined,\n        'data-label': label,\n        role: 'autocomplete-group-container',\n      }\n    },\n    [computedRest, isEmpty, label],\n  )\n\n  const getGroupProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ref,\n      ...props,\n      ...computedRest[1],\n      'data-label': label,\n      role: 'autocomplete-group',\n    }),\n    [computedRest, label],\n  )\n\n  return {\n    label,\n    getContainerProps,\n    getGroupProps,\n  }\n}\n\nexport type UseAutocompleteOptionGroupReturn = ReturnType<\n  typeof useAutocompleteOptionGroup\n>\n\nexport type UseAutocompleteOptionProps = Omit<\n  HTMLUIProps<'li'>,\n  'value' | 'children'\n> & {\n  /**\n   * The value of the select option.\n   */\n  value?: string\n  /**\n   * The label of the select option.\n   */\n  children?: string\n  /**\n   * If `true`, the select option will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the select option will be focusable.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the list element will be closed when selected.\n   *\n   * @default false\n   */\n  closeOnSelect?: boolean\n}\n\nexport const useAutocompleteOption = (props: UseAutocompleteOptionProps) => {\n  const {\n    value,\n    omitSelectedValues,\n    onChange,\n    onChangeDisplayValue,\n    focusedIndex,\n    setFocusedIndex,\n    onClose,\n    closeOnSelect: generalCloseOnSelect,\n    optionProps,\n    inputRef,\n    onFocusNext,\n  } = useAutocompleteContext()\n\n  let {\n    icon: customIcon,\n    isDisabled,\n    isFocusable,\n    closeOnSelect: customCloseOnSelect,\n    children,\n    ...computedProps\n  } = { ...optionProps, ...props }\n\n  const trulyDisabled = !!isDisabled && !isFocusable\n\n  const itemRef = useRef<HTMLLIElement>(null)\n\n  const { index, register, descendants } = useAutocompleteDescendant({\n    disabled: trulyDisabled,\n  })\n\n  const values = descendants.values()\n  const frontValues = values.slice(0, index)\n\n  const isMulti = isArray(value)\n  const isDuplicated = !isMulti\n    ? frontValues.some(\n        ({ node }) => node.dataset.value === (computedProps.value ?? ''),\n      )\n    : false\n\n  const isSelected =\n    !isDuplicated &&\n    (!isMulti\n      ? (computedProps.value ?? '') === value\n      : value.includes(computedProps.value ?? ''))\n  const isTarget = 'target' in (itemRef.current?.dataset ?? {})\n  const isFocused = index === focusedIndex\n\n  const onClick = useCallback(\n    (ev: MouseEvent<HTMLLIElement>) => {\n      ev.stopPropagation()\n\n      if (isDisabled) {\n        if (inputRef.current) inputRef.current.focus()\n\n        return\n      }\n\n      if (!isTargetOption(ev.currentTarget)) {\n        if (inputRef.current) inputRef.current.focus()\n\n        return\n      }\n\n      setFocusedIndex(index)\n\n      onChange(computedProps.value ?? '')\n\n      if (inputRef.current) inputRef.current.focus()\n\n      if (customCloseOnSelect ?? generalCloseOnSelect) onClose()\n\n      if (omitSelectedValues) onFocusNext(index)\n    },\n    [\n      onFocusNext,\n      omitSelectedValues,\n      isDisabled,\n      computedProps,\n      setFocusedIndex,\n      index,\n      onChange,\n      customCloseOnSelect,\n      generalCloseOnSelect,\n      onClose,\n      inputRef,\n    ],\n  )\n\n  useEffect(() => {\n    if (isSelected) onChangeDisplayValue(computedProps.value ?? '', false)\n  }, [computedProps, isSelected, onChangeDisplayValue])\n\n  const getOptionProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: '0px',\n        clip: 'rect(0px, 0px, 0px, 0px)',\n        height: '1px',\n        width: '1px',\n        margin: '-1px',\n        padding: '0px',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        position: 'absolute',\n      }\n\n      return {\n        ref: mergeRefs(itemRef, ref, register),\n        ...omitObject(computedProps, ['value']),\n        ...props,\n        role: 'autocomplete-item',\n        tabIndex: -1,\n        style:\n          !isTarget || (omitSelectedValues && isSelected) ? style : undefined,\n        'data-target': dataAttr(true),\n        'data-value': computedProps.value ?? '',\n        'data-focus': dataAttr(isFocused),\n        'data-disabled': dataAttr(isDisabled),\n        'aria-checked': ariaAttr(isSelected),\n        'aria-disabled': ariaAttr(isDisabled),\n        onClick: handlerAll(computedProps.onClick, props.onClick, onClick),\n      }\n    },\n    [\n      computedProps,\n      isDisabled,\n      isFocused,\n      isSelected,\n      isTarget,\n      omitSelectedValues,\n      onClick,\n      register,\n    ],\n  )\n\n  return {\n    isSelected,\n    isFocused,\n    customIcon,\n    children,\n    getOptionProps,\n  }\n}\n\nexport type UseAutocompleteOptionReturn = ReturnType<\n  typeof useAutocompleteOption\n>\n\nexport const useAutocompleteCreate = () => {\n  const { isHit, onCreate } = useAutocompleteContext()\n\n  const getCreateProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: '0px',\n        clip: 'rect(0px, 0px, 0px, 0px)',\n        height: '1px',\n        width: '1px',\n        margin: '-1px',\n        padding: '0px',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        position: 'absolute',\n      }\n\n      return {\n        ref,\n        ...props,\n        tabIndex: -1,\n        style: isHit ? style : undefined,\n        'data-focus': dataAttr(!isHit),\n        onClick: handlerAll(props.onClick, onCreate),\n      }\n    },\n    [isHit, onCreate],\n  )\n\n  return { getCreateProps }\n}\n\nexport type UseAutocompleteCreateReturn = ReturnType<\n  typeof useAutocompleteCreate\n>\n\nexport const useAutocompleteEmpty = () => {\n  const { isHit, isEmpty } = useAutocompleteContext()\n\n  const getEmptyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const style: CSSProperties = {\n        border: '0px',\n        clip: 'rect(0px, 0px, 0px, 0px)',\n        height: '1px',\n        width: '1px',\n        margin: '-1px',\n        padding: '0px',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        position: 'absolute',\n      }\n\n      return {\n        ref,\n        ...props,\n        tabIndex: -1,\n        style: isHit && !isEmpty ? style : undefined,\n      }\n    },\n    [isHit, isEmpty],\n  )\n\n  return { getEmptyProps }\n}\n\nexport type UseAutocompleteEmptyReturn = ReturnType<typeof useAutocompleteEmpty>\n","import { ui, CSSUIObject, HTMLUIProps, forwardRef } from '@yamada-ui/core'\nimport { ChevronIcon, CloseIcon } from '@yamada-ui/icon'\nimport { useClickable } from '@yamada-ui/use-clickable'\nimport { cx, getValidChildren, isValidElement } from '@yamada-ui/utils'\nimport { cloneElement, FC, HTMLAttributes, useRef } from 'react'\nimport { useAutocompleteContext } from './use-autocomplete'\n\nexport type AutocompleteIconProps = HTMLUIProps<'div'>\n\nexport const AutocompleteIcon = forwardRef<AutocompleteIconProps, 'div'>(\n  ({ className, children, __css, ...rest }, ref) => {\n    const { styles } = useAutocompleteContext()\n\n    const css: CSSUIObject = {\n      position: 'absolute',\n      top: '50%',\n      transform: 'translateY(-50%)',\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      pointerEvents: 'none',\n      cursor: 'pointer',\n      ...styles.icon,\n      ...__css,\n    }\n\n    const validChildren = getValidChildren(children)\n\n    const cloneChildren = validChildren.map((child) =>\n      cloneElement(child, {\n        focusable: false,\n        'aria-hidden': true,\n        style: {\n          maxWidth: '1em',\n          maxHeight: '1em',\n          color: 'currentColor',\n        },\n      }),\n    )\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx('ui-autocomplete-icon', className)}\n        __css={css}\n        {...rest}\n      >\n        {isValidElement(children) ? cloneChildren : <ChevronIcon />}\n      </ui.div>\n    )\n  },\n)\n\nexport type AutocompleteClearIconProps = AutocompleteIconProps & {\n  disabled?: boolean\n}\n\nexport const AutocompleteClearIcon: FC<AutocompleteClearIconProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const ref = useRef<HTMLDivElement>(null)\n  const { styles } = useAutocompleteContext()\n\n  const isDisabled = props.disabled\n\n  const rest = useClickable({\n    ref,\n    isDisabled,\n    ...(props as HTMLAttributes<HTMLElement>),\n  })\n\n  return (\n    <AutocompleteIcon\n      className={cx('ui-autocomplete-clear-icon', className)}\n      __css={styles.clearIcon}\n      {...rest}\n    >\n      {children ?? <CloseIcon w='0.5em' h='0.5em' />}\n    </AutocompleteIcon>\n  )\n}\n\nexport type AutocompleteItemIconProps = HTMLUIProps<'span'>\n\nexport const AutocompleteItemIcon = forwardRef<\n  AutocompleteItemIconProps,\n  'span'\n>(({ className, ...rest }, ref) => {\n  const { styles } = useAutocompleteContext()\n\n  const css: CSSUIObject = {\n    flexShrink: 0,\n    display: 'inline-flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontSize: '0.85em',\n    ...styles.itemIcon,\n  }\n\n  return (\n    <ui.span\n      ref={ref}\n      className={cx('ui-autocomplete-item-icon', className)}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n","import {\n  CSSUIObject,\n  CSSUIProps,\n  forwardRef,\n  HTMLUIProps,\n} from '@yamada-ui/core'\nimport { PopoverContent } from '@yamada-ui/popover'\nimport { cx } from '@yamada-ui/utils'\nimport { useAutocompleteContext, useAutocompleteList } from './use-autocomplete'\n\nexport type AutocompleteListProps = HTMLUIProps<'ul'>\n\nexport const AutocompleteList = forwardRef<AutocompleteListProps, 'ul'>(\n  ({ className, w, width, minW, minWidth, ...rest }, ref) => {\n    const { styles } = useAutocompleteContext()\n\n    const { getListProps } = useAutocompleteList()\n\n    w =\n      w ?? width ?? ((styles.list?.w ?? styles.list?.width) as CSSUIProps['w'])\n    minW =\n      minW ??\n      minWidth ??\n      ((styles.list?.minW ?? styles.list?.minWidth) as CSSUIProps['minW'])\n\n    const css: CSSUIObject = { ...styles.list }\n\n    return (\n      <PopoverContent\n        className={cx('ui-autocomplete-list', className)}\n        w={w}\n        minW={minW}\n        __css={css}\n        {...getListProps(rest, ref)}\n      />\n    )\n  },\n)\n","import { ui, forwardRef, HTMLUIProps } from '@yamada-ui/core'\nimport { cx } from '@yamada-ui/utils'\nimport {\n  useAutocompleteContext,\n  useAutocompleteOptionGroup,\n  UseAutocompleteOptionGroupProps,\n} from './use-autocomplete'\n\ntype AutocompleteOptionGroupOptions = UseAutocompleteOptionGroupProps\n\nexport type AutocompleteOptionGroupProps = HTMLUIProps<'ul'> &\n  AutocompleteOptionGroupOptions\n\nexport const AutocompleteOptionGroup = forwardRef<\n  AutocompleteOptionGroupProps,\n  'ul'\n>(\n  (\n    { className, color, h, height, minH, minHeight, children, ...rest },\n    ref,\n  ) => {\n    const { styles } = useAutocompleteContext()\n    const { label, getContainerProps, getGroupProps } =\n      useAutocompleteOptionGroup(rest)\n\n    h = h ?? height\n    minH = minH ?? minHeight\n\n    return (\n      <ui.li\n        className='ui-autocomplete-group-container'\n        __css={{ w: '100%', h: 'fit-content', color }}\n        {...getContainerProps()}\n      >\n        <ui.span\n          className={cx('ui-autocomplete-group-label')}\n          __css={styles.groupLabel}\n          noOfLines={1}\n        >\n          {label}\n        </ui.span>\n\n        <ui.ul\n          {...getGroupProps({}, ref)}\n          className={cx('ui-autocomplete-group', className)}\n          __css={{ h, minH, ...styles.group }}\n        >\n          {children}\n        </ui.ul>\n      </ui.li>\n    )\n  },\n)\n","import { ui, CSSUIObject, forwardRef } from '@yamada-ui/core'\nimport { cx } from '@yamada-ui/utils'\nimport { FC, ReactElement } from 'react'\nimport { AutocompleteItemIcon } from './autocomplete-icon'\nimport {\n  useAutocompleteContext,\n  useAutocompleteOption,\n  UseAutocompleteOptionProps,\n} from './use-autocomplete'\n\ntype AutocompleteOptionOptions = {\n  /**\n   * The autocomplete option icon to use.\n   */\n  icon?: ReactElement\n}\n\nexport type AutocompleteOptionProps = UseAutocompleteOptionProps &\n  AutocompleteOptionOptions\n\nexport const AutocompleteOption = forwardRef<AutocompleteOptionProps, 'li'>(\n  ({ className, icon, ...rest }, ref) => {\n    const { styles } = useAutocompleteContext()\n    const { isSelected, customIcon, children, getOptionProps } =\n      useAutocompleteOption(rest)\n\n    icon = icon ?? customIcon\n\n    const css: CSSUIObject = {\n      textDecoration: 'none',\n      color: 'inherit',\n      userSelect: 'none',\n      display: 'flex',\n      width: '100%',\n      alignItems: 'center',\n      textAlign: 'start',\n      flex: '0 0 auto',\n      outline: 0,\n      gap: '0.75rem',\n      ...styles.item,\n    }\n\n    return (\n      <ui.li\n        className={cx('ui-autocomplete-item', className)}\n        __css={css}\n        {...getOptionProps({}, ref)}\n      >\n        {icon !== null ? (\n          <AutocompleteItemIcon opacity={isSelected ? 1 : 0}>\n            {icon || <CheckIcon />}\n          </AutocompleteItemIcon>\n        ) : null}\n        {icon ? (\n          <ui.span style={{ pointerEvents: 'none', flex: 1 }} noOfLines={1}>\n            {children}\n          </ui.span>\n        ) : (\n          children\n        )}\n      </ui.li>\n    )\n  },\n)\n\nconst CheckIcon: FC = () => (\n  <svg viewBox='0 0 14 14' width='1em' height='1em'>\n    <polygon\n      fill='currentColor'\n      points='5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039'\n    />\n  </svg>\n)\n","import { ui, CSSUIObject, forwardRef, HTMLUIProps } from '@yamada-ui/core'\nimport { cx, runIfFunc } from '@yamada-ui/utils'\nimport { FC, ReactElement } from 'react'\nimport { AutocompleteItemIcon } from './autocomplete-icon'\nimport {\n  useAutocompleteContext,\n  useAutocompleteCreate,\n} from './use-autocomplete'\n\ntype AutocompleteCreateOptions = {\n  /**\n   * The autocomplete create option icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * The label of the autocomplete create option.\n   */\n  children?: string | ((inputValue: string) => string)\n}\n\nexport type AutocompleteCreateProps = Omit<HTMLUIProps<'li'>, 'children'> &\n  AutocompleteCreateOptions\n\nexport const AutocompleteCreate = forwardRef<AutocompleteCreateProps, 'li'>(\n  ({ className, icon, children, ...rest }, ref) => {\n    const { inputValue, styles } = useAutocompleteContext()\n    const { getCreateProps } = useAutocompleteCreate()\n\n    children ??= inputValue\n\n    const css: CSSUIObject = {\n      textDecoration: 'none',\n      color: 'inherit',\n      userSelect: 'none',\n      display: 'flex',\n      width: '100%',\n      alignItems: 'center',\n      textAlign: 'start',\n      flex: '0 0 auto',\n      outline: 0,\n      gap: '0.75rem',\n      ...styles.item,\n    }\n\n    return (\n      <ui.li\n        className={cx('ui-autocomplete-create', className)}\n        __css={css}\n        {...getCreateProps(rest, ref)}\n      >\n        {icon !== null ? (\n          <AutocompleteItemIcon>{icon || <PlusIcon />}</AutocompleteItemIcon>\n        ) : null}\n        {icon ? (\n          <ui.span style={{ pointerEvents: 'none', flex: 1 }} noOfLines={1}>\n            {runIfFunc(children, inputValue)}\n          </ui.span>\n        ) : (\n          runIfFunc(children, inputValue)\n        )}\n      </ui.li>\n    )\n  },\n)\n\nconst PlusIcon: FC = () => (\n  <svg viewBox='0 0 45.402 45.402' width='1em' height='1em'>\n    <path\n      fill='currentColor'\n      d='M41.267,18.557H26.832V4.134C26.832,1.851,24.99,0,22.707,0c-2.283,0-4.124,1.851-4.124,4.135v14.432H4.141   c-2.283,0-4.139,1.851-4.138,4.135c-0.001,1.141,0.46,2.187,1.207,2.934c0.748,0.749,1.78,1.222,2.92,1.222h14.453V41.27   c0,1.142,0.453,2.176,1.201,2.922c0.748,0.748,1.777,1.211,2.919,1.211c2.282,0,4.129-1.851,4.129-4.133V26.857h14.435   c2.283,0,4.134-1.867,4.133-4.15C45.399,20.425,43.548,18.557,41.267,18.557z'\n    />\n  </svg>\n)\n","import { ui, CSSUIObject, forwardRef, HTMLUIProps } from '@yamada-ui/core'\nimport { cx } from '@yamada-ui/utils'\nimport { FC, ReactElement } from 'react'\nimport { AutocompleteItemIcon } from './autocomplete-icon'\nimport {\n  useAutocompleteContext,\n  useAutocompleteEmpty,\n} from './use-autocomplete'\n\ntype AutocompleteEmptyOptions = {\n  /**\n   * The autocomplete empty option icon to use.\n   */\n  icon?: ReactElement\n  /**\n   * The label of the autocomplete empty option.\n   */\n  children?: string\n}\n\nexport type AutocompleteEmptyProps = Omit<HTMLUIProps<'li'>, 'children'> &\n  AutocompleteEmptyOptions\n\nexport const AutocompleteEmpty = forwardRef<AutocompleteEmptyProps, 'li'>(\n  ({ className, icon, children, ...rest }, ref) => {\n    const { emptyMessage, styles } = useAutocompleteContext()\n    const { getEmptyProps } = useAutocompleteEmpty()\n\n    children ??= emptyMessage\n\n    const css: CSSUIObject = {\n      textDecoration: 'none',\n      color: 'inherit',\n      userSelect: 'none',\n      display: 'flex',\n      width: '100%',\n      alignItems: 'center',\n      textAlign: 'start',\n      flex: '0 0 auto',\n      outline: 0,\n      gap: '0.75rem',\n      pointerEvents: 'none',\n      ...styles.item,\n    }\n\n    return (\n      <ui.li\n        className={cx('ui-autocomplete-empty', className)}\n        __css={css}\n        {...getEmptyProps(rest, ref)}\n      >\n        {icon !== null ? (\n          <AutocompleteItemIcon>{icon || <MinusIcon />}</AutocompleteItemIcon>\n        ) : null}\n        {icon ? (\n          <ui.span style={{ pointerEvents: 'none', flex: 1 }} noOfLines={1}>\n            {children}\n          </ui.span>\n        ) : (\n          children\n        )}\n      </ui.li>\n    )\n  },\n)\n\nconst MinusIcon: FC = () => (\n  <svg viewBox='0 0 448 512' width='1em' height='1em'>\n    <path\n      fill='currentColor'\n      d='M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z'\n    />\n  </svg>\n)\n"],"names":["kanaMap","defaultFormat","value","v","reg","flattenOptions","options","filterOptions","isDisabled","isFocusable","trulyDisabled","isMulti","isArray","isTargetOption","target","isHTMLElement","_a","AutocompleteDescendantsContextProvider","useAutocompleteDescendantsContext","useAutocompleteDescendants","useAutocompleteDescendant","createDescendant","AutocompleteProvider","useAutocompleteContext","createContext","useAutocomplete","defaultIsOpen","closeOnSelect","omitSelectedValues","maxSelectedValues","closeOnBlur","closeOnEsc","createOption","insertPositionOnCreate","emptyMessage","format","placement","duration","optionProps","placeholder","children","rest","useFormControlProps","id","formControlProps","pickObject","formControlProperties","containerProps","inputProps","splitObject","omitObject","layoutStylesProperties","descendants","containerRef","useRef","listRef","inputRef","timeoutIds","isComposition","setOptions","useState","setValue","useControllableState","displayValue","setDisplayValue","inputValue","setInputValue","focusedIndex","setFocusedIndex","isAllSelected","setIsAllSelected","isHit","setIsHit","isOpen","setIsOpen","isFocused","isCreate","isEmptyValue","firstInsertPositionOnCreate","secondInsertPositionOnCreate","useMemo","isUndefined","selectedIndexes","node","index","enabledValues","validChildren","getValidChildren","computedChildren","label","props","i","jsx","AutocompleteOptionGroup","AutocompleteOption","isEmpty","onOpen","useCallback","onClose","onFocusFirst","first","enabledFirst","onFocusLast","last","enabledlast","onFocusSelected","selected","onFocusNext","next","enabledNext","onFocusPrev","prev","enabledPrev","onFocusFirstOrSelected","onFocusLastOrSelected","pickOptions","values","rebirthOptions","runFocus","onChangeDisplayValue","newValue","runOmit","selectedValues","selectedValue","onChange","onSelect","enabledValue","onSearch","ev","computedValue","onCompositionStart","onCompositionEnd","onCreate","newOption","newOptions","onDelete","onClear","onClick","onFocus","onBlur","relatedTarget","getEventRelatedTarget","isContains","onKeyDown","enabledDelete","action","funcAll","useEffect","isAll","isMax","useUpdateEffect","useUnmountEffect","useOutsideClick","getPopoverProps","getContainerProps","ref","mergeRefs","handlerAll","getFieldProps","dataAttr","useAutocompleteInput","useAutocompleteList","beforeFocusedIndex","onAnimationComplete","parent","child","parentHeight","viewTop","viewBottom","childHeight","childTop","childBottom","isInView","isScrollBottom","useAutocompleteOptionGroup","computedRest","style","getGroupProps","useAutocompleteOption","generalCloseOnSelect","customIcon","customCloseOnSelect","computedProps","itemRef","register","frontValues","isSelected","isTarget","getOptionProps","ariaAttr","useAutocompleteCreate","useAutocompleteEmpty","AutocompleteIcon","forwardRef","className","__css","styles","css","cloneChildren","cloneElement","ui","cx","isValidElement","ChevronIcon","AutocompleteClearIcon","useClickable","CloseIcon","AutocompleteItemIcon","AutocompleteList","w","width","minW","minWidth","getListProps","_b","_c","_d","PopoverContent","color","h","height","minH","minHeight","jsxs","icon","CheckIcon","AutocompleteCreate","getCreateProps","PlusIcon","runIfFunc","AutocompleteEmpty","getEmptyProps","MinusIcon"],"mappings":"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"}