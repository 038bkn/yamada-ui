{"version":3,"file":"index-0bddc11e.js","sources":["../../packages/hooks/use-event-listener/src/index.ts"],"sourcesContent":["import { useCallbackRef } from '@yamada-ui/utils'\nimport { useCallback, useEffect, useRef } from 'react'\n\ntype Events =\n  | keyof DocumentEventMap\n  | keyof WindowEventMap\n  | keyof GlobalEventHandlersEventMap\ntype Target = EventTarget | null | (() => EventTarget | null)\ntype Options = boolean | AddEventListenerOptions\ntype Handler<E extends Events> = E extends keyof DocumentEventMap\n  ? (event: DocumentEventMap[E]) => void\n  : E extends keyof WindowEventMap\n  ? (event: WindowEventMap[E]) => void\n  : E extends keyof GlobalEventHandlersEventMap\n  ? (event: GlobalEventHandlersEventMap[E]) => void\n  : ((event: Event) => void) | undefined\n\nexport const useEventListener = <E extends Events>(\n  target: Target,\n  event: E,\n  handler: Handler<E>,\n  options?: Options,\n) => {\n  const listener = useCallbackRef(handler)\n\n  useEffect(() => {\n    const el = typeof target === 'function' ? target() : target ?? document\n\n    if (!handler || !el) return\n\n    el.addEventListener(\n      event,\n      listener as EventListenerOrEventListenerObject,\n      options,\n    )\n\n    return () => {\n      el.removeEventListener(\n        event,\n        listener as EventListenerOrEventListenerObject,\n        options,\n      )\n    }\n  }, [event, target, options, listener, handler])\n\n  return () => {\n    const el = typeof target === 'function' ? target() : target ?? document\n\n    el?.removeEventListener(\n      event,\n      listener as EventListenerOrEventListenerObject,\n      options,\n    )\n  }\n}\n\nexport const useEventListeners = () => {\n  const listeners = useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = useCallback(\n    <E extends Events>(\n      el: EventTarget,\n      event: E,\n      listener: any,\n      options: boolean | AddEventListenerOptions,\n    ) => {\n      listeners.current.set(listener, { event, el, options })\n\n      el.addEventListener(\n        event,\n        listener as EventListenerOrEventListenerObject,\n        options,\n      )\n    },\n    [],\n  )\n\n  const remove = useCallback(\n    <E extends Events>(\n      el: EventTarget,\n      event: E,\n      listener: any,\n      options: boolean | EventListenerOptions,\n    ) => {\n      el.removeEventListener(\n        event,\n        listener as EventListenerOrEventListenerObject,\n        options,\n      )\n\n      listeners.current.delete(listener)\n    },\n    [],\n  )\n\n  useEffect(\n    () => () => {\n      currentListeners.forEach(({ el, event, options }, key) =>\n        remove(el, event, key, options),\n      )\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"],"names":["useEventListener","target","event","handler","options","listener","useCallbackRef","useEffect","el","useEventListeners","listeners","useRef","currentListeners","add","useCallback","remove","key"],"mappings":"kFAiBO,MAAMA,EAAmB,CAC9BC,EACAC,EACAC,EACAC,IACG,CACG,MAAAC,EAAWC,EAAeH,CAAO,EAEvCI,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAK,OAAOP,GAAW,WAAaA,IAAWA,GAAU,SAE3D,GAAA,GAACE,GAAW,CAACK,GAEd,OAAAA,EAAA,iBACDN,EACAG,EACAD,CAAA,EAGK,IAAM,CACRI,EAAA,oBACDN,EACAG,EACAD,CAAA,CACF,CACF,EACC,CAACF,EAAOD,EAAQG,EAASC,EAAUF,CAAO,CAAC,EAEvC,IAAM,CACX,MAAMK,EAAK,OAAOP,GAAW,WAAaA,IAAWA,GAAU,SAE3DO,GAAA,MAAAA,EAAA,oBACFN,EACAG,EACAD,EACF,CAEJ,EAEaK,EAAoB,IAAM,CACrC,MAAMC,EAAYC,EAAAA,OAAW,IAAA,GAAK,EAC5BC,EAAmBF,EAAU,QAE7BG,EAAMC,EAAA,YACV,CACEN,EACAN,EACAG,EACAD,IACG,CACHM,EAAU,QAAQ,IAAIL,EAAU,CAAE,MAAAH,EAAO,GAAAM,EAAI,QAAAJ,EAAS,EAEnDI,EAAA,iBACDN,EACAG,EACAD,CAAA,CAEJ,EACA,CAAC,CAAA,EAGGW,EAASD,EAAA,YACb,CACEN,EACAN,EACAG,EACAD,IACG,CACAI,EAAA,oBACDN,EACAG,EACAD,CAAA,EAGQM,EAAA,QAAQ,OAAOL,CAAQ,CACnC,EACA,CAAC,CAAA,EAGHE,OAAAA,EAAA,UACE,IAAM,IAAM,CACOK,EAAA,QAAQ,CAAC,CAAE,GAAAJ,EAAI,MAAAN,EAAO,QAAAE,GAAWY,IAChDD,EAAOP,EAAIN,EAAOc,EAAKZ,CAAO,CAAA,CAElC,EACA,CAACW,EAAQH,CAAgB,CAAA,EAGpB,CAAE,IAAAC,EAAK,OAAAE,EAChB"}