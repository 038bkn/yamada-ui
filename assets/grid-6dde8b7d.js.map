{"version":3,"file":"grid-6dde8b7d.js","sources":["../../packages/components/layouts/src/grid.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  HTMLUIProps,\n  CSSUIObject,\n  Token,\n} from '@yamada-ui/core'\nimport { replaceObject } from '@yamada-ui/utils'\n\ntype GridOptions = {\n  /**\n   * The CSS `grid-template-columns` property.\n   */\n  templateColumns?: CSSUIObject['gridTemplateColumns']\n  /**\n   * The CSS `grid-template-rows` property.\n   */\n  templateRows?: CSSUIObject['gridTemplateRows']\n  /**\n   * The CSS `grid-template-areas` property.\n   */\n  templateAreas?: CSSUIObject['gridTemplateAreas']\n  /**\n   * The CSS `grid-column` property.\n   */\n  column?: CSSUIObject['gridColumn']\n  /**\n   * The CSS `grid-row` property.\n   */\n  row?: CSSUIObject['gridRow']\n  /**\n   * The CSS `grid-area` property.\n   */\n  area?: CSSUIObject['gridArea']\n  /**\n   * The CSS `grid-gap` property.\n   */\n  gap?: CSSUIObject['gridGap']\n  /**\n   * The CSS `grid-row-gap` property.\n   */\n  rowGap?: CSSUIObject['gridRowGap']\n  /**\n   * The CSS `grid-column-gap` property.\n   */\n  columnGap?: CSSUIObject['gridColumnGap']\n  /**\n   * The CSS `grid-auto-flow` property.\n   */\n  autoFlow?: CSSUIObject['gridAutoFlow']\n  /**\n   * The CSS `grid-auto-columns` property.\n   */\n  autoColumns?: CSSUIObject['gridAutoColumns']\n  /**\n   * The CSS `grid-auto-rows` property.\n   */\n  autoRows?: CSSUIObject['gridAutoRows']\n}\n\nexport type GridProps = HTMLUIProps<'div'> & GridOptions\n\nexport const Grid = forwardRef<GridProps, 'div'>(\n  (\n    {\n      templateColumns: gridTemplateColumns,\n      templateRows: gridTemplateRows,\n      templateAreas: gridTemplateAreas,\n      column: gridColumn,\n      row: gridRow,\n      area: gridArea,\n      gap: gridGap,\n      rowGap: gridRowGap,\n      columnGap: gridColumnGap,\n      autoFlow: gridAutoFlow,\n      autoColumns: gridAutoColumns,\n      autoRows: gridAutoRows,\n      ...rest\n    },\n    ref,\n  ) => {\n    const css: CSSUIObject = {\n      display: 'grid',\n      gridTemplateColumns,\n      gridTemplateRows,\n      gridTemplateAreas,\n      gridColumn,\n      gridRow,\n      gridArea,\n      gridGap,\n      gridRowGap,\n      gridColumnGap,\n      gridAutoFlow,\n      gridAutoColumns,\n      gridAutoRows,\n    }\n\n    return <ui.div ref={ref} __css={css} {...rest} />\n  },\n)\n\ntype GridItemOptions = {\n  /**\n   * The CSS `grid-area` property.\n   */\n  area?: CSSUIObject['gridArea']\n  /**\n   * The number of columns the grid item should `span`.\n   */\n  colSpan?: Token<number>\n  /**\n   * The number of rows the grid item should `span`.\n   */\n  rowSpan?: Token<number>\n  /**\n   * The CSS `grid-column-start` property.\n   */\n  colStart?: CSSUIObject['gridColumnStart']\n  /**\n   * The CSS `grid-column-end` property.\n   */\n  colEnd?: CSSUIObject['gridColumnEnd']\n  /**\n   * The CSS `grid-row-start` property.\n   */\n  rowStart?: CSSUIObject['gridRowStart']\n  /**\n   * The CSS `grid-row-end` property.\n   */\n  rowEnd?: CSSUIObject['gridRowEnd']\n}\n\nexport type GridItemProps = HTMLUIProps<'div'> & GridItemOptions\n\nexport const GridItem = forwardRef<GridItemProps, 'div'>(\n  (\n    {\n      area: gridArea,\n      colSpan,\n      rowSpan,\n      colStart: gridColumnStart,\n      colEnd: gridColumnEnd,\n      rowStart: gridRowStart,\n      rowEnd: gridRowEnd,\n      ...rest\n    },\n    ref,\n  ) => {\n    const css: CSSUIObject = {\n      gridColumn: replaceObject(colSpan, (value) =>\n        value != null ? `span ${value}/span ${value}` : undefined,\n      ),\n      gridRow: replaceObject(rowSpan, (value) =>\n        value != null ? `span ${value}/span ${value}` : undefined,\n      ),\n      gridColumnStart,\n      gridColumnEnd,\n      gridRowStart,\n      gridRowEnd,\n      gridArea,\n    }\n\n    return <ui.div ref={ref} __css={css} {...rest} />\n  },\n)\n"],"names":["Grid","forwardRef","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","gridColumn","gridRow","gridArea","gridGap","gridRowGap","gridColumnGap","gridAutoFlow","gridAutoColumns","gridAutoRows","rest","ref","css","jsx","ui","GridItem","colSpan","rowSpan","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","replaceObject","value"],"mappings":"6IA8DO,MAAMA,EAAOC,EAClB,CACE,CACE,gBAAiBC,EACjB,aAAcC,EACd,cAAeC,EACf,OAAQC,EACR,IAAKC,EACL,KAAMC,EACN,IAAKC,EACL,OAAQC,EACR,UAAWC,EACX,SAAUC,EACV,YAAaC,EACb,SAAUC,EACV,GAAGC,GAELC,IACG,CACH,MAAMC,EAAmB,CACvB,QAAS,OACT,oBAAAd,EACA,iBAAAC,EACA,kBAAAC,EACA,WAAAC,EACA,QAAAC,EACA,SAAAC,EACA,QAAAC,EACA,WAAAC,EACA,cAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,aAAAC,CAAA,EAGK,OAAAI,EAACC,EAAG,IAAH,CAAO,IAAAH,EAAU,MAAOC,EAAM,GAAGF,CAAM,CAAA,CACjD,CACF,EAmCaK,EAAWlB,EACtB,CACE,CACE,KAAMM,EACN,QAAAa,EACA,QAAAC,EACA,SAAUC,EACV,OAAQC,EACR,SAAUC,EACV,OAAQC,EACR,GAAGX,GAELC,IACG,CACH,MAAMC,EAAmB,CACvB,WAAYU,EAAcN,EAAUO,GAClCA,GAAS,KAAO,QAAQA,CAAK,SAASA,CAAK,GAAK,MAClD,EACA,QAASD,EAAcL,EAAUM,GAC/BA,GAAS,KAAO,QAAQA,CAAK,SAASA,CAAK,GAAK,MAClD,EACA,gBAAAL,EACA,cAAAC,EACA,aAAAC,EACA,WAAAC,EACA,SAAAlB,CAAA,EAGK,OAAAU,EAACC,EAAG,IAAH,CAAO,IAAAH,EAAU,MAAOC,EAAM,GAAGF,CAAM,CAAA,CACjD,CACF"}