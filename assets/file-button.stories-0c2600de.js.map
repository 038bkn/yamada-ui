{"version":3,"file":"file-button.stories-0c2600de.js","sources":["../../packages/components/file-button/src/file-button.tsx"],"sourcesContent":["import { Button, ButtonProps } from '@yamada-ui/button'\nimport { ui, forwardRef, CSSUIProps } from '@yamada-ui/core'\nimport {\n  FormControlOptions,\n  formControlProperties,\n  useFormControlProps,\n} from '@yamada-ui/form-control'\nimport {\n  assignRef,\n  cx,\n  handlerAll,\n  isFunction,\n  isNull,\n  mergeRefs,\n  omitObject,\n  pickObject,\n} from '@yamada-ui/utils'\nimport {\n  ChangeEvent,\n  ForwardedRef,\n  ReactNode,\n  useCallback,\n  useRef,\n} from 'react'\n\ntype Props = {\n  onClick: () => void\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n} & FormControlOptions\n\ntype FileButtonOptions = {\n  /**\n   * The border color when the button is invalid.\n   */\n  errorBorderColor?: CSSUIProps<'unresponsive'>['borderColor']\n  /**\n   * Function to be called when a file change event occurs.\n   */\n  onChange?: (files: File[] | null) => void\n  children?: ReactNode | ((props: Props) => ReactNode)\n  /**\n   * Ref to a reset function.\n   */\n  resetRef?: ForwardedRef<() => void>\n}\n\ntype InputProps = Partial<Pick<HTMLInputElement, 'accept' | 'multiple'>>\n\nexport type FileButtonProps = Omit<ButtonProps, 'onChange' | 'children'> &\n  InputProps &\n  FileButtonOptions &\n  FormControlOptions\n\nexport const FileButton = forwardRef<FileButtonProps, 'input'>(\n  ({ className, resetRef, as: As, children, ...props }, ref) => {\n    const { id, name, accept, multiple, form, ...rest } =\n      useFormControlProps(props)\n\n    const { disabled, readOnly, required, 'aria-invalid': isInvalid } = rest\n\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const onClick = useCallback(() => {\n      if (disabled || readOnly) return\n\n      inputRef.current?.click()\n    }, [disabled, readOnly])\n\n    const onChange = useCallback(\n      (ev: ChangeEvent<HTMLInputElement>) => {\n        const files = !isNull(ev.currentTarget.files)\n          ? Array.from(ev.currentTarget.files)\n          : null\n\n        rest.onChange?.(files)\n      },\n      [rest],\n    )\n\n    const onReset = useCallback(() => {\n      if (inputRef.current) inputRef.current.value = ''\n    }, [])\n\n    if (!isFunction(children)) {\n      const Component = As || Button\n\n      children = (\n        <Component\n          className={cx('ui-file-button', className)}\n          {...omitObject(rest, ['onChange'])}\n          onClick={handlerAll(rest.onClick, onClick)}\n        >\n          {children}\n        </Component>\n      ) as ReactNode\n    }\n\n    assignRef(resetRef, onReset)\n\n    return (\n      <>\n        <ui.input\n          ref={mergeRefs(inputRef, ref)}\n          type='file'\n          tabIndex={-1}\n          id={id}\n          name={name}\n          form={form}\n          accept={accept}\n          multiple={multiple}\n          style={{\n            border: '0px',\n            clip: 'rect(0px, 0px, 0px, 0px)',\n            height: '1px',\n            width: '1px',\n            margin: '-1px',\n            padding: '0px',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            position: 'absolute',\n          }}\n          onChange={onChange}\n          {...pickObject(rest, formControlProperties)}\n        />\n\n        {isFunction(children)\n          ? children({\n              onClick,\n              disabled,\n              readOnly,\n              required,\n              isDisabled: disabled,\n              isReadOnly: readOnly,\n              isRequired: required,\n              isInvalid,\n            })\n          : children}\n      </>\n    )\n  },\n)\n"],"names":["FileButton","forwardRef","className","resetRef","As","children","props","ref","id","name","accept","multiple","form","rest","useFormControlProps","disabled","readOnly","required","isInvalid","inputRef","useRef","onClick","useCallback","_a","onChange","ev","files","isNull","onReset","isFunction","jsx","Button","cx","omitObject","handlerAll","assignRef","jsxs","Fragment","ui","mergeRefs","pickObject","formControlProperties"],"mappings":"i7BAuDO,MAAMA,EAAaC,GACxB,CAAC,CAAE,UAAAC,EAAW,SAAAC,EAAU,GAAIC,EAAI,SAAAC,EAAU,GAAGC,CAAM,EAAGC,IAAQ,CACtD,KAAA,CAAE,GAAAC,EAAI,KAAAC,EAAM,OAAAC,EAAQ,SAAAC,EAAU,KAAAC,EAAM,GAAGC,CAC3C,EAAAC,GAAoBR,CAAK,EAErB,CAAE,SAAAS,EAAU,SAAAC,EAAU,SAAAC,EAAU,eAAgBC,EAAc,EAAAL,EAE9DM,EAAWC,SAAyB,IAAI,EAExCC,EAAUC,EAAAA,YAAY,IAAM,OAC5BP,GAAYC,IAEhBO,EAAAJ,EAAS,UAAT,MAAAI,EAAkB,OAAM,EACvB,CAACR,EAAUC,CAAQ,CAAC,EAEjBQ,GAAWF,EAAA,YACdG,GAAsC,OACrC,MAAMC,GAASC,GAAOF,EAAG,cAAc,KAAK,EAExC,KADA,MAAM,KAAKA,EAAG,cAAc,KAAK,GAGrCF,EAAAV,EAAK,WAAL,MAAAU,EAAA,KAAAV,EAAgBa,GAClB,EACA,CAACb,CAAI,CAAA,EAGDe,GAAUN,EAAAA,YAAY,IAAM,CAC5BH,EAAS,UAASA,EAAS,QAAQ,MAAQ,GACjD,EAAG,CAAE,CAAA,EAED,OAACU,EAAWxB,CAAQ,IAIpBA,EAAAyB,EAHgB1B,GAAM2B,EAGrB,CACC,UAAWC,GAAG,iBAAkB9B,CAAS,EACxC,GAAG+B,GAAWpB,EAAM,CAAC,UAAU,CAAC,EACjC,QAASqB,GAAWrB,EAAK,QAASQ,CAAO,EAExC,SAAAhB,CAAA,CAAA,GAKP8B,GAAUhC,EAAUyB,EAAO,EAIvBQ,EAAAC,EAAA,CAAA,SAAA,CAAAP,EAACQ,GAAG,MAAH,CACC,IAAKC,GAAUpB,EAAUZ,CAAG,EAC5B,KAAK,OACL,SAAU,GACV,GAAAC,EACA,KAAAC,EACA,KAAAG,EACA,OAAAF,EACA,SAAAC,EACA,MAAO,CACL,OAAQ,MACR,KAAM,2BACN,OAAQ,MACR,MAAO,MACP,OAAQ,OACR,QAAS,MACT,SAAU,SACV,WAAY,SACZ,SAAU,UACZ,EACA,SAAAa,GACC,GAAGgB,GAAW3B,EAAM4B,EAAqB,CAAA,CAC5C,EAECZ,EAAWxB,CAAQ,EAChBA,EAAS,CACP,QAAAgB,EACA,SAAAN,EACA,SAAAC,EACA,SAAAC,EACA,WAAYF,EACZ,WAAYC,EACZ,WAAYC,EACZ,UAAAC,EACD,CAAA,EACDb,CACN,CAAA,CAAA,CAEJ,CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}