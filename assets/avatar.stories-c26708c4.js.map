{"version":3,"file":"avatar.stories-c26708c4.js","sources":["../../packages/components/avatar/src/avatar-group.tsx","../../packages/components/avatar/src/avatar-badge.tsx"],"sourcesContent":["import {\n  ui,\n  HTMLUIProps,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  ThemeProps,\n} from '@yamada-ui/core'\nimport {\n  cx,\n  getValidChildren,\n  isUndefined,\n  filterUndefined,\n} from '@yamada-ui/utils'\nimport { cloneElement } from 'react'\n\ntype AvatarGroupOptions = {\n  /**\n   * The maximum number of visible avatars.\n   */\n  max?: number\n}\n\nexport type AvatarGroupProps = HTMLUIProps<'div'> &\n  ThemeProps<'Avatar'> &\n  AvatarGroupOptions\n\nexport const AvatarGroup = forwardRef<AvatarGroupProps, 'div'>((props, ref) => {\n  const [styles] = useMultiComponentStyle('Avatar', props)\n  const {\n    className,\n    max,\n    borderColor,\n    gap = '-sm',\n    borderRadius = 'full',\n    rounded = 'full',\n    children,\n    ...rest\n  } = omitThemeProps(props)\n\n  let validChildren = getValidChildren(children)\n\n  const excess = !isUndefined(max) ? validChildren.length - max : 0\n\n  validChildren = !isUndefined(max)\n    ? validChildren.slice(0, max)\n    : validChildren\n\n  validChildren = validChildren.reverse()\n\n  const cloneChildren = validChildren.map((child, i) =>\n    cloneElement(\n      child,\n      filterUndefined({\n        marginEnd: !i ? 0 : gap,\n        size: props.size,\n        borderColor: child.props.borderColor ?? borderColor,\n        borderWidth: '2px',\n      }),\n    ),\n  )\n\n  return (\n    <ui.div\n      ref={ref}\n      className={cx('ui-avatar-group', className)}\n      __css={{\n        display: 'flex',\n        flexDirection: 'row-reverse',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        ...styles.group,\n      }}\n      {...rest}\n    >\n      {excess > 0 ? (\n        <ui.span\n          className='ui-avatar-excess'\n          borderRadius={borderRadius}\n          rounded={rounded}\n          ms={gap}\n          __css={{\n            position: 'relative',\n            display: 'inline-flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            flexShrink: 0,\n            textAlign: 'center',\n            textTransform: 'uppercase',\n            fontWeight: 'medium',\n            borderWidth: '2px',\n            ...styles.excess,\n          }}\n        >\n          {`+${excess}`}\n        </ui.span>\n      ) : null}\n      {cloneChildren}\n    </ui.div>\n  )\n})\n","import { ui, forwardRef, HTMLUIProps, CSSUIObject } from '@yamada-ui/core'\nimport { cx } from '@yamada-ui/utils'\nimport { useAvatarContext } from './avatar'\n\ntype AvatarBadgeOptions = {\n  /**\n   * The placement of the badge.\n   *\n   * @default 'bottom-end'\n   */\n  placement?: 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end'\n}\n\nexport type AvatarBadgeProps = HTMLUIProps<'div'> & AvatarBadgeOptions\n\nconst placementStyles: Record<\n  'top-start' | 'top-end' | 'bottom-start' | 'bottom-end',\n  CSSUIObject\n> = {\n  'top-start': {\n    top: '0',\n    insetStart: '0',\n    transform: 'translate(-25%, -25%)',\n  },\n  'top-end': {\n    top: '0',\n    insetEnd: '0',\n    transform: 'translate(25%, -25%)',\n  },\n  'bottom-start': {\n    bottom: '0',\n    insetStart: '0',\n    transform: 'translate(-25%, 25%)',\n  },\n  'bottom-end': {\n    bottom: '0',\n    insetEnd: '0',\n    transform: 'translate(25%, 25%)',\n  },\n}\n\nexport const AvatarBadge = forwardRef<AvatarBadgeProps, 'div'>(\n  ({ className, boxSize = '1em', placement = 'bottom-end', ...rest }, ref) => {\n    const styles = useAvatarContext()\n\n    const css: CSSUIObject = {\n      position: 'absolute',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      ...placementStyles[placement],\n      ...styles.badge,\n    }\n\n    return (\n      <ui.div\n        ref={ref}\n        className={cx('ui-avatar-badge', className)}\n        boxSize={boxSize}\n        __css={css}\n        {...rest}\n      />\n    )\n  },\n)\n"],"names":["AvatarGroup","forwardRef","props","ref","styles","useMultiComponentStyle","className","max","borderColor","gap","borderRadius","rounded","children","rest","omitThemeProps","validChildren","getValidChildren","excess","isUndefined","cloneChildren","child","i","cloneElement","filterUndefined","jsxs","ui","cx","jsx","placementStyles","AvatarBadge","boxSize","placement","useAvatarContext","css"],"mappings":"2iBA2BO,MAAMA,EAAcC,EAAoC,CAACC,EAAOC,IAAQ,CAC7E,KAAM,CAACC,CAAM,EAAIC,GAAuB,SAAUH,CAAK,EACjD,CACJ,UAAAI,EACA,IAAAC,EACA,YAAAC,EACA,IAAAC,EAAM,MACN,aAAAC,EAAe,OACf,QAAAC,EAAU,OACV,SAAAC,EACA,GAAGC,CAAA,EACDC,GAAeZ,CAAK,EAEpB,IAAAa,EAAgBC,EAAiBJ,CAAQ,EAE7C,MAAMK,EAAUC,EAAYX,CAAG,EAAiC,EAA7BQ,EAAc,OAASR,EAE1CQ,EAACG,EAAYX,CAAG,EAE5BQ,EADAA,EAAc,MAAM,EAAGR,CAAG,EAG9BQ,EAAgBA,EAAc,UAE9B,MAAMI,EAAgBJ,EAAc,IAAI,CAACK,EAAOC,IAC9CC,GAAA,aACEF,EACAG,GAAgB,CACd,UAAYF,EAAQZ,EAAJ,EAChB,KAAMP,EAAM,KACZ,YAAakB,EAAM,MAAM,aAAeZ,EACxC,YAAa,KAAA,CACd,CACH,CAAA,EAIA,OAAAgB,EAACC,EAAG,IAAH,CACC,IAAAtB,EACA,UAAWuB,EAAG,kBAAmBpB,CAAS,EAC1C,MAAO,CACL,QAAS,OACT,cAAe,cACf,eAAgB,WAChB,WAAY,SACZ,GAAGF,EAAO,KACZ,EACC,GAAGS,EAEH,SAAA,CAAAI,EAAS,EACRU,EAACF,EAAG,KAAH,CACC,UAAU,mBACV,aAAAf,EACA,QAAAC,EACA,GAAIF,EACJ,MAAO,CACL,SAAU,WACV,QAAS,cACT,eAAgB,SAChB,WAAY,SACZ,WAAY,EACZ,UAAW,SACX,cAAe,YACf,WAAY,SACZ,YAAa,MACb,GAAGL,EAAO,MACZ,EAEC,aAAIa,CAAM,EAAA,CAAA,EAEX,KACHE,CAAA,CAAA,CAAA,CAGP,CAAC,ECrFKS,GAGF,CACF,YAAa,CACX,IAAK,IACL,WAAY,IACZ,UAAW,uBACb,EACA,UAAW,CACT,IAAK,IACL,SAAU,IACV,UAAW,sBACb,EACA,eAAgB,CACd,OAAQ,IACR,WAAY,IACZ,UAAW,sBACb,EACA,aAAc,CACZ,OAAQ,IACR,SAAU,IACV,UAAW,qBACb,CACF,EAEaC,GAAc5B,EACzB,CAAC,CAAE,UAAAK,EAAW,QAAAwB,EAAU,MAAO,UAAAC,EAAY,aAAc,GAAGlB,CAAK,EAAGV,IAAQ,CAC1E,MAAMC,EAAS4B,IAETC,EAAmB,CACvB,SAAU,WACV,QAAS,OACT,eAAgB,SAChB,WAAY,SACZ,GAAGL,GAAgBG,CAAS,EAC5B,GAAG3B,EAAO,KAAA,EAIV,OAAAuB,EAACF,EAAG,IAAH,CACC,IAAAtB,EACA,UAAWuB,EAAG,kBAAmBpB,CAAS,EAC1C,QAAAwB,EACA,MAAOG,EACN,GAAGpB,CAAA,CAAA,CAGV,CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}