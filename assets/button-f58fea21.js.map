{"version":3,"file":"button-f58fea21.js","sources":["../../packages/components/button/src/button-group.tsx","../../packages/components/button/src/button.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  CSSUIProps,\n  HTMLUIProps,\n  ThemeProps,\n} from '@yamada-ui/core'\nimport { createContext, cx, dataAttr } from '@yamada-ui/utils'\nimport { useMemo } from 'react'\n\ntype ButtonGroupOptions = {\n  /**\n   * The CSS `flex-direction` property.\n   */\n  direction?: CSSUIProps['flexDirection']\n  /**\n   * If `true`, the borderRadius of button that are direct children will be altered to look flushed together.\n   *\n   * @default false\n   */\n  isAttached?: boolean\n  /**\n   * If `true`, all wrapped button will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport type ButtonGroupProps = HTMLUIProps<'div'> &\n  ThemeProps<'Button'> &\n  ButtonGroupOptions\n\ntype ButtonGroupContext = ThemeProps<'Button'> & {\n  isDisabled?: boolean\n}\n\nconst [ButtonGroupProvider, useButtonGroup] = createContext<ButtonGroupContext>(\n  {\n    strict: false,\n    name: 'ButtonGroupContext',\n  },\n)\n\nexport { useButtonGroup }\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, 'div'>(\n  (\n    {\n      className,\n      size,\n      variant,\n      direction: flexDirection,\n      isAttached,\n      isDisabled,\n      gap,\n      columnGap,\n      rowGap,\n      ...rest\n    },\n    ref,\n  ) => {\n    const isColumn =\n      flexDirection === 'column' || flexDirection === 'column-reverse'\n\n    const css = {\n      display: 'inline-flex',\n      flexDirection,\n    }\n\n    const context: ButtonGroupContext = useMemo(\n      () => ({ size, variant, isDisabled }),\n      [size, variant, isDisabled],\n    )\n\n    if (isAttached) {\n      Object.assign(css, {\n        '> *:first-of-type:not(:last-of-type)': isColumn\n          ? { borderBottomRadius: 0, marginBlockEnd: '-1px' }\n          : { borderRightRadius: 0, marginInlineEnd: '-1px' },\n        '> *:not(:first-of-type):not(:last-of-type)': isColumn\n          ? { borderRadius: 0, marginBlockStart: '-1px' }\n          : { borderRadius: 0, marginInlineEnd: '-1px' },\n        '> *:not(:first-of-type):last-of-type': isColumn\n          ? { borderTopRadius: 0, marginBlockStart: '-1px' }\n          : { borderLeftRadius: 0 },\n      })\n    } else {\n      Object.assign(css, {\n        gap,\n        columnGap,\n        rowGap,\n      })\n    }\n\n    return (\n      <ButtonGroupProvider value={context}>\n        <ui.div\n          ref={ref}\n          role='group'\n          className={cx('ui-button-group', className)}\n          data-attached={dataAttr(isAttached)}\n          __css={css}\n          {...rest}\n        />\n      </ButtonGroupProvider>\n    )\n  },\n)\n","import {\n  ui,\n  forwardRef,\n  HTMLUIProps,\n  ThemeProps,\n  CSSUIObject,\n  useComponentStyle,\n  omitThemeProps,\n} from '@yamada-ui/core'\nimport { Loading as LoadingIcon, LoadingProps } from '@yamada-ui/loading'\nimport { cx, useMergeRefs, merge, dataAttr } from '@yamada-ui/utils'\nimport {\n  ElementType,\n  FC,\n  ReactElement,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport { useButtonGroup } from './button-group'\n\ntype ButtonOptions = {\n  /**\n   * The type of button. Accepts `button`, `reset`, or `submit`.\n   *\n   * @default 'button'\n   */\n  type?: 'button' | 'reset' | 'submit'\n  /**\n   * If `true`, the loading state of the button is represented.\n   *\n   * @default false\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button is represented as active.\n   *\n   * @default false\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button is disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * The icon to display at the left side of the button.\n   */\n  leftIcon?: ReactElement\n  /**\n   * The icon to display at the right side of the button.\n   */\n  rightIcon?: ReactElement\n  /**\n   * The icon to display when the button is loading.\n   */\n  loadingIcon?: ReactElement | LoadingProps['variant']\n  /**\n   * The text to display when the button is loading.\n   */\n  loadingText?: string\n  /**\n   * The placement of the loading indicator. Accepts `start` or `end`.\n   *\n   * @default 'start'\n   */\n  loadingPlacement?: 'start' | 'end'\n}\n\nexport type ButtonProps = HTMLUIProps<'button'> &\n  ThemeProps<'Button'> &\n  ButtonOptions\n\nexport const Button = forwardRef<ButtonProps, 'button'>(\n  ({ children, ...props }, customRef) => {\n    const group = useButtonGroup()\n    const [styles, mergedProps] = useComponentStyle('Button', {\n      ...group,\n      ...props,\n    })\n    const {\n      className,\n      as,\n      type,\n      isLoading,\n      isActive,\n      isDisabled = group?.isDisabled,\n      leftIcon,\n      rightIcon,\n      loadingIcon,\n      loadingText,\n      loadingPlacement = 'start',\n      __css,\n      ...rest\n    } = omitThemeProps(mergedProps)\n\n    const { ref: buttonRef, type: defaultType } = useButtonType(as)\n    const ref = useMergeRefs(customRef, buttonRef)\n\n    const css: CSSUIObject = useMemo(() => {\n      const _focus =\n        '_focus' in styles ? merge(styles._focus ?? {}, { zIndex: 1 }) : {}\n\n      return {\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        gap: '2',\n        appearance: 'none',\n        userSelect: 'none',\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        verticalAlign: 'middle',\n        outline: 'none',\n        ...styles,\n        ...__css,\n        ...(!!group ? { _focus } : {}),\n      }\n    }, [styles, __css, group])\n\n    const contentProps = {\n      leftIcon,\n      rightIcon,\n      children,\n    }\n\n    const loadingProps = {\n      loadingIcon,\n      loadingText,\n    }\n\n    return (\n      <ui.button\n        ref={ref}\n        as={as}\n        className={cx('ui-button', className)}\n        type={type ?? defaultType}\n        disabled={isDisabled || isLoading}\n        data-active={dataAttr(isActive)}\n        data-loading={dataAttr(isLoading)}\n        __css={css}\n        {...rest}\n      >\n        {isLoading && loadingPlacement === 'start' ? (\n          <Loading className='ui-button-loading--start' {...loadingProps} />\n        ) : null}\n\n        {isLoading ? (\n          loadingText || (\n            <ui.span opacity={0}>\n              <Content {...contentProps} />\n            </ui.span>\n          )\n        ) : (\n          <Content {...contentProps} />\n        )}\n\n        {isLoading && loadingPlacement === 'end' ? (\n          <Loading className='ui-button-loading--end' {...loadingProps} />\n        ) : null}\n      </ui.button>\n    )\n  },\n)\n\nconst Loading: FC<\n  Pick<ButtonProps, 'className' | 'loadingIcon' | 'loadingText'>\n> = ({ className, loadingIcon, loadingText }) => {\n  const css = useMemo(\n    (): CSSUIObject => ({\n      display: 'flex',\n      alignItems: 'center',\n      position: loadingText ? 'relative' : 'absolute',\n      fontSize: '1em',\n      lineHeight: 'normal',\n    }),\n    [loadingText],\n  )\n\n  const element = useMemo(() => {\n    if (typeof loadingIcon === 'string') {\n      return <LoadingIcon color='current' variant={loadingIcon} />\n    } else {\n      return loadingIcon || <LoadingIcon color='current' />\n    }\n  }, [loadingIcon])\n\n  return (\n    <ui.div className={cx('ui-button-loading', className)} __css={css}>\n      {element}\n    </ui.div>\n  )\n}\n\nconst Content: FC<Pick<ButtonProps, 'leftIcon' | 'rightIcon' | 'children'>> = ({\n  leftIcon,\n  rightIcon,\n  children,\n}) => {\n  return (\n    <>\n      {leftIcon ? <Icon>{leftIcon}</Icon> : null}\n      {children}\n      {rightIcon ? <Icon>{rightIcon}</Icon> : null}\n    </>\n  )\n}\n\nconst Icon: FC<HTMLUIProps<'span'>> = ({ children, className, ...rest }) => {\n  return (\n    <ui.span\n      className={cx('ui-button-icon', className)}\n      display='inline-flex'\n      alignSelf='center'\n      flexShrink={0}\n      aria-hidden={true}\n      {...rest}\n    >\n      {children}\n    </ui.span>\n  )\n}\n\nexport const useButtonType = (value?: ElementType) => {\n  const [isButton, setIsButton] = useState(!value)\n\n  const ref = useCallback((node: HTMLElement | null) => {\n    if (node) setIsButton(node.tagName === 'BUTTON')\n  }, [])\n\n  const type = isButton ? 'button' : undefined\n\n  return { ref, type } as const\n}\n"],"names":["ButtonGroupProvider","useButtonGroup","createContext","ButtonGroup","forwardRef","className","size","variant","flexDirection","isAttached","isDisabled","gap","columnGap","rowGap","rest","ref","isColumn","css","context","useMemo","jsx","ui","cx","dataAttr","Button","children","props","customRef","group","styles","mergedProps","useComponentStyle","as","type","isLoading","isActive","leftIcon","rightIcon","loadingIcon","loadingText","loadingPlacement","__css","omitThemeProps","buttonRef","defaultType","useButtonType","useMergeRefs","_focus","merge","contentProps","loadingProps","jsxs","Loading","Content","element","LoadingIcon","Fragment","Icon","value","isButton","setIsButton","useState","useCallback","node"],"mappings":"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"}