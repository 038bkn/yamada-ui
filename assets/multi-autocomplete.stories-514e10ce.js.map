{"version":3,"file":"multi-autocomplete.stories-514e10ce.js","sources":["../../packages/components/autocomplete/src/multi-autocomplete.tsx"],"sourcesContent":["import type { CSSUIObject, HTMLUIProps, ThemeProps } from \"@yamada-ui/core\"\nimport {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n} from \"@yamada-ui/core\"\nimport { Popover, PopoverTrigger } from \"@yamada-ui/popover\"\nimport { cx, handlerAll } from \"@yamada-ui/utils\"\nimport type { CSSProperties, FC, MouseEventHandler, ReactElement } from \"react\"\nimport { cloneElement, useMemo } from \"react\"\nimport type { AutocompleteIconProps } from \"./autocomplete-icon\"\nimport { AutocompleteClearIcon, AutocompleteIcon } from \"./autocomplete-icon\"\nimport type { AutocompleteListProps } from \"./autocomplete-list\"\nimport { AutocompleteList } from \"./autocomplete-list\"\nimport type { UseAutocompleteProps } from \"./use-autocomplete\"\nimport {\n  AutocompleteProvider,\n  useAutocomplete,\n  AutocompleteDescendantsContextProvider,\n  useAutocompleteContext,\n  useAutocompleteInput,\n} from \"./use-autocomplete\"\nimport { AutocompleteCreate, AutocompleteEmpty } from \"./\"\n\ntype MultiAutocompleteOptions = {\n  /**\n   * The visual separator between each value.\n   *\n   * @default ','\n   */\n  separator?: string\n  /**\n   * The custom display value to use.\n   */\n  component?: FC<{\n    value: string | number\n    label: string\n    index: number\n    onRemove: MouseEventHandler<HTMLElement>\n  }>\n  /**\n   * If `true`, keep the placeholder.\n   *\n   * @default false\n   */\n  keepPlaceholder?: boolean\n  /**\n   * If `true`, display the select clear icon.\n   *\n   * @default true\n   */\n  isClearable?: boolean\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: string\n  /**\n   * Props for multi autocomplete container element.\n   */\n  containerProps?: Omit<HTMLUIProps<\"div\">, \"children\">\n  /**\n   * Props for multi autocomplete list element.\n   */\n  listProps?: Omit<AutocompleteListProps, \"children\">\n  /**\n   * Props for multi autocomplete input element.\n   */\n  inputProps?: HTMLUIProps<\"input\">\n  /**\n   * Props for multi autocomplete icon element.\n   */\n  iconProps?: AutocompleteIconProps\n  /**\n   * Props for multi autocomplete clear icon element.\n   */\n  clearIconProps?: AutocompleteIconProps\n}\n\nexport type MultiAutocompleteProps = ThemeProps<\"Select\"> &\n  UseAutocompleteProps<string[]> &\n  MultiAutocompleteOptions\n\nexport const MultiAutocomplete = forwardRef<MultiAutocompleteProps, \"div\">(\n  (props, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\n      \"MultiAutocomplete\",\n      props,\n    )\n    let {\n      className,\n      defaultValue = [],\n      component,\n      separator,\n      isClearable = true,\n      color,\n      h,\n      height,\n      minH,\n      minHeight,\n      closeOnSelect = false,\n      keepPlaceholder = false,\n      containerProps,\n      listProps,\n      inputProps,\n      iconProps,\n      clearIconProps,\n      children,\n      ...computedProps\n    } = omitThemeProps(mergedProps)\n\n    const {\n      value,\n      descendants,\n      formControlProps,\n      getPopoverProps,\n      getContainerProps,\n      getFieldProps,\n      allowCreate,\n      isEmpty,\n      inputValue,\n      computedChildren,\n      onClear,\n      ...rest\n    } = useAutocomplete<string[]>({\n      ...computedProps,\n      defaultValue,\n      closeOnSelect,\n      children,\n    })\n\n    h ??= height\n    minH ??= minHeight\n\n    const css: CSSUIObject = {\n      w: \"100%\",\n      h: \"fit-content\",\n      color,\n      ...styles.container,\n    }\n\n    return (\n      <AutocompleteDescendantsContextProvider value={descendants}>\n        <AutocompleteProvider\n          value={{\n            ...rest,\n            value,\n            formControlProps,\n            inputValue,\n            allowCreate,\n            isEmpty,\n            styles,\n          }}\n        >\n          <Popover {...getPopoverProps()}>\n            <ui.div\n              className={cx(\"ui-multi-autocomplete\", className)}\n              __css={css}\n              {...getContainerProps(containerProps)}\n            >\n              <ui.div\n                className=\"ui-multi-autocomplete__inner\"\n                __css={{ position: \"relative\", ...styles.inner }}\n              >\n                <MultiAutocompleteField\n                  component={component}\n                  separator={separator}\n                  keepPlaceholder={keepPlaceholder}\n                  h={h}\n                  minH={minH}\n                  inputProps={inputProps}\n                  {...getFieldProps({}, ref)}\n                />\n\n                {isClearable && value.length ? (\n                  <AutocompleteClearIcon\n                    {...clearIconProps}\n                    onClick={handlerAll(clearIconProps?.onClick, onClear)}\n                    {...formControlProps}\n                  />\n                ) : (\n                  <AutocompleteIcon {...iconProps} {...formControlProps} />\n                )}\n              </ui.div>\n\n              {!isEmpty ? (\n                <AutocompleteList {...listProps}>\n                  {allowCreate ? <AutocompleteCreate /> : <AutocompleteEmpty />}\n\n                  {children ?? computedChildren}\n                </AutocompleteList>\n              ) : (\n                <AutocompleteList {...listProps}>\n                  {allowCreate && inputValue ? (\n                    <AutocompleteCreate />\n                  ) : (\n                    <AutocompleteEmpty />\n                  )}\n                </AutocompleteList>\n              )}\n            </ui.div>\n          </Popover>\n        </AutocompleteProvider>\n      </AutocompleteDescendantsContextProvider>\n    )\n  },\n)\n\ntype MultiAutocompleteFieldProps = HTMLUIProps<\"div\"> &\n  Pick<\n    MultiAutocompleteProps,\n    \"component\" | \"separator\" | \"keepPlaceholder\" | \"inputProps\"\n  >\n\nconst MultiAutocompleteField = forwardRef<MultiAutocompleteFieldProps, \"div\">(\n  (\n    {\n      className,\n      component,\n      separator = \",\",\n      keepPlaceholder,\n      h,\n      minH,\n      placeholder,\n      inputProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const { value, label, inputValue, onChange, isOpen, inputRef, styles } =\n      useAutocompleteContext()\n\n    const { getInputProps } = useAutocompleteInput()\n\n    const cloneChildren = useMemo(() => {\n      if (!label?.length) return null\n\n      if (component) {\n        return (label as string[]).map((label, index) => {\n          const onRemove: MouseEventHandler<HTMLElement> = (e) => {\n            e.stopPropagation()\n\n            onChange(value[index])\n\n            if (inputRef.current) inputRef.current.focus()\n          }\n\n          const el = component({\n            value: value[index],\n            label,\n            index,\n            onRemove,\n          })\n\n          const style: CSSProperties = {\n            cursor: \"default\",\n            marginBlockStart: \"0.125rem\",\n            marginBlockEnd: \"0.125rem\",\n            marginInlineEnd: \"0.25rem\",\n          }\n\n          return el ? cloneElement(el as ReactElement, { style }) : null\n        })\n      } else {\n        return (label as string[]).map((value, index) => {\n          const isLast = label.length === index + 1\n\n          return (\n            <ui.span key={index} display=\"inline-block\" me=\"0.25rem\">\n              {value}\n              {!isLast || isOpen ? separator : null}\n            </ui.span>\n          )\n        })\n      }\n    }, [label, component, value, onChange, isOpen, inputRef, separator])\n\n    const css: CSSUIObject = {\n      paddingEnd: \"2rem\",\n      h,\n      minH,\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      alignItems: \"center\",\n      ...styles.field,\n      cursor: \"text\",\n    }\n\n    return (\n      <PopoverTrigger>\n        <ui.div\n          className={cx(\"ui-multi-autocomplete__field\", className)}\n          __css={css}\n          py={label?.length && component ? \"0.125rem\" : undefined}\n          {...rest}\n        >\n          {cloneChildren}\n\n          <ui.input\n            className=\"ui-multi-autocomplete__field__input\"\n            display=\"inline-block\"\n            flex=\"1\"\n            overflow=\"hidden\"\n            marginBlockStart=\"0.125rem\"\n            marginBlockEnd=\"0.125rem\"\n            placeholder={\n              !label || (keepPlaceholder && isOpen) ? placeholder : undefined\n            }\n            {...getInputProps({ ...inputProps, value: inputValue ?? \"\" }, ref)}\n          />\n        </ui.div>\n      </PopoverTrigger>\n    )\n  },\n)\n"],"names":["MultiAutocomplete","forwardRef","props","ref","styles","mergedProps","useMultiComponentStyle","className","defaultValue","component","separator","isClearable","color","h","height","minH","minHeight","closeOnSelect","keepPlaceholder","containerProps","listProps","inputProps","iconProps","clearIconProps","children","computedProps","omitThemeProps","value","descendants","formControlProps","getPopoverProps","getContainerProps","getFieldProps","allowCreate","isEmpty","inputValue","computedChildren","onClear","rest","useAutocomplete","css","jsx","AutocompleteDescendantsContextProvider","AutocompleteProvider","Popover","jsxs","ui","cx","MultiAutocompleteField","AutocompleteClearIcon","handlerAll","AutocompleteIcon","AutocompleteList","AutocompleteCreate","AutocompleteEmpty","placeholder","label","onChange","isOpen","inputRef","useAutocompleteContext","getInputProps","useAutocompleteInput","cloneChildren","useMemo","index","onRemove","e","el","style","cloneElement","isLast","PopoverTrigger"],"mappings":"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}