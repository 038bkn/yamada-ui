{"version":3,"file":"input-eda2fdb1.js","sources":["../../packages/components/input/src/input.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  omitThemeProps,\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n  useMultiComponentStyle,\n  CSSUIProps,\n} from '@yamada-ui/core'\nimport {\n  useFormControlProps,\n  FormControlOptions,\n} from '@yamada-ui/form-control'\nimport { cx } from '@yamada-ui/utils'\n\ntype InputOptions = {\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: CSSUIProps<'unresponsive'>['borderColor']\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: CSSUIProps<'unresponsive'>['borderColor']\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\nexport type InputProps = Omit<\n  HTMLUIProps<'input'>,\n  'disabled' | 'required' | 'readOnly' | 'size'\n> &\n  ThemeProps<'Input'> &\n  InputOptions &\n  FormControlOptions\n\nexport const Input = forwardRef<InputProps, 'input'>((props, ref) => {\n  const [styles, mergedProps] = useMultiComponentStyle('Input', props)\n  let { className, htmlSize, ...rest } = omitThemeProps(mergedProps)\n\n  rest = useFormControlProps(rest)\n\n  const css: CSSUIObject = { ...styles.field }\n\n  return (\n    <ui.input\n      ref={ref}\n      className={cx('ui-input', className)}\n      size={htmlSize}\n      __css={css}\n      {...rest}\n    />\n  )\n})\n"],"names":["Input","forwardRef","props","ref","styles","mergedProps","useMultiComponentStyle","className","htmlSize","rest","omitThemeProps","useFormControlProps","css","jsx","ui","cx"],"mappings":"mSAuCO,MAAMA,EAAQC,EAAgC,CAACC,EAAOC,IAAQ,CACnE,KAAM,CAACC,EAAQC,CAAW,EAAIC,EAAuB,QAASJ,CAAK,EACnE,GAAI,CAAE,UAAAK,EAAW,SAAAC,EAAU,GAAGC,CAAK,EAAIC,EAAeL,CAAW,EAEjEI,EAAOE,EAAoBF,CAAI,EAE/B,MAAMG,EAAmB,CAAE,GAAGR,EAAO,KAAM,EAGzC,OAAAS,EAACC,EAAG,MAAH,CACC,IAAAX,EACA,UAAWY,EAAG,WAAYR,CAAS,EACnC,KAAMC,EACN,MAAOI,EACN,GAAGH,CAAA,CAAA,CAGV,CAAC"}