{"version":3,"file":"checkbox-922cad00.js","sources":["../../packages/components/checkbox/src/checkbox-group.tsx","../../packages/components/checkbox/src/checkbox.tsx"],"sourcesContent":["import { ComponentArgs, ThemeProps } from '@yamada-ui/core'\nimport { FormControlOptions, useFormControl } from '@yamada-ui/form-control'\nimport { Flex, FlexProps } from '@yamada-ui/layouts'\nimport { useControllableState } from '@yamada-ui/use-controllable-state'\nimport {\n  createContext,\n  cx,\n  isObject,\n  omitObject,\n  useCallbackRef,\n  PropGetter,\n  DOMAttributes,\n} from '@yamada-ui/utils'\nimport { ChangeEvent, ForwardedRef, forwardRef, Ref, useCallback } from 'react'\n\nconst isEvent = (value: any): value is { target: HTMLInputElement } =>\n  value && isObject(value) && isObject(value.target)\n\nexport type UseCheckboxGroupProps<Y extends string | number = string> = {\n  /**\n   * The value of the checkbox group.\n   */\n  value?: Y[]\n  /**\n   * The initial value of the checkbox group.\n   */\n  defaultValue?: Y[]\n  /**\n   * The callback fired when any children checkbox is checked or unchecked.\n   */\n  onChange?: (value: Y[]) => void\n  /**\n   * If `true`, input elements will receive `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs.\n   *\n   * @default false\n   */\n  isNative?: boolean\n}\n\nexport const useCheckboxGroup = <Y extends string | number = string>({\n  isNative,\n  ...props\n}: UseCheckboxGroupProps<Y>) => {\n  props.onChange = useCallbackRef(props.onChange)\n\n  const [value, setValue] = useControllableState({\n    value: props.value,\n    defaultValue: props.defaultValue || [],\n    onChange: props.onChange,\n  })\n\n  const onChange = useCallback(\n    (evOrValue: ChangeEvent<HTMLInputElement> | Y) => {\n      const isChecked = isEvent(evOrValue)\n        ? evOrValue.target.checked\n        : !value.includes(evOrValue)\n\n      const selectedValue = (\n        isEvent(evOrValue) ? evOrValue.target.value : evOrValue\n      ) as Y\n\n      const nextValue = isChecked\n        ? [...value, selectedValue]\n        : value.filter((v) => String(v) !== String(selectedValue))\n\n      setValue(nextValue)\n    },\n    [value, setValue],\n  )\n\n  const getCheckboxProps: PropGetter<\n    DOMAttributes<HTMLInputElement> & { isChecked?: boolean },\n    Omit<DOMAttributes<HTMLInputElement>, 'onChange'> & {\n      onChange: (ev: ChangeEvent<HTMLInputElement> | Y) => void\n    }\n  > = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      [isNative ? 'checked' : 'isChecked']: value.some(\n        (val) => String(props.value) === String(val),\n      ),\n      onChange,\n    }),\n    [onChange, isNative, value],\n  )\n\n  return { value, setValue, onChange, getCheckboxProps }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n\nexport type CheckboxGroupProps<Y extends string | number = string> =\n  ThemeProps<'Checkbox'> &\n    Omit<FlexProps, 'onChange'> &\n    UseCheckboxGroupProps<Y> &\n    FormControlOptions\n\ntype CheckboxContext = ThemeProps<'Checkbox'> &\n  FormControlOptions & {\n    value: (string | number)[]\n    onChange: (\n      evOrValue: ChangeEvent<HTMLInputElement> | string | number,\n    ) => void\n  }\n\nconst [CheckboxGroupProvider, useCheckboxGroupContext] = createContext<\n  CheckboxContext | undefined\n>({\n  strict: false,\n  name: 'CheckboxGroupContext',\n})\n\nexport { useCheckboxGroupContext }\n\nexport const CheckboxGroup = forwardRef(\n  <Y extends string | number = string>(\n    {\n      className,\n      size,\n      variant,\n      colorScheme,\n      children,\n      direction = 'column',\n      gap,\n      ...props\n    }: CheckboxGroupProps<Y>,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) => {\n    const { value, onChange } = useCheckboxGroup<Y>(props)\n    const { isRequired, isReadOnly, isDisabled, isInvalid } =\n      useFormControl(props)\n\n    return (\n      <CheckboxGroupProvider\n        value={\n          {\n            size,\n            variant,\n            colorScheme,\n            isRequired,\n            isReadOnly,\n            isDisabled,\n            isInvalid,\n            value,\n            onChange,\n          } as CheckboxContext\n        }\n      >\n        <Flex\n          ref={ref}\n          className={cx('ui-checkbox-group', className)}\n          role='group'\n          direction={direction}\n          gap={gap ?? (direction === 'row' ? '1rem' : undefined)}\n          {...omitObject(props, [\n            'value',\n            'defaultValue',\n            'onChange',\n            'isInvalid',\n            'isDisabled',\n            'isRequired',\n            'isReadOnly',\n          ])}\n        >\n          {children}\n        </Flex>\n      </CheckboxGroupProvider>\n    )\n  },\n) as {\n  <Y extends string | number = string>(\n    props: CheckboxGroupProps<Y> & { ref?: Ref<HTMLDivElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nCheckboxGroup.displayName = 'CheckboxGroup'\n","import {\n  ui,\n  useMultiComponentStyle,\n  omitThemeProps,\n  HTMLUIProps,\n  ThemeProps,\n  ComponentArgs,\n} from '@yamada-ui/core'\nimport {\n  FormControlOptions,\n  useFormControl,\n  useFormControlProps,\n  formControlProperties,\n} from '@yamada-ui/form-control'\nimport { AnimatePresence, motion, SVGMotionProps } from '@yamada-ui/motion'\nimport { trackFocusVisible } from '@yamada-ui/use-focus-visible'\nimport {\n  cx,\n  omitObject,\n  pickObject,\n  useCallbackRef,\n  useSafeLayoutEffect,\n  useUpdateEffect,\n  PropGetter,\n  handlerAll,\n  dataAttr,\n  mergeRefs,\n  funcAll,\n} from '@yamada-ui/utils'\nimport {\n  ChangeEvent,\n  ChangeEventHandler,\n  cloneElement,\n  CSSProperties,\n  FC,\n  FocusEventHandler,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  ReactElement,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  forwardRef,\n  ForwardedRef,\n  Ref,\n} from 'react'\nimport { useCheckboxGroupContext } from './checkbox-group'\n\nexport type UseCheckboxProps<Y extends string | number = string> =\n  FormControlOptions & {\n    /**\n     * id assigned to input.\n     */\n    id?: string\n    /**\n     * The HTML `name` attribute used for forms.\n     */\n    name?: string\n    /**\n     * The value to be used in the checkbox input.\n     */\n    value?: Y\n    /**\n     * If `true`, the checkbox will be initially checked.\n     *\n     * @default false\n     */\n    defaultChecked?: boolean\n    /**\n     * If `true`, the checkbox will be checked.\n     *\n     * @default false\n     */\n    isChecked?: boolean\n    /**\n     * If `true`, the checkbox will be indeterminate.\n     *\n     * @default false\n     */\n    isIndeterminate?: boolean\n    /**\n     * The callback invoked when the checked state changes.\n     */\n    onChange?: ChangeEventHandler<HTMLInputElement>\n    /**\n     * The callback invoked when the checkbox is focused.\n     */\n    onFocus?: FocusEventHandler<HTMLInputElement>\n    /**\n     * The callback invoked when the checkbox is blurred.\n     */\n    onBlur?: FocusEventHandler<HTMLInputElement>\n    /**\n     * The tab-index property of the underlying input element.\n     */\n    tabIndex?: number\n  }\n\nexport const useCheckbox = <Y extends string | number = string>(\n  props: UseCheckboxProps<Y>,\n) => {\n  const {\n    id,\n    name,\n    value,\n    defaultChecked,\n    tabIndex,\n    required,\n    disabled,\n    readOnly,\n    isIndeterminate,\n    ...rest\n  } = useFormControlProps(props)\n\n  const [isFocusVisible, setIsFocusVisible] = useState<boolean>(false)\n  const [isFocused, setFocused] = useState<boolean>(false)\n  const [isHovered, setHovered] = useState<boolean>(false)\n  const [isActive, setActive] = useState<boolean>(false)\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [isLabel, setIsLabel] = useState<boolean>(true)\n\n  const [isChecked, setIsChecked] = useState<boolean>(!!defaultChecked)\n\n  const isControlled = props.isChecked !== undefined\n  const checked = isControlled ? (props.isChecked as boolean) : isChecked\n\n  const onChange = useCallbackRef(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if (readOnly || disabled) {\n        ev.preventDefault()\n\n        return\n      }\n\n      if (!isControlled)\n        setIsChecked(!checked || isIndeterminate ? true : ev.target.checked)\n\n      rest.onChange?.(ev)\n    },\n    [readOnly, disabled, isControlled, checked, isIndeterminate],\n  )\n  const onBlur = useCallbackRef(rest.onBlur)\n  const onFocus = useCallbackRef(rest.onFocus)\n\n  const onKeyDown = useCallback(\n    ({ key }: KeyboardEvent<Element>) => {\n      if (key === ' ') setActive(true)\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    ({ key }: KeyboardEvent<Element>) => {\n      if (key === ' ') setActive(false)\n    },\n    [setActive],\n  )\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current)\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n  }, [isIndeterminate])\n\n  useUpdateEffect(() => {\n    if (disabled) setFocused(false)\n  }, [disabled, setFocused])\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current?.form) return\n\n    inputRef.current.form.onreset = () => setIsChecked(!!defaultChecked)\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n\n    if (inputRef.current.checked !== checked)\n      setIsChecked(inputRef.current.checked)\n  }, [inputRef.current])\n\n  const getContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...pickObject(rest, formControlProperties),\n      ...props,\n      ref: mergeRefs(ref, (el: HTMLElement | undefined) => {\n        if (el) setIsLabel(el.tagName === 'LABEL')\n      }),\n      'data-checked': dataAttr(checked),\n      onClick: handlerAll(props.onClick, () => {\n        if (isLabel) return\n\n        inputRef.current?.click()\n\n        requestAnimationFrame(() => inputRef.current?.focus())\n      }),\n    }),\n    [checked, isLabel, rest],\n  )\n\n  const getIconProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...pickObject(rest, formControlProperties),\n      ...props,\n      ref,\n      'data-active': dataAttr(isActive),\n      'data-hover': dataAttr(isHovered),\n      'data-checked': dataAttr(checked),\n      'data-focus': dataAttr(isFocused),\n      'data-focus-visible': dataAttr(isFocused && isFocusVisible),\n      'data-indeterminate': dataAttr(isIndeterminate),\n      'aria-hidden': true,\n      onMouseDown: handlerAll(props.onMouseDown, (ev: React.MouseEvent) => {\n        if (isFocused) ev.preventDefault()\n\n        setActive(true)\n      }),\n      onMouseUp: handlerAll(props.onMouseUp, () => setActive(false)),\n      onMouseEnter: handlerAll(props.onMouseEnter, () => setHovered(true)),\n      onMouseLeave: handlerAll(props.onMouseLeave, () => setHovered(false)),\n    }),\n    [\n      isActive,\n      checked,\n      isFocused,\n      isHovered,\n      isFocusVisible,\n      isIndeterminate,\n      rest,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...pickObject(rest, formControlProperties),\n      ...props,\n      ref: mergeRefs(inputRef, ref),\n      id,\n      type: 'checkbox',\n      name,\n      value,\n      tabIndex,\n      required,\n      disabled,\n      readOnly,\n      checked,\n      style: {\n        border: '0px',\n        clip: 'rect(0px, 0px, 0px, 0px)',\n        height: '1px',\n        width: '1px',\n        margin: '-1px',\n        padding: '0px',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        position: 'absolute',\n      },\n      onChange: handlerAll(props.onChange, onChange),\n      onBlur: handlerAll(props.onBlur, onBlur, () => setFocused(false)),\n      onFocus: handlerAll(props.onFocus, onFocus, () => setFocused(true)),\n      onKeyDown: handlerAll(props.onKeyDown, onKeyDown),\n      onKeyUp: handlerAll(props.onKeyUp, onKeyUp),\n    }),\n    [\n      rest,\n      id,\n      name,\n      value,\n      tabIndex,\n      required,\n      disabled,\n      readOnly,\n      checked,\n      onChange,\n      onBlur,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...pickObject(rest, formControlProperties),\n      ...props,\n      ref,\n      'data-checked': dataAttr(checked),\n      onMouseDown: handlerAll(props.onMouseDown, (ev: SyntheticEvent) => {\n        ev.preventDefault()\n        ev.stopPropagation()\n      }),\n      onTouchStart: handlerAll(props.onTouchStart, (ev: SyntheticEvent) => {\n        ev.preventDefault()\n        ev.stopPropagation()\n      }),\n    }),\n    [checked, rest],\n  )\n\n  return {\n    isFocusVisible,\n    isFocused,\n    isHovered,\n    isActive,\n    isChecked: checked,\n    isIndeterminate,\n    getContainerProps,\n    getIconProps,\n    getInputProps,\n    getLabelProps,\n  }\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n\ntype CheckboxOptions = {\n  /**\n   * Props for icon component.\n   */\n  iconProps?: Omit<HTMLUIProps<'span'>, 'children'> & { children: ReactElement }\n  /**\n   * Props for input element.\n   */\n  inputProps?: InputHTMLAttributes<HTMLInputElement>\n  /**\n   * Props for label element.\n   */\n  labelProps?: HTMLUIProps<'span'>\n}\n\nexport type CheckboxProps<Y extends string | number = string> = Omit<\n  HTMLUIProps<'label'>,\n  keyof UseCheckboxProps | 'checked'\n> &\n  ThemeProps<'Checkbox'> &\n  UseCheckboxProps<Y> &\n  CheckboxOptions\n\nexport const Checkbox = forwardRef(\n  <Y extends string | number = string>(\n    props: CheckboxProps<Y>,\n    ref: ForwardedRef<HTMLInputElement>,\n  ) => {\n    const group = useCheckboxGroupContext()\n    const control = useFormControl(props)\n    const [styles, mergedProps] = useMultiComponentStyle('Checkbox', {\n      ...(group ? omitObject(group, ['value']) : {}),\n      ...props,\n    })\n    const {\n      className,\n      gap = '0.5rem',\n      isRequired = group?.isRequired ?? control.isRequired,\n      isReadOnly = group?.isReadOnly ?? control.isReadOnly,\n      isDisabled = group?.isDisabled ?? control.isDisabled,\n      isInvalid = group?.isInvalid ?? control.isInvalid,\n      iconProps,\n      inputProps,\n      labelProps,\n      children,\n      ...rest\n    } = omitThemeProps(mergedProps)\n\n    const {\n      isChecked,\n      isIndeterminate,\n      getContainerProps,\n      getInputProps,\n      getIconProps,\n      getLabelProps,\n    } = useCheckbox({\n      ...rest,\n      isRequired,\n      isReadOnly,\n      isDisabled,\n      isInvalid,\n      isChecked:\n        group?.value && rest.value\n          ? group.value.includes(rest.value)\n          : rest.isChecked,\n      onChange:\n        group?.onChange && rest.value\n          ? funcAll(group.onChange, rest.onChange)\n          : rest.onChange,\n    })\n\n    const cloneIcon = cloneElement(iconProps?.children ?? <CheckboxIcon />, {\n      __css: {\n        opacity: isChecked || isIndeterminate ? 1 : 0,\n        transform: isChecked || isIndeterminate ? 'scale(1)' : 'scale(0.95)',\n        transitionProperty: 'transform',\n        transitionDuration: 'normal',\n      },\n      isIndeterminate,\n      isChecked,\n      isRequired,\n      isReadOnly,\n      isDisabled,\n      isInvalid,\n    })\n\n    return (\n      <ui.label\n        className={cx('ui-checkbox', className)}\n        {...getContainerProps()}\n        __css={{\n          cursor: 'pointer',\n          position: 'relative',\n          display: 'inline-flex',\n          alignItems: 'center',\n          verticalAlign: 'top',\n          gap,\n          ...styles.container,\n        }}\n        {...omitObject(rest, [\n          'id',\n          'name',\n          'value',\n          'defaultValue',\n          'defaultChecked',\n          'isChecked',\n          'isIndeterminate',\n          'onChange',\n          'onBlur',\n          'onFocus',\n          'tabIndex',\n        ])}\n      >\n        <ui.input\n          className='ui-checkbox-input'\n          {...getInputProps(inputProps, ref)}\n        />\n\n        <ui.span\n          className='ui-checkbox-icon'\n          __css={{\n            pointerEvents: isReadOnly ? 'none' : undefined,\n            position: 'relative',\n            display: 'inline-block',\n            userSelect: 'none',\n            ...styles.icon,\n          }}\n          {...getIconProps(\n            omitObject(iconProps ?? { children: undefined }, ['children']),\n          )}\n        >\n          {cloneIcon}\n        </ui.span>\n\n        <ui.span\n          className='ui-checkbox-label'\n          __css={{ ...styles.label }}\n          {...getLabelProps(labelProps)}\n        >\n          {children}\n        </ui.span>\n      </ui.label>\n    )\n  },\n) as {\n  <Y extends string | number = string>(\n    props: CheckboxProps<Y> & { ref?: Ref<HTMLInputElement> },\n  ): JSX.Element\n} & ComponentArgs\n\nCheckbox.displayName = 'Checkbox'\n\nexport type CheckboxIconProps = HTMLUIProps<'svg'> &\n  SVGMotionProps<SVGSVGElement> &\n  FormControlOptions & {\n    /**\n     * If `true`, the icon will be indeterminate.\n     *\n     * @default false\n     */\n    isIndeterminate?: boolean\n    /**\n     * If `true`, the icon will be checked.\n     *\n     * @default false\n     */\n    isChecked?: boolean\n  }\n\nexport const CheckboxIcon: FC<CheckboxIconProps> = ({\n  isIndeterminate,\n  isChecked,\n  ...rest\n}) => {\n  const iconProps = omitObject(rest, [\n    'isRequired',\n    'isReadOnly',\n    'isDisabled',\n    'isInvalid',\n  ])\n\n  return (\n    <AnimatePresence initial={false}>\n      {isIndeterminate || isChecked ? (\n        <ui.div\n          __css={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n          }}\n        >\n          <ui.div\n            as={motion.div}\n            variants={{\n              unchecked: { scale: 0.5 },\n              checked: { scale: 1 },\n            }}\n            initial='unchecked'\n            animate='checked'\n            exit='unchecked'\n            style={\n              {\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n              } as CSSProperties\n            }\n          >\n            {isIndeterminate ? (\n              <IndeterminateIcon {...iconProps} />\n            ) : (\n              <CheckIcon {...iconProps} />\n            )}\n          </ui.div>\n        </ui.div>\n      ) : null}\n    </AnimatePresence>\n  )\n}\n\nconst CheckIcon: FC<HTMLUIProps<'svg'> & SVGMotionProps<SVGSVGElement>> = (\n  props,\n) => {\n  return (\n    <ui.svg\n      as={motion.svg}\n      width='1.2em'\n      viewBox='0 0 12 10'\n      variants={{\n        unchecked: {\n          opacity: 0,\n          strokeDashoffset: 16,\n        },\n        checked: {\n          opacity: 1,\n          strokeDashoffset: 0,\n          transition: { duration: 0.2 },\n        },\n      }}\n      style={{\n        fill: 'none',\n        strokeWidth: 2,\n        stroke: 'currentColor',\n        strokeDasharray: 16,\n      }}\n      {...props}\n    >\n      <polyline points='1.5 6 4.5 9 10.5 1' />\n    </ui.svg>\n  )\n}\n\nconst IndeterminateIcon: FC<\n  HTMLUIProps<'svg'> & SVGMotionProps<SVGSVGElement>\n> = (props) => {\n  return (\n    <ui.svg\n      as={motion.svg}\n      width='1.2em'\n      viewBox='0 0 24 24'\n      variants={{\n        unchecked: {\n          scaleX: 0.65,\n          opacity: 0,\n        },\n        checked: {\n          scaleX: 1,\n          opacity: 1,\n          transition: {\n            scaleX: { duration: 0 },\n            opacity: { duration: 0.02 },\n          },\n        },\n      }}\n      style={{ stroke: 'currentColor', strokeWidth: 4 }}\n      {...props}\n    >\n      <line x1='21' x2='3' y1='12' y2='12' />\n    </ui.svg>\n  )\n}\n"],"names":["isEvent","value","isObject","useCheckboxGroup","isNative","props","useCallbackRef","setValue","useControllableState","onChange","useCallback","evOrValue","isChecked","selectedValue","nextValue","v","getCheckboxProps","ref","val","CheckboxGroupProvider","useCheckboxGroupContext","createContext","CheckboxGroup","forwardRef","className","size","variant","colorScheme","children","direction","gap","isRequired","isReadOnly","isDisabled","isInvalid","useFormControl","jsx","Flex","cx","omitObject","useCheckbox","id","name","defaultChecked","tabIndex","required","disabled","readOnly","isIndeterminate","rest","useFormControlProps","isFocusVisible","setIsFocusVisible","useState","isFocused","setFocused","isHovered","setHovered","isActive","setActive","inputRef","useRef","isLabel","setIsLabel","setIsChecked","isControlled","checked","ev","_a","onBlur","onFocus","onKeyDown","key","onKeyUp","useEffect","trackFocusVisible","useSafeLayoutEffect","useUpdateEffect","getContainerProps","pickObject","formControlProperties","mergeRefs","el","dataAttr","handlerAll","getIconProps","getInputProps","getLabelProps","Checkbox","group","control","styles","mergedProps","useMultiComponentStyle","iconProps","inputProps","labelProps","omitThemeProps","funcAll","cloneIcon","cloneElement","CheckboxIcon","jsxs","ui","AnimatePresence","motion","IndeterminateIcon","CheckIcon"],"mappings":"ykBAeA,MAAMA,EAAWC,GACfA,GAASC,EAASD,CAAK,GAAKC,EAASD,EAAM,MAAM,EAyBtCE,GAAmB,CAAqC,CACnE,SAAAC,EACA,GAAGC,CACL,IAAgC,CACxBA,EAAA,SAAWC,EAAeD,EAAM,QAAQ,EAE9C,KAAM,CAACJ,EAAOM,CAAQ,EAAIC,GAAqB,CAC7C,MAAOH,EAAM,MACb,aAAcA,EAAM,cAAgB,CAAC,EACrC,SAAUA,EAAM,QAAA,CACjB,EAEKI,EAAWC,EAAA,YACdC,GAAiD,CAC1C,MAAAC,EAAYZ,EAAQW,CAAS,EAC/BA,EAAU,OAAO,QACjB,CAACV,EAAM,SAASU,CAAS,EAEvBE,EACJb,EAAQW,CAAS,EAAIA,EAAU,OAAO,MAAQA,EAG1CG,EAAYF,EACd,CAAC,GAAGX,EAAOY,CAAa,EACxBZ,EAAM,OAAQc,GAAM,OAAOA,CAAC,IAAM,OAAOF,CAAa,CAAC,EAE3DN,EAASO,CAAS,CACpB,EACA,CAACb,EAAOM,CAAQ,CAAA,EAGZS,EAKFN,EAAA,YACF,CAACL,EAAQ,CAAA,EAAIY,EAAM,QAAU,CAC3B,GAAGZ,EACH,IAAAY,EACA,CAACb,EAAW,UAAY,WAAW,EAAGH,EAAM,KACzCiB,GAAQ,OAAOb,EAAM,KAAK,IAAM,OAAOa,CAAG,CAC7C,EACA,SAAAT,CAAA,GAEF,CAACA,EAAUL,EAAUH,CAAK,CAAA,EAG5B,MAAO,CAAE,MAAAA,EAAO,SAAAM,EAAU,SAAAE,EAAU,iBAAAO,CAAiB,CACvD,EAkBM,CAACG,GAAuBC,EAAuB,EAAIC,GAEvD,CACA,OAAQ,GACR,KAAM,sBACR,CAAC,EAIYC,GAAgBC,EAAA,WAC3B,CACE,CACE,UAAAC,EACA,KAAAC,EACA,QAAAC,EACA,YAAAC,EACA,SAAAC,EACA,UAAAC,EAAY,SACZ,IAAAC,EACA,GAAGzB,GAELY,IACG,CACH,KAAM,CAAE,MAAAhB,EAAO,SAAAQ,CAAS,EAAIN,GAAoBE,CAAK,EAC/C,CAAE,WAAA0B,EAAY,WAAAC,EAAY,WAAAC,EAAY,UAAAC,GAC1CC,EAAe9B,CAAK,EAGpB,OAAA+B,EAACjB,GAAA,CACC,MACE,CACE,KAAAM,EACA,QAAAC,EACA,YAAAC,EACA,WAAAI,EACA,WAAAC,EACA,WAAAC,EACA,UAAAC,EACA,MAAAjC,EACA,SAAAQ,CACF,EAGF,SAAA2B,EAACC,GAAA,CACC,IAAApB,EACA,UAAWqB,EAAG,oBAAqBd,CAAS,EAC5C,KAAK,QACL,UAAAK,EACA,IAAKC,IAAQD,IAAc,MAAQ,OAAS,QAC3C,GAAGU,EAAWlC,EAAO,CACpB,QACA,eACA,WACA,YACA,aACA,aACA,YAAA,CACD,EAEA,SAAAuB,CAAA,CACH,CAAA,CAAA,CAGN,CACF,EAMAN,GAAc,YAAc,gBC9Ef,MAAAkB,GACXnC,GACG,CACG,KAAA,CACJ,GAAAoC,EACA,KAAAC,EACA,MAAAzC,EACA,eAAA0C,EACA,SAAAC,EACA,SAAAC,EACA,SAAAC,EACA,SAAAC,EACA,gBAAAC,EACA,GAAGC,CAAA,EACDC,GAAoB7C,CAAK,EAEvB,CAAC8C,EAAgBC,CAAiB,EAAIC,WAAkB,EAAK,EAC7D,CAACC,EAAWC,CAAU,EAAIF,WAAkB,EAAK,EACjD,CAACG,EAAWC,CAAU,EAAIJ,WAAkB,EAAK,EACjD,CAACK,EAAUC,CAAS,EAAIN,WAAkB,EAAK,EAE/CO,EAAWC,SAAyB,IAAI,EACxC,CAACC,EAASC,CAAU,EAAIV,WAAkB,EAAI,EAE9C,CAACzC,EAAWoD,CAAY,EAAIX,EAAAA,SAAkB,CAAC,CAACV,CAAc,EAE9DsB,EAAe5D,EAAM,YAAc,OACnC6D,EAAUD,EAAgB5D,EAAM,UAAwBO,EAExDH,EAAWH,EACd6D,GAAsC,OACrC,GAAIpB,GAAYD,EAAU,CACxBqB,EAAG,eAAe,EAElB,MACF,CAEKF,GACHD,EAAa,CAACE,GAAWlB,EAAkB,GAAOmB,EAAG,OAAO,OAAO,GAErEC,EAAAnB,EAAK,WAAL,MAAAmB,EAAA,KAAAnB,EAAgBkB,EAClB,EACA,CAACpB,EAAUD,EAAUmB,EAAcC,EAASlB,CAAe,CAAA,EAEvDqB,EAAS/D,EAAe2C,EAAK,MAAM,EACnCqB,EAAUhE,EAAe2C,EAAK,OAAO,EAErCsB,EAAY7D,EAAA,YAChB,CAAC,CAAE,IAAA8D,CAAA,IAAkC,CAC/BA,IAAQ,KAAKb,EAAU,EAAI,CACjC,EACA,CAACA,CAAS,CAAA,EAGNc,EAAU/D,EAAA,YACd,CAAC,CAAE,IAAA8D,CAAA,IAAkC,CAC/BA,IAAQ,KAAKb,EAAU,EAAK,CAClC,EACA,CAACA,CAAS,CAAA,EAGZe,EAAAA,UAAU,IACDC,GAAkBvB,CAAiB,EACzC,CAAE,CAAA,EAELwB,EAAoB,IAAM,CACpBhB,EAAS,UACFA,EAAA,QAAQ,cAAgB,EAAQZ,EAAe,EACzD,CAACA,CAAe,CAAC,EAEpB6B,GAAgB,IAAM,CAChB/B,GAAUS,EAAW,EAAK,CAAA,EAC7B,CAACT,EAAUS,CAAU,CAAC,EAEzBqB,EAAoB,IAAM,QACnBR,EAAAR,EAAS,UAAT,MAAAQ,EAAkB,OAEvBR,EAAS,QAAQ,KAAK,QAAU,IAAMI,EAAa,CAAC,CAACrB,CAAc,EACrE,EAAG,CAAE,CAAA,EAELiC,EAAoB,IAAM,CACnBhB,EAAS,SAEVA,EAAS,QAAQ,UAAYM,GAClBF,EAAAJ,EAAS,QAAQ,OAAO,CAAA,EACtC,CAACA,EAAS,OAAO,CAAC,EAErB,MAAMkB,EAAgCpE,EAAA,YACpC,CAACL,EAAQ,CAAA,EAAIY,EAAM,QAAU,CAC3B,GAAG8D,EAAW9B,EAAM+B,CAAqB,EACzC,GAAG3E,EACH,IAAK4E,EAAUhE,EAAMiE,GAAgC,CAC/CA,GAAenB,EAAAmB,EAAG,UAAY,OAAO,CAAA,CAC1C,EACD,eAAgBC,EAASjB,CAAO,EAChC,QAASkB,EAAW/E,EAAM,QAAS,IAAM,OACnCyD,KAEJM,EAAAR,EAAS,UAAT,MAAAQ,EAAkB,QAElB,sBAAsB,IAAA,OAAM,OAAAA,EAAAR,EAAS,UAAT,YAAAQ,EAAkB,QAAO,EAAA,CACtD,CAAA,GAEH,CAACF,EAASJ,EAASb,CAAI,CAAA,EAGnBoC,EAA2B3E,EAAA,YAC/B,CAACL,EAAQ,CAAA,EAAIY,EAAM,QAAU,CAC3B,GAAG8D,EAAW9B,EAAM+B,CAAqB,EACzC,GAAG3E,EACH,IAAAY,EACA,cAAekE,EAASzB,CAAQ,EAChC,aAAcyB,EAAS3B,CAAS,EAChC,eAAgB2B,EAASjB,CAAO,EAChC,aAAciB,EAAS7B,CAAS,EAChC,qBAAsB6B,EAAS7B,GAAaH,CAAc,EAC1D,qBAAsBgC,EAASnC,CAAe,EAC9C,cAAe,GACf,YAAaoC,EAAW/E,EAAM,YAAc8D,GAAyB,CAC/Db,GAAWa,EAAG,eAAe,EAEjCR,EAAU,EAAI,CAAA,CACf,EACD,UAAWyB,EAAW/E,EAAM,UAAW,IAAMsD,EAAU,EAAK,CAAC,EAC7D,aAAcyB,EAAW/E,EAAM,aAAc,IAAMoD,EAAW,EAAI,CAAC,EACnE,aAAc2B,EAAW/E,EAAM,aAAc,IAAMoD,EAAW,EAAK,CAAC,CAAA,GAEtE,CACEC,EACAQ,EACAZ,EACAE,EACAL,EACAH,EACAC,CACF,CAAA,EAGIqC,EAA4B5E,EAAA,YAChC,CAACL,EAAQ,CAAA,EAAIY,EAAM,QAAU,CAC3B,GAAG8D,EAAW9B,EAAM+B,CAAqB,EACzC,GAAG3E,EACH,IAAK4E,EAAUrB,EAAU3C,CAAG,EAC5B,GAAAwB,EACA,KAAM,WACN,KAAAC,EACA,MAAAzC,EACA,SAAA2C,EACA,SAAAC,EACA,SAAAC,EACA,SAAAC,EACA,QAAAmB,EACA,MAAO,CACL,OAAQ,MACR,KAAM,2BACN,OAAQ,MACR,MAAO,MACP,OAAQ,OACR,QAAS,MACT,SAAU,SACV,WAAY,SACZ,SAAU,UACZ,EACA,SAAUkB,EAAW/E,EAAM,SAAUI,CAAQ,EAC7C,OAAQ2E,EAAW/E,EAAM,OAAQgE,EAAQ,IAAMd,EAAW,EAAK,CAAC,EAChE,QAAS6B,EAAW/E,EAAM,QAASiE,EAAS,IAAMf,EAAW,EAAI,CAAC,EAClE,UAAW6B,EAAW/E,EAAM,UAAWkE,CAAS,EAChD,QAASa,EAAW/E,EAAM,QAASoE,CAAO,CAAA,GAE5C,CACExB,EACAR,EACAC,EACAzC,EACA2C,EACAC,EACAC,EACAC,EACAmB,EACAzD,EACA4D,EACAC,EACAC,EACAE,CACF,CAAA,EAGIc,GAA4B7E,EAAA,YAChC,CAACL,EAAQ,CAAA,EAAIY,EAAM,QAAU,CAC3B,GAAG8D,EAAW9B,EAAM+B,CAAqB,EACzC,GAAG3E,EACH,IAAAY,EACA,eAAgBkE,EAASjB,CAAO,EAChC,YAAakB,EAAW/E,EAAM,YAAc8D,GAAuB,CACjEA,EAAG,eAAe,EAClBA,EAAG,gBAAgB,CAAA,CACpB,EACD,aAAciB,EAAW/E,EAAM,aAAe8D,GAAuB,CACnEA,EAAG,eAAe,EAClBA,EAAG,gBAAgB,CAAA,CACpB,CAAA,GAEH,CAACD,EAASjB,CAAI,CAAA,EAGT,MAAA,CACL,eAAAE,EACA,UAAAG,EACA,UAAAE,EACA,SAAAE,EACA,UAAWQ,EACX,gBAAAlB,EACA,kBAAA8B,EACA,aAAAO,EACA,cAAAC,EACA,cAAAC,EAAA,CAEJ,EA2BaC,GAAWjE,EAAA,WACtB,CACElB,EACAY,IACG,CACH,MAAMwE,EAAQrE,KACRsE,EAAUvD,EAAe9B,CAAK,EAC9B,CAACsF,EAAQC,CAAW,EAAIC,GAAuB,WAAY,CAC/D,GAAIJ,EAAQlD,EAAWkD,EAAO,CAAC,OAAO,CAAC,EAAI,CAAC,EAC5C,GAAGpF,CAAA,CACJ,EACK,CACJ,UAAAmB,EACA,IAAAM,EAAM,SACN,WAAAC,GAAa0D,GAAA,YAAAA,EAAO,aAAcC,EAAQ,WAC1C,WAAA1D,GAAayD,GAAA,YAAAA,EAAO,aAAcC,EAAQ,WAC1C,WAAAzD,GAAawD,GAAA,YAAAA,EAAO,aAAcC,EAAQ,WAC1C,UAAAxD,GAAYuD,GAAA,YAAAA,EAAO,YAAaC,EAAQ,UACxC,UAAAI,EACA,WAAAC,EACA,WAAAC,EACA,SAAApE,EACA,GAAGqB,CAAA,EACDgD,GAAeL,CAAW,EAExB,CACJ,UAAAhF,EACA,gBAAAoC,EACA,kBAAA8B,EACA,cAAAQ,EACA,aAAAD,EACA,cAAAE,GACE/C,GAAY,CACd,GAAGS,EACH,WAAAlB,EACA,WAAAC,EACA,WAAAC,EACA,UAAAC,EACA,UACEuD,GAAA,MAAAA,EAAO,OAASxC,EAAK,MACjBwC,EAAM,MAAM,SAASxC,EAAK,KAAK,EAC/BA,EAAK,UACX,SACEwC,GAAA,MAAAA,EAAO,UAAYxC,EAAK,MACpBiD,GAAQT,EAAM,SAAUxC,EAAK,QAAQ,EACrCA,EAAK,QAAA,CACZ,EAEKkD,EAAYC,EAAAA,cAAaN,GAAA,YAAAA,EAAW,WAAY1D,EAACiE,KAAa,EAAI,CACtE,MAAO,CACL,QAASzF,GAAaoC,EAAkB,EAAI,EAC5C,UAAWpC,GAAaoC,EAAkB,WAAa,cACvD,mBAAoB,YACpB,mBAAoB,QACtB,EACA,gBAAAA,EACA,UAAApC,EACA,WAAAmB,EACA,WAAAC,EACA,WAAAC,EACA,UAAAC,CAAA,CACD,EAGC,OAAAoE,GAACC,EAAG,MAAH,CACC,UAAWjE,EAAG,cAAed,CAAS,EACrC,GAAGsD,EAAkB,EACtB,MAAO,CACL,OAAQ,UACR,SAAU,WACV,QAAS,cACT,WAAY,SACZ,cAAe,MACf,IAAAhD,EACA,GAAG6D,EAAO,SACZ,EACC,GAAGpD,EAAWU,EAAM,CACnB,KACA,OACA,QACA,eACA,iBACA,YACA,kBACA,WACA,SACA,UACA,UAAA,CACD,EAED,SAAA,CAAAb,EAACmE,EAAG,MAAH,CACC,UAAU,oBACT,GAAGjB,EAAcS,EAAY9E,CAAG,CAAA,CACnC,EAEAmB,EAACmE,EAAG,KAAH,CACC,UAAU,mBACV,MAAO,CACL,cAAevE,EAAa,OAAS,OACrC,SAAU,WACV,QAAS,eACT,WAAY,OACZ,GAAG2D,EAAO,IACZ,EACC,GAAGN,EACF9C,EAAWuD,GAAa,CAAE,SAAU,MAAa,EAAA,CAAC,UAAU,CAAC,CAC/D,EAEC,SAAAK,CAAA,CACH,EAEA/D,EAACmE,EAAG,KAAH,CACC,UAAU,oBACV,MAAO,CAAE,GAAGZ,EAAO,KAAM,EACxB,GAAGJ,EAAcS,CAAU,EAE3B,SAAApE,CAAA,CACH,CAAA,CAAA,CAAA,CAGN,CACF,EAMA4D,GAAS,YAAc,WAmBhB,MAAMa,GAAsC,CAAC,CAClD,gBAAArD,EACA,UAAApC,EACA,GAAGqC,CACL,IAAM,CACE,MAAA6C,EAAYvD,EAAWU,EAAM,CACjC,aACA,aACA,aACA,WAAA,CACD,EAED,OACGb,EAAAoE,GAAA,CAAgB,QAAS,GACvB,YAAmB5F,EAClBwB,EAACmE,EAAG,IAAH,CACC,MAAO,CACL,SAAU,WACV,IAAK,MACL,KAAM,MACN,UAAW,uBACb,EAEA,SAAAnE,EAACmE,EAAG,IAAH,CACC,GAAIE,EAAO,IACX,SAAU,CACR,UAAW,CAAE,MAAO,EAAI,EACxB,QAAS,CAAE,MAAO,CAAE,CACtB,EACA,QAAQ,YACR,QAAQ,UACR,KAAK,YACL,MACE,CACE,QAAS,OACT,WAAY,SACZ,eAAgB,QAClB,EAGD,SAAAzD,IACE0D,GAAmB,CAAA,GAAGZ,EAAW,EAElC1D,EAACuE,GAAW,CAAA,GAAGb,CAAW,CAAA,CAAA,CAE9B,CAAA,CAAA,EAEA,IACN,CAAA,CAEJ,EAEMa,GACJtG,GAGE+B,EAACmE,EAAG,IAAH,CACC,GAAIE,EAAO,IACX,MAAM,QACN,QAAQ,YACR,SAAU,CACR,UAAW,CACT,QAAS,EACT,iBAAkB,EACpB,EACA,QAAS,CACP,QAAS,EACT,iBAAkB,EAClB,WAAY,CAAE,SAAU,EAAI,CAC9B,CACF,EACA,MAAO,CACL,KAAM,OACN,YAAa,EACb,OAAQ,eACR,gBAAiB,EACnB,EACC,GAAGpG,EAEJ,SAAA+B,EAAC,WAAS,CAAA,OAAO,oBAAqB,CAAA,CAAA,CAAA,EAKtCsE,GAEDrG,GAED+B,EAACmE,EAAG,IAAH,CACC,GAAIE,EAAO,IACX,MAAM,QACN,QAAQ,YACR,SAAU,CACR,UAAW,CACT,OAAQ,IACR,QAAS,CACX,EACA,QAAS,CACP,OAAQ,EACR,QAAS,EACT,WAAY,CACV,OAAQ,CAAE,SAAU,CAAE,EACtB,QAAS,CAAE,SAAU,GAAK,CAC5B,CACF,CACF,EACA,MAAO,CAAE,OAAQ,eAAgB,YAAa,CAAE,EAC/C,GAAGpG,EAEJ,SAAA+B,EAAC,QAAK,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,IAAK,CAAA,CAAA,CAAA"}