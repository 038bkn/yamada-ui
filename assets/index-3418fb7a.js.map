{"version":3,"file":"index-3418fb7a.js","sources":["../../packages/hooks/use-focus/src/index.ts"],"sourcesContent":["import { useEventListener } from '@yamada-ui/use-event-listener'\nimport {\n  FocusableElement,\n  getActiveElement,\n  getAllFocusable,\n  isRefObject,\n  isTabbable,\n  useSafeLayoutEffect,\n  useUpdateEffect,\n  isSafari,\n} from '@yamada-ui/utils'\nimport { RefObject, useCallback, useRef } from 'react'\n\nexport type UseFocusOnHideProps = {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\nconst preventReturnFocus = (containerRef: React.RefObject<HTMLElement>) => {\n  const el = containerRef.current\n\n  if (!el) return false\n\n  const activeElement = getActiveElement(el)\n\n  if (!activeElement) return false\n  if (el.contains(activeElement)) return false\n  if (isTabbable(activeElement)) return true\n\n  return false\n}\n\nexport const useFocusOnHide = (\n  containerRef: RefObject<HTMLElement>,\n  { shouldFocus: shouldFocusProp, visible, focusRef }: UseFocusOnHideProps,\n) => {\n  const shouldFocus = shouldFocusProp && !visible\n\n  useUpdateEffect(() => {\n    if (!shouldFocus) return\n\n    if (preventReturnFocus(containerRef)) return\n\n    const el = focusRef?.current || containerRef.current\n\n    if (el) {\n      requestAnimationFrame(() => {\n        el.focus()\n      })\n    }\n  }, [shouldFocus, containerRef, focusRef])\n}\n\nexport type UseFocusOnShowProps = {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nexport const useFocusOnShow = <T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  { focusRef, preventScroll, shouldFocus, visible }: UseFocusOnShowProps = {\n    preventScroll: true,\n    shouldFocus: false,\n  },\n) => {\n  const element = isRefObject(target) ? target.current : target\n\n  const autoFocusValue = shouldFocus && visible\n  const autoFocusRef = useRef(autoFocusValue)\n  const lastVisibleRef = useRef(visible)\n\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible)\n      autoFocusRef.current = autoFocusValue\n\n    lastVisibleRef.current = visible\n  }, [visible, autoFocusValue])\n\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return\n\n    autoFocusRef.current = false\n\n    if (element.contains(document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      requestAnimationFrame(() => {\n        focusRef.current?.focus({ preventScroll })\n      })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n\n      if (tabbableEls.length > 0)\n        requestAnimationFrame(() => {\n          tabbableEls[0].focus({ preventScroll })\n        })\n    }\n  }, [visible, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(element, 'transitionend', onFocus)\n}\n\nexport type UseFocusOnMouseDownProps = {\n  ref: React.RefObject<HTMLElement>\n  enabled?: boolean\n  elements?: Array<React.RefObject<HTMLElement> | HTMLElement | null>\n}\n\nexport const useFocusOnPointerDown = ({\n  ref,\n  elements,\n  enabled,\n}: UseFocusOnMouseDownProps) => {\n  const doc = () => ref.current?.ownerDocument ?? document\n\n  useEventListener(doc, 'pointerdown', (event) => {\n    if (!isSafari() || !enabled) return\n    const target = event.target as HTMLElement\n\n    const els = elements ?? [ref]\n\n    const isValidTarget = els.some((elementOrRef) => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef\n      return el?.contains(target) || el === target\n    })\n\n    if (doc().activeElement !== target && isValidTarget) {\n      event.preventDefault()\n\n      target.focus()\n    }\n  })\n}\n"],"names":["preventReturnFocus","containerRef","el","activeElement","getActiveElement","isTabbable","useFocusOnHide","shouldFocusProp","visible","focusRef","shouldFocus","useUpdateEffect","useFocusOnShow","target","preventScroll","element","isRefObject","autoFocusValue","autoFocusRef","useRef","lastVisibleRef","useSafeLayoutEffect","onFocus","useCallback","_a","tabbableEls","getAllFocusable","useEventListener","useFocusOnPointerDown","ref","elements","enabled","doc","event","isSafari","isValidTarget","elementOrRef"],"mappings":"qMAmBA,MAAMA,EAAsBC,GAA+C,CACzE,MAAMC,EAAKD,EAAa,QAExB,GAAI,CAACC,EAAW,MAAA,GAEV,MAAAC,EAAgBC,EAAiBF,CAAE,EAGrC,MADA,CAACC,GACDD,EAAG,SAASC,CAAa,EAAU,GACnC,EAAAE,EAAWF,CAAa,CAG9B,EAEaG,EAAiB,CAC5BL,EACA,CAAE,YAAaM,EAAiB,QAAAC,EAAS,SAAAC,KACtC,CACG,MAAAC,EAAcH,GAAmB,CAACC,EAExCG,EAAgB,IAAM,CAGpB,GAFI,CAACD,GAEDV,EAAmBC,CAAY,EAAG,OAEhC,MAAAC,GAAKO,GAAA,YAAAA,EAAU,UAAWR,EAAa,QAEzCC,GACF,sBAAsB,IAAM,CAC1BA,EAAG,MAAM,CAAA,CACV,CAEF,EAAA,CAACQ,EAAaT,EAAcQ,CAAQ,CAAC,CAC1C,EASaG,EAAiB,CAC5BC,EACA,CAAE,SAAAJ,EAAU,cAAAK,EAAe,YAAAJ,EAAa,QAAAF,GAAiC,CACvE,cAAe,GACf,YAAa,EACf,IACG,CACH,MAAMO,EAAUC,EAAYH,CAAM,EAAIA,EAAO,QAAUA,EAEjDI,EAAiBP,GAAeF,EAChCU,EAAeC,SAAOF,CAAc,EACpCG,EAAiBD,SAAOX,CAAO,EAErCa,EAAoB,IAAM,CACpB,CAACD,EAAe,SAAWZ,IAC7BU,EAAa,QAAUD,GAEzBG,EAAe,QAAUZ,CAAA,EACxB,CAACA,EAASS,CAAc,CAAC,EAEtB,MAAAK,EAAUC,EAAAA,YAAY,IAAM,CAChC,GAAI,GAACf,GAAW,CAACO,GAAW,CAACG,EAAa,WAE1CA,EAAa,QAAU,GAEnB,CAAAH,EAAQ,SAAS,SAAS,aAA4B,GAE1D,GAAIN,GAAA,MAAAA,EAAU,QACZ,sBAAsB,IAAM,QAC1Be,EAAAf,EAAS,UAAT,MAAAe,EAAkB,MAAM,CAAE,cAAAV,CAAe,EAAA,CAC1C,MACI,CACC,MAAAW,EAAcC,EAAgBX,CAAO,EAEvCU,EAAY,OAAS,GACvB,sBAAsB,IAAM,CAC1BA,EAAY,CAAC,EAAE,MAAM,CAAE,cAAAX,CAAe,CAAA,CAAA,CACvC,CACL,GACC,CAACN,EAASM,EAAeC,EAASN,CAAQ,CAAC,EAE9CE,EAAgB,IAAM,CACZW,GAAA,EACP,CAACA,CAAO,CAAC,EAEKK,EAAAZ,EAAS,gBAAiBO,CAAO,CACpD,EAQaM,EAAwB,CAAC,CACpC,IAAAC,EACA,SAAAC,EACA,QAAAC,CACF,IAAgC,CAC9B,MAAMC,EAAM,IAAM,OAAA,QAAAR,EAAAK,EAAI,UAAJ,YAAAL,EAAa,gBAAiB,UAE/BG,EAAAK,EAAK,cAAgBC,GAAU,CAC1C,GAAA,CAACC,EAAS,GAAK,CAACH,EAAS,OAC7B,MAAMlB,EAASoB,EAAM,OAIfE,GAFML,GAAY,CAACD,CAAG,GAEF,KAAMO,GAAiB,CAC/C,MAAMlC,EAAKc,EAAYoB,CAAY,EAAIA,EAAa,QAAUA,EAC9D,OAAOlC,GAAA,YAAAA,EAAI,SAASW,KAAWX,IAAOW,CAAA,CACvC,EAEGmB,EAAI,EAAE,gBAAkBnB,GAAUsB,IACpCF,EAAM,eAAe,EAErBpB,EAAO,MAAM,EACf,CACD,CACH"}