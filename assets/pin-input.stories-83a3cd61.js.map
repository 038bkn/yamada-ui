{"version":3,"file":"pin-input.stories-83a3cd61.js","sources":["../../packages/components/pin-input/src/pin-input.tsx"],"sourcesContent":["import {\n  ui,\n  forwardRef,\n  useMultiComponentStyle,\n  omitThemeProps,\n  CSSUIObject,\n  HTMLUIProps,\n  ThemeProps,\n  ColorModeToken,\n  CSS,\n} from \"@yamada-ui/core\"\nimport {\n  useFormControlProps,\n  FormControlOptions,\n  formControlProperties,\n} from \"@yamada-ui/form-control\"\nimport { useControllableState } from \"@yamada-ui/use-controllable-state\"\nimport { createDescendant } from \"@yamada-ui/use-descendant\"\nimport {\n  createContext,\n  cx,\n  handlerAll,\n  mergeRefs,\n  pickObject,\n  filterUndefined,\n  getValidChildren,\n} from \"@yamada-ui/utils\"\nimport {\n  ChangeEvent,\n  KeyboardEvent,\n  Ref,\n  useCallback,\n  useEffect,\n  useId,\n  useState,\n} from \"react\"\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nconst validate = (value: string, type: PinInputProps[\"type\"]) => {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n\n  return regex.test(value)\n}\n\ntype PinInputContext = {\n  getInputProps: (\n    props: PinInputFieldProps & {\n      index: number\n      ref?: Ref<HTMLInputElement>\n    },\n  ) => PinInputFieldProps\n  styles: Record<string, CSSUIObject>\n}\n\nconst [PinInputProvider, usePinInputContext] = createContext<PinInputContext>({\n  strict: false,\n  name: \"PinInputContext\",\n})\n\nconst { DescendantsContextProvider, useDescendants, useDescendant } =\n  createDescendant<HTMLInputElement>()\n\ntype PinInputOptions = {\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   */\n  id?: string\n  /**\n   * The type of values the pin-input should allow.\n   *\n   * @default 'number'\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * The placeholder for the pin input.\n   *\n   * @default '○'\n   */\n  placeholder?: string\n  /**\n   * The value of the pin input.\n   */\n  value?: string\n  /**\n   * The initial value of the pin input.\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the pin input receives focus on mount.\n   *\n   * @default false\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, focus will move automatically to the next input once filled.\n   *\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should.\n   */\n  otp?: boolean\n  /**\n   * If `true`, the input's value will be masked just like `type=password`.\n   */\n  mask?: boolean\n  /**\n   * Function called on input change.\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values.\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The number of inputs to display.\n   *\n   * @default 4\n   */\n  fileds?: number\n  /**\n   * The border color when the input is focused.\n   */\n  focusBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n  /**\n   * The border color when the input is invalid.\n   */\n  errorBorderColor?: ColorModeToken<CSS.Property.BorderColor, \"colors\">\n}\n\nexport type PinInputProps = Omit<HTMLUIProps<\"div\">, \"onChange\"> &\n  ThemeProps<\"PinInput\"> &\n  FormControlOptions &\n  PinInputOptions\n\nexport const PinInput = forwardRef<PinInputProps, \"div\">(\n  ({ focusBorderColor, errorBorderColor, ...props }, ref) => {\n    const [styles, mergedProps] = useMultiComponentStyle(\"PinInput\", {\n      focusBorderColor,\n      errorBorderColor,\n      ...props,\n    })\n    let {\n      id,\n      className,\n      type = \"number\",\n      placeholder = \"○\",\n      value,\n      defaultValue,\n      autoFocus,\n      manageFocus = true,\n      otp = false,\n      mask,\n      onChange,\n      onComplete,\n      fileds = 4,\n      children,\n      ...rest\n    } = useFormControlProps(omitThemeProps(mergedProps))\n\n    id = id ?? useId()\n\n    const descendants = useDescendants()\n\n    const [moveFocus, setMoveFocus] = useState<boolean>(true)\n    const [focusedIndex, setFocusedIndex] = useState<number>(-1)\n\n    useEffect(() => {\n      if (!autoFocus) return\n\n      const firstValue = descendants.firstValue()\n\n      if (!firstValue) return\n\n      requestAnimationFrame(() => firstValue.node.focus())\n    }, [autoFocus, descendants])\n\n    const [values, setValues] = useControllableState<string[]>({\n      value: toArray(value),\n      defaultValue: toArray(defaultValue) || [],\n      onChange: (values) => onChange?.(values.join(\"\")),\n    })\n\n    const focusNext = useCallback(\n      (index: number) => {\n        if (!moveFocus || !manageFocus) return\n\n        const next = descendants.nextValue(index, undefined, false)\n\n        if (!next) return\n\n        requestAnimationFrame(() => next.node.focus())\n      },\n      [descendants, moveFocus, manageFocus],\n    )\n\n    const setValue = useCallback(\n      (value: string, index: number, isFocus: boolean = true) => {\n        let nextValues = [...values]\n\n        nextValues[index] = value\n\n        setValues(nextValues)\n\n        nextValues = nextValues.filter(Boolean)\n\n        const isComplete =\n          value !== \"\" &&\n          nextValues.length === descendants.count() &&\n          nextValues.every((value) => value != null && value !== \"\")\n\n        if (isComplete) {\n          onComplete?.(nextValues.join(\"\"))\n          descendants.value(index)?.node.blur()\n        } else if (isFocus) {\n          focusNext(index)\n        }\n      },\n      [values, setValues, descendants, onComplete, focusNext],\n    )\n\n    const getNextValue = useCallback(\n      (value: string | undefined, eventValue: string) => {\n        let nextValue = eventValue\n\n        if (!value?.length) return nextValue\n\n        if (value[0] === eventValue.charAt(0)) {\n          nextValue = eventValue.charAt(1)\n        } else if (value[0] === eventValue.charAt(1)) {\n          nextValue = eventValue.charAt(0)\n        }\n\n        return nextValue\n      },\n      [],\n    )\n\n    const getInputProps = useCallback(\n      ({\n        index,\n        ...props\n      }: PinInputFieldProps & {\n        index: number\n        ref?: Ref<HTMLInputElement>\n      }): PinInputFieldProps => {\n        const onChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\n          const eventValue = target.value\n          const currentValue = values[index]\n          const nextValue = getNextValue(currentValue, eventValue)\n\n          if (nextValue === \"\") {\n            setValue(\"\", index)\n\n            return\n          }\n\n          if (eventValue.length > 2) {\n            if (!validate(eventValue, type)) return\n\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.count())\n\n            setValues(nextValue)\n\n            if (nextValue.length === descendants.count()) {\n              onComplete?.(nextValue.join(\"\"))\n              descendants.value(index)?.node.blur()\n            }\n          } else {\n            if (validate(nextValue, type)) setValue(nextValue, index)\n\n            setMoveFocus(true)\n          }\n        }\n\n        const onKeyDown = ({\n          key,\n          target,\n        }: KeyboardEvent<HTMLInputElement>) => {\n          if (key !== \"Backspace\" || !manageFocus) return\n\n          if ((target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants.prevValue(index, undefined, false)\n\n            if (!prevInput) return\n\n            setValue(\"\", index - 1, false)\n            prevInput.node?.focus()\n            setMoveFocus(true)\n          } else {\n            setMoveFocus(false)\n          }\n        }\n\n        const onFocus = () => setFocusedIndex(index)\n\n        const onBlur = () => setFocusedIndex(-1)\n\n        return {\n          inputMode: type === \"number\" ? \"numeric\" : \"text\",\n          type: mask ? \"password\" : type === \"number\" ? \"tel\" : \"text\",\n          ...pickObject(rest, formControlProperties),\n          ...filterUndefined(props),\n          id: `${id}-${index}`,\n          value: values[index] || \"\",\n          onChange: handlerAll(props.onChange, onChange),\n          onKeyDown: handlerAll(props.onKeyDown, onKeyDown),\n          onFocus: handlerAll(props.onFocus, onFocus),\n          onBlur: handlerAll(props.onBlur, onBlur),\n          autoComplete: otp ? \"one-time-code\" : \"off\",\n          placeholder:\n            focusedIndex === index && !rest.readOnly && !props.readOnly\n              ? \"\"\n              : placeholder,\n        }\n      },\n      [\n        descendants,\n        focusedIndex,\n        getNextValue,\n        id,\n        manageFocus,\n        mask,\n        onComplete,\n        otp,\n        placeholder,\n        rest,\n        setValue,\n        setValues,\n        type,\n        values,\n      ],\n    )\n\n    const css: CSSUIObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      ...styles.container,\n    }\n\n    let cloneChildren = getValidChildren(children)\n\n    if (!cloneChildren.length)\n      for (let i = 0; i < fileds; i++) {\n        cloneChildren.push(<PinInputField key={i} />)\n      }\n\n    return (\n      <DescendantsContextProvider value={descendants}>\n        <PinInputProvider value={{ getInputProps, styles }}>\n          <ui.div\n            ref={ref}\n            className={cx(\"ui-pin-input\", className)}\n            {...rest}\n            __css={css}\n          >\n            {cloneChildren}\n          </ui.div>\n        </PinInputProvider>\n      </DescendantsContextProvider>\n    )\n  },\n)\n\nexport type PinInputFieldProps = HTMLUIProps<\"input\"> & FormControlOptions\n\nexport const PinInputField = forwardRef<PinInputFieldProps, \"input\">(\n  ({ className, ...rest }, ref) => {\n    const { getInputProps, styles } = usePinInputContext()\n    const { index, register } = useDescendant()\n\n    rest = useFormControlProps(rest)\n\n    const css: CSSUIObject = { ...styles.field }\n\n    return (\n      <ui.input\n        className={cx(\"ui-pin-input__field\", className)}\n        {...getInputProps({ ...rest, ref: mergeRefs(register, ref), index })}\n        __css={css}\n      />\n    )\n  },\n)\n"],"names":["toArray","value","validate","type","PinInputProvider","usePinInputContext","createContext","DescendantsContextProvider","useDescendants","useDescendant","createDescendant","PinInput","forwardRef","focusBorderColor","errorBorderColor","props","ref","styles","mergedProps","useMultiComponentStyle","id","className","placeholder","defaultValue","autoFocus","manageFocus","otp","mask","onChange","onComplete","fileds","children","rest","useFormControlProps","omitThemeProps","useId","descendants","moveFocus","setMoveFocus","useState","focusedIndex","setFocusedIndex","useEffect","firstValue","values","setValues","useControllableState","focusNext","useCallback","index","next","setValue","isFocus","nextValues","_a","getNextValue","eventValue","nextValue","getInputProps","target","currentValue","_","onKeyDown","key","prevInput","onFocus","onBlur","pickObject","formControlProperties","filterUndefined","handlerAll","css","cloneChildren","getValidChildren","i","jsx","PinInputField","ui","cx","register","mergeRefs"],"mappings":"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"}